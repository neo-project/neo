<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neo</name>
    </assembly>
    <members>
        <member name="T:Neo.BigDecimal">
            <summary>
            Represents a fixed-point number of arbitrary precision.
            </summary>
        </member>
        <member name="P:Neo.BigDecimal.Value">
            <summary>
            The <see cref="T:System.Numerics.BigInteger"/> value of the number.
            </summary>
        </member>
        <member name="P:Neo.BigDecimal.Decimals">
            <summary>
            The number of decimal places for this number.
            </summary>
        </member>
        <member name="P:Neo.BigDecimal.Sign">
            <summary>
            The sign of the number.
            </summary>
        </member>
        <member name="M:Neo.BigDecimal.#ctor(System.Numerics.BigInteger,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.BigDecimal"/> struct.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.BigInteger"/> value of the number.</param>
            <param name="decimals">The number of decimal places for this number.</param>
        </member>
        <member name="M:Neo.BigDecimal.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.BigDecimal"/> struct with the value of <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value of the number.</param>
        </member>
        <member name="M:Neo.BigDecimal.#ctor(System.Decimal,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.BigDecimal"/> struct with the value of <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value of the number.</param>
            <param name="decimals">The number of decimal places for this number.</param>
        </member>
        <member name="M:Neo.BigDecimal.ChangeDecimals(System.Byte)">
            <summary>
            Changes the decimals of the <see cref="T:Neo.BigDecimal"/>.
            </summary>
            <param name="decimals">The new decimals field.</param>
            <returns>The <see cref="T:Neo.BigDecimal"/> that has the new number of decimal places.</returns>
        </member>
        <member name="M:Neo.BigDecimal.Parse(System.String,System.Byte)">
            <summary>
            Parses a <see cref="T:Neo.BigDecimal"/> from the specified <see cref="T:System.String"/>.
            </summary>
            <param name="s">A number represented by a <see cref="T:System.String"/>.</param>
            <param name="decimals">The number of decimal places for this number.</param>
            <returns>The parsed <see cref="T:Neo.BigDecimal"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="s"/> is not in the correct format.</exception>
        </member>
        <member name="M:Neo.BigDecimal.ToString">
            <summary>
            Gets a <see cref="T:System.String"/> representing the number.
            </summary>
            <returns>The <see cref="T:System.String"/> representing the number.</returns>
        </member>
        <member name="M:Neo.BigDecimal.TryParse(System.String,System.Byte,Neo.BigDecimal@)">
            <summary>
            Parses a <see cref="T:Neo.BigDecimal"/> from the specified <see cref="T:System.String"/>.
            </summary>
            <param name="s">A number represented by a <see cref="T:System.String"/>.</param>
            <param name="decimals">The number of decimal places for this number.</param>
            <param name="result">The parsed <see cref="T:Neo.BigDecimal"/>.</param>
            <returns><see langword="true"/> if a number is successfully parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.Cryptography.Base58">
            <summary>
            A helper class for base-58 encoder.
            </summary>
        </member>
        <member name="F:Neo.Cryptography.Base58.Alphabet">
            <summary>
            Represents the alphabet of the base-58 encoder.
            </summary>
        </member>
        <member name="M:Neo.Cryptography.Base58.Base58CheckDecode(System.String)">
            <summary>
            Converts the specified <see cref="T:System.String"/>, which encodes binary data as base-58 digits, to an equivalent byte array. The encoded <see cref="T:System.String"/> contains the checksum of the binary data.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to convert.</param>
            <returns>A byte array that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Neo.Cryptography.Base58.Base58CheckEncode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Converts a byte array to its equivalent <see cref="T:System.String"/>
            representation that is encoded with base-58 digits.
            The encoded <see cref="T:System.String"/> contains the checksum of the binary data.
            </summary>
            <param name="data">The byte array to convert.</param>
            <returns>The <see cref="T:System.String"/> representation, in base-58, of the contents of <paramref name="data"/>.</returns>
        </member>
        <member name="M:Neo.Cryptography.Base58.Decode(System.String)">
            <summary>
            Converts the specified <see cref="T:System.String"/>, which encodes binary data as base-58 digits, to an equivalent byte array.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to convert.</param>
            <returns>A byte array that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Neo.Cryptography.Base58.Encode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Converts a byte array to its equivalent <see cref="T:System.String"/> representation that is encoded with base-58 digits.
            </summary>
            <param name="input">The byte array to convert.</param>
            <returns>The <see cref="T:System.String"/> representation, in base-58, of the contents of <paramref name="input"/>.</returns>
        </member>
        <member name="T:Neo.Cryptography.BloomFilter">
            <summary>
            Represents a bloom filter.
            </summary>
        </member>
        <member name="P:Neo.Cryptography.BloomFilter.K">
            <summary>
            The number of hash functions used by the bloom filter.
            </summary>
        </member>
        <member name="P:Neo.Cryptography.BloomFilter.M">
            <summary>
            The size of the bit array used by the bloom filter.
            </summary>
        </member>
        <member name="P:Neo.Cryptography.BloomFilter.Tweak">
            <summary>
            Used to generate the seeds of the murmur hash functions.
            </summary>
        </member>
        <member name="M:Neo.Cryptography.BloomFilter.#ctor(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Cryptography.BloomFilter"/> class.
            </summary>
            <param name="m">The size of the bit array used by the bloom filter.</param>
            <param name="k">The number of hash functions used by the bloom filter.</param>
            <param name="nTweak">Used to generate the seeds of the murmur hash functions.</param>
        </member>
        <member name="M:Neo.Cryptography.BloomFilter.#ctor(System.Int32,System.Int32,System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Cryptography.BloomFilter"/> class.
            </summary>
            <param name="m">The size of the bit array used by the bloom filter.</param>
            <param name="k">The number of hash functions used by the bloom filter.</param>
            <param name="nTweak">Used to generate the seeds of the murmur hash functions.</param>
            <param name="elements">The initial elements contained in this <see cref="T:Neo.Cryptography.BloomFilter"/> object.</param>
        </member>
        <member name="M:Neo.Cryptography.BloomFilter.Add(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Adds an element to the <see cref="T:Neo.Cryptography.BloomFilter"/>.
            </summary>
            <param name="element">The object to add to the <see cref="T:Neo.Cryptography.BloomFilter"/>.</param>
        </member>
        <member name="M:Neo.Cryptography.BloomFilter.Check(System.Byte[])">
            <summary>
            Determines whether the <see cref="T:Neo.Cryptography.BloomFilter"/> contains a specific element.
            </summary>
            <param name="element">The object to locate in the <see cref="T:Neo.Cryptography.BloomFilter"/>.</param>
            <returns><see langword="true"/> if <paramref name="element"/> is found in the <see cref="T:Neo.Cryptography.BloomFilter"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Cryptography.BloomFilter.GetBits(System.Byte[])">
            <summary>
            Gets the bit array in this <see cref="T:Neo.Cryptography.BloomFilter"/>.
            </summary>
            <param name="newBits">The byte array to store the bits.</param>
        </member>
        <member name="T:Neo.Cryptography.Crypto">
            <summary>
            A cryptographic helper class.
            </summary>
        </member>
        <member name="F:Neo.Cryptography.Crypto.secp256r1DomainParams">
            <summary>
            Holds domain parameters for Secp256r1 elliptic curve.
            </summary>
        </member>
        <member name="F:Neo.Cryptography.Crypto.secp256k1DomainParams">
            <summary>
            Holds domain parameters for Secp256k1 elliptic curve.
            </summary>
        </member>
        <member name="M:Neo.Cryptography.Crypto.Hash160(System.ReadOnlySpan{System.Byte})">
            <summary>
            Calculates the 160-bit hash value of the specified message.
            </summary>
            <param name="message">The message to be hashed.</param>
            <returns>160-bit hash value.</returns>
        </member>
        <member name="M:Neo.Cryptography.Crypto.Hash256(System.ReadOnlySpan{System.Byte})">
            <summary>
            Calculates the 256-bit hash value of the specified message.
            </summary>
            <param name="message">The message to be hashed.</param>
            <returns>256-bit hash value.</returns>
        </member>
        <member name="M:Neo.Cryptography.Crypto.Sign(System.Byte[],System.Byte[],Neo.Cryptography.ECC.ECCurve,Neo.Cryptography.Hasher)">
            <summary>
            Signs the specified message using the ECDSA algorithm and specified hash algorithm.
            </summary>
            <param name="message">The message to be signed.</param>
            <param name="priKey">The private key to be used.</param>
            <param name="ecCurve">The <see cref="T:Neo.Cryptography.ECC.ECCurve"/> curve of the signature, default is <see cref="F:Neo.Cryptography.ECC.ECCurve.Secp256r1"/>.</param>
            <param name="hasher">The hash algorithm to hash the message, default is SHA256.</param>
            <returns>The ECDSA signature for the specified message.</returns>
        </member>
        <member name="M:Neo.Cryptography.Crypto.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},Neo.Cryptography.ECC.ECPoint,Neo.Cryptography.Hasher)">
            <summary>
            Verifies that a digital signature is appropriate for the provided key, message and hash algorithm.
            </summary>
            <param name="message">The signed message.</param>
            <param name="signature">The signature to be verified.</param>
            <param name="pubkey">The public key to be used.</param>
            <param name="hasher">The hash algorithm to be used to hash the message, the default is SHA256.</param>
            <returns><see langword="true"/> if the signature is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Cryptography.Crypto.CreateECDsa(Neo.Cryptography.ECC.ECPoint)">
            <summary>
            Create and cache ECDsa objects
            </summary>
            <param name="pubkey"></param>
            <returns>Cached ECDsa</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Neo.Cryptography.Crypto.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},Neo.Cryptography.ECC.ECCurve,Neo.Cryptography.Hasher)">
            <summary>
            Verifies that a digital signature is appropriate for the provided key, curve, message and hasher.
            </summary>
            <param name="message">The signed message.</param>
            <param name="signature">The signature to be verified.</param>
            <param name="pubkey">The public key to be used.</param>
            <param name="curve">The curve to be used by the ECDSA algorithm.</param>
            <param name="hasher">The hash algorithm to be used hash the message, the default is SHA256.</param>
            <returns><see langword="true"/> if the signature is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.Cryptography.ECC.ECCurve">
            <summary>
            Represents an elliptic curve.
            </summary>
        </member>
        <member name="F:Neo.Cryptography.ECC.ECCurve.Infinity">
            <summary>
            The point at infinity.
            </summary>
        </member>
        <member name="F:Neo.Cryptography.ECC.ECCurve.G">
            <summary>
            The generator, or base point, for operations on the curve.
            </summary>
        </member>
        <member name="F:Neo.Cryptography.ECC.ECCurve.Secp256k1">
            <summary>
            Represents a secp256k1 named curve.
            </summary>
        </member>
        <member name="F:Neo.Cryptography.ECC.ECCurve.Secp256r1">
            <summary>
            Represents a secp256r1 named curve.
            </summary>
        </member>
        <member name="T:Neo.Cryptography.ECC.ECPoint">
            <summary>
            Represents a (X,Y) coordinate pair for elliptic curve cryptography (ECC) structures.
            </summary>
        </member>
        <member name="P:Neo.Cryptography.ECC.ECPoint.IsInfinity">
            <summary>
            Indicates whether it is a point at infinity.
            </summary>
        </member>
        <member name="M:Neo.Cryptography.ECC.ECPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Cryptography.ECC.ECPoint"/> class with the secp256r1 curve.
            </summary>
        </member>
        <member name="M:Neo.Cryptography.ECC.ECPoint.DecodePoint(System.ReadOnlySpan{System.Byte},Neo.Cryptography.ECC.ECCurve)">
            <summary>
            Decode an <see cref="T:Neo.Cryptography.ECC.ECPoint"/> object from a sequence of byte.
            </summary>
            <param name="encoded">The sequence of byte to be decoded.</param>
            <param name="curve">The <see cref="T:Neo.Cryptography.ECC.ECCurve"/> object used to construct the <see cref="T:Neo.Cryptography.ECC.ECPoint"/>.</param>
            <returns>The decoded point.</returns>
        </member>
        <member name="M:Neo.Cryptography.ECC.ECPoint.DeserializeFrom(Neo.IO.MemoryReader@,Neo.Cryptography.ECC.ECCurve)">
            <summary>
            Deserializes an <see cref="T:Neo.Cryptography.ECC.ECPoint"/> object from a <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
            <param name="curve">The <see cref="T:Neo.Cryptography.ECC.ECCurve"/> object used to construct the <see cref="T:Neo.Cryptography.ECC.ECPoint"/>.</param>
            <returns>The deserialized point.</returns>
        </member>
        <member name="M:Neo.Cryptography.ECC.ECPoint.EncodePoint(System.Boolean)">
            <summary>
            Encodes an <see cref="T:Neo.Cryptography.ECC.ECPoint"/> object to a byte array.
            </summary>
            <param name="commpressed">Indicates whether to encode it in a compressed format.</param>
            <returns>The encoded point.</returns>
            <remarks>Note: The return should't be modified because it could be cached.</remarks>
        </member>
        <member name="M:Neo.Cryptography.ECC.ECPoint.FromBytes(System.Byte[],Neo.Cryptography.ECC.ECCurve)">
            <summary>
            Constructs an <see cref="T:Neo.Cryptography.ECC.ECPoint"/> object from a byte array.
            </summary>
            <param name="bytes">The byte array to be used to construct the object.</param>
            <param name="curve">The <see cref="T:Neo.Cryptography.ECC.ECCurve"/> object used to construct the <see cref="T:Neo.Cryptography.ECC.ECPoint"/>.</param>
            <returns>The decoded point.</returns>
        </member>
        <member name="M:Neo.Cryptography.ECC.ECPoint.Parse(System.String,Neo.Cryptography.ECC.ECCurve)">
            <summary>
            Parse the <see cref="T:Neo.Cryptography.ECC.ECPoint"/> object from a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to be parsed.</param>
            <param name="curve">The <see cref="T:Neo.Cryptography.ECC.ECCurve"/> object used to construct the <see cref="T:Neo.Cryptography.ECC.ECPoint"/>.</param>
            <returns>The parsed point.</returns>
        </member>
        <member name="M:Neo.Cryptography.ECC.ECPoint.TryParse(System.String,Neo.Cryptography.ECC.ECCurve,Neo.Cryptography.ECC.ECPoint@)">
            <summary>
            Try parse the <see cref="T:Neo.Cryptography.ECC.ECPoint"/> object from a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to be parsed.</param>
            <param name="curve">The <see cref="T:Neo.Cryptography.ECC.ECCurve"/> object used to construct the <see cref="T:Neo.Cryptography.ECC.ECPoint"/>.</param>
            <param name="point">The parsed point.</param>
            <returns><see langword="true"/> if <paramref name="value"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.Cryptography.Hasher">
            <summary>
            Represents hash function identifiers supported by ECDSA message signature and verification.
            </summary>
        </member>
        <member name="F:Neo.Cryptography.Hasher.SHA256">
            <summary>
            The SHA256 hash algorithm.
            </summary>
        </member>
        <member name="F:Neo.Cryptography.Hasher.Keccak256">
            <summary>
            The Keccak256 hash algorithm.
            </summary>
        </member>
        <member name="T:Neo.Cryptography.Helper">
            <summary>
            A helper class for cryptography
            </summary>
        </member>
        <member name="M:Neo.Cryptography.Helper.RIPEMD160(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array using the ripemd160 algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.RIPEMD160(System.ReadOnlySpan{System.Byte})">
            <summary>
            Computes the hash value for the specified byte array using the ripemd160 algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.Murmur32(System.Byte[],System.UInt32)">
            <summary>
            Computes the hash value for the specified byte array using the murmur algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <param name="seed">The seed used by the murmur algorithm.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.Murmur32(System.ReadOnlySpan{System.Byte},System.UInt32)">
            <summary>
            Computes the hash value for the specified byte array using the murmur algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <param name="seed">The seed used by the murmur algorithm.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.Murmur128(System.Byte[],System.UInt32)">
            <summary>
            Computes the 128-bit hash value for the specified byte array using the murmur algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <param name="seed">The seed used by the murmur algorithm.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.Murmur128(System.ReadOnlySpan{System.Byte},System.UInt32)">
            <summary>
            Computes the 128-bit hash value for the specified byte array using the murmur algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <param name="seed">The seed used by the murmur algorithm.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.Sha256(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array using the sha256 algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.Sha256(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the specified byte array using the sha256 algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.Sha256(System.ReadOnlySpan{System.Byte})">
            <summary>
            Computes the hash value for the specified byte array using the sha256 algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.Sha256(System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified byte array using the sha256 algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.Keccak256(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array using the keccak256 algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.Keccak256(System.ReadOnlySpan{System.Byte})">
            <summary>
            Computes the hash value for the specified byte array using the keccak256 algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.Keccak256(System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified byte array using the keccak256 algorithm.
            </summary>
            <param name="value">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.RotateLeft(System.UInt32,System.Int32)">
            <summary>
            Rotates the specified value left by the specified number of bits.
            Similar in behavior to the x86 instruction ROL.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="offset">The number of bits to rotate by.
            Any value outside the range [0..31] is treated as congruent mod 32.</param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:Neo.Cryptography.Helper.RotateLeft(System.UInt64,System.Int32)">
            <summary>
            Rotates the specified value left by the specified number of bits.
            Similar in behavior to the x86 instruction ROL.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="offset">The number of bits to rotate by.
            Any value outside the range [0..63] is treated as congruent mod 64.</param>
            <returns>The rotated value.</returns>
        </member>
        <member name="T:Neo.Cryptography.MerkleTree">
            <summary>
            Represents a merkle tree.
            </summary>
        </member>
        <member name="P:Neo.Cryptography.MerkleTree.Depth">
            <summary>
            The depth of the tree.
            </summary>
        </member>
        <member name="M:Neo.Cryptography.MerkleTree.ComputeRoot(Neo.UInt256[])">
            <summary>
            Computes the root of the hash tree.
            </summary>
            <param name="hashes">The leaves of the hash tree.</param>
            <returns>The root of the hash tree.</returns>
        </member>
        <member name="M:Neo.Cryptography.MerkleTree.ToHashArray">
            <summary>
            Gets all nodes of the hash tree in depth-first order.
            </summary>
            <returns>All nodes of the hash tree.</returns>
        </member>
        <member name="M:Neo.Cryptography.MerkleTree.Trim(System.Collections.BitArray)">
            <summary>
            Trims the hash tree using the specified bit array.
            </summary>
            <param name="flags">The bit array to be used.</param>
        </member>
        <member name="T:Neo.Cryptography.Murmur128">
            <summary>
            Computes the 128 bits murmur hash for the input data.
            </summary>
        </member>
        <member name="M:Neo.Cryptography.Murmur128.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Cryptography.Murmur128"/> class with the specified seed.
            </summary>
            <param name="seed">The seed to be used.</param>
        </member>
        <member name="T:Neo.Cryptography.Murmur32">
            <summary>
            Computes the murmur hash for the input data.
            </summary>
        </member>
        <member name="M:Neo.Cryptography.Murmur32.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Cryptography.Murmur32"/> class with the specified seed.
            </summary>
            <param name="seed">The seed to be used.</param>
        </member>
        <member name="T:Neo.Cryptography.RIPEMD160Managed">
            <summary>
            Computes the ripemd160 hash for the input data.
            </summary>
        </member>
        <member name="M:Neo.Cryptography.RIPEMD160Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Cryptography.RIPEMD160Managed"/> class.
            </summary>
        </member>
        <member name="T:Neo.Helper">
            <summary>
            A helper class that provides common functions.
            </summary>
        </member>
        <member name="M:Neo.Helper.Concat(System.Byte[][])">
            <summary>
            Concatenates the specified byte arrays.
            </summary>
            <param name="buffers">The byte arrays to concatenate.</param>
            <returns>The concatenated byte array.</returns>
        </member>
        <member name="M:Neo.Helper.Concat(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Concatenates two byte arrays.
            </summary>
            <param name="a">The first byte array to concatenate.</param>
            <param name="b">The second byte array to concatenate.</param>
            <returns>The concatenated byte array.</returns>
        </member>
        <member name="M:Neo.Helper.HexToBytes(System.String)">
            <summary>
            Converts a hex <see cref="T:System.String"/> to byte array.
            </summary>
            <param name="value">The hex <see cref="T:System.String"/> to convert.</param>
            <returns>The converted byte array.</returns>
        </member>
        <member name="M:Neo.Helper.Sum(System.Collections.Generic.IEnumerable{System.Numerics.BigInteger})">
            <summary>
            Finds the sum of the specified integers.
            </summary>
            <param name="source">The specified integers.</param>
            <returns>The sum of the integers.</returns>
        </member>
        <member name="M:Neo.Helper.ToByteArrayStandard(System.Numerics.BigInteger)">
            <summary>
            Converts a <see cref="T:System.Numerics.BigInteger"/> to byte array and eliminates all the leading zeros.
            </summary>
            <param name="i">The <see cref="T:System.Numerics.BigInteger"/> to convert.</param>
            <returns>The converted byte array.</returns>
        </member>
        <member name="M:Neo.Helper.ToHexString(System.Byte[])">
            <summary>
            Converts a byte array to hex <see cref="T:System.String"/>.
            </summary>
            <param name="value">The byte array to convert.</param>
            <returns>The converted hex <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Neo.Helper.ToHexString(System.Byte[],System.Boolean)">
            <summary>
            Converts a byte array to hex <see cref="T:System.String"/>.
            </summary>
            <param name="value">The byte array to convert.</param>
            <param name="reverse">Indicates whether it should be converted in the reversed byte order.</param>
            <returns>The converted hex <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Neo.Helper.ToHexString(System.ReadOnlySpan{System.Byte})">
            <summary>
            Converts a byte array to hex <see cref="T:System.String"/>.
            </summary>
            <param name="value">The byte array to convert.</param>
            <returns>The converted hex <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Neo.Helper.ToTimestamp(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to timestamp.
            </summary>
            <param name="time">The <see cref="T:System.DateTime"/> to convert.</param>
            <returns>The converted timestamp.</returns>
        </member>
        <member name="M:Neo.Helper.ToTimestampMS(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to timestamp in milliseconds.
            </summary>
            <param name="time">The <see cref="T:System.DateTime"/> to convert.</param>
            <returns>The converted timestamp.</returns>
        </member>
        <member name="M:Neo.Helper.Unmap(System.Net.IPAddress)">
            <summary>
            Checks if address is IPv4 Mapped to IPv6 format, if so, Map to IPv4.
            Otherwise, return current address.
            </summary>
        </member>
        <member name="M:Neo.Helper.Unmap(System.Net.IPEndPoint)">
            <summary>
            Checks if IPEndPoint is IPv4 Mapped to IPv6 format, if so, unmap to IPv4.
            Otherwise, return current endpoint.
            </summary>
        </member>
        <member name="F:Neo.IO.Caching.HashSetCache`1.sets">
            <summary>
            Sets where the Hashes are stored
            </summary>
        </member>
        <member name="F:Neo.IO.Caching.HashSetCache`1.bucketCapacity">
            <summary>
            Maximum capacity of each bucket inside each HashSet of <see cref="F:Neo.IO.Caching.HashSetCache`1.sets"/>.
            </summary>
        </member>
        <member name="F:Neo.IO.Caching.HashSetCache`1.maxBucketCount">
            <summary>
            Maximum number of buckets for the LinkedList, meaning its maximum cardinality.
            </summary>
        </member>
        <member name="P:Neo.IO.Caching.HashSetCache`1.Count">
            <summary>
            Entry count
            </summary>
        </member>
        <member name="T:Neo.IO.Caching.IndexedQueue`1">
            <summary>
            Represents a queue with indexed access to the items
            </summary>
            <typeparam name="T">The type of items in the queue</typeparam>
        </member>
        <member name="P:Neo.IO.Caching.IndexedQueue`1.Count">
            <summary>
            Indicates the count of items in the queue
            </summary>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.#ctor">
            <summary>
            Creates a queue with the default capacity
            </summary>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.#ctor(System.Int32)">
            <summary>
            Creates a queue with the specified capacity
            </summary>
            <param name="capacity">The initial capacity of the queue</param>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a queue filled with the specified items
            </summary>
            <param name="collection">The collection of items to fill the queue with</param>
        </member>
        <member name="P:Neo.IO.Caching.IndexedQueue`1.Item(System.Int32)">
            <summary>
            Gets the value at the index
            </summary>
            <param name="index">The index</param>
            <returns>The value at the specified index</returns>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.Enqueue(`0)">
            <summary>
            Inserts an item at the rear of the queue
            </summary>
            <param name="item">The item to insert</param>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.Peek">
            <summary>
            Provides access to the item at the front of the queue without dequeuing it
            </summary>
            <returns>The front most item</returns>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.TryPeek(`0@)">
            <summary>
            Attempts to return an item from the front of the queue without removing it
            </summary>
            <param name="item">The item</param>
            <returns>True if the queue returned an item or false if the queue is empty</returns>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.Dequeue">
            <summary>
            Removes an item from the front of the queue, returning it
            </summary>
            <returns>The item that was removed</returns>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.TryDequeue(`0@)">
            <summary>
            Attempts to return an item from the front of the queue, removing it
            </summary>
            <param name="item">The item</param>
            <returns>True if the queue returned an item or false if the queue is empty</returns>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.Clear">
            <summary>
            Clears the items from the queue
            </summary>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.TrimExcess">
            <summary>
            Trims the extra array space that isn't being used.
            </summary>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy the queue's items to a destination array
            </summary>
            <param name="array">The destination array</param>
            <param name="arrayIndex">The index in the destination to start copying at</param>
        </member>
        <member name="M:Neo.IO.Caching.IndexedQueue`1.ToArray">
            <summary>
            Returns an array of the items in the queue
            </summary>
            <returns>An array containing the queue's items</returns>
        </member>
        <member name="P:Neo.IO.Caching.ReflectionCacheAttribute.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="M:Neo.IO.Caching.ReflectionCacheAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="T:Neo.IO.Helper">
            <summary>
            A helper class for serialization of NEO objects.
            </summary>
        </member>
        <member name="M:Neo.IO.Helper.AsSerializable``1(System.Byte[],System.Int32)">
            <summary>
            Converts a byte array to an <see cref="T:Neo.IO.ISerializable"/> object.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The byte array to be converted.</param>
            <param name="start">The offset into the byte array from which to begin using data.</param>
            <returns>The converted <see cref="T:Neo.IO.ISerializable"/> object.</returns>
        </member>
        <member name="M:Neo.IO.Helper.AsSerializable``1(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Converts a byte array to an <see cref="T:Neo.IO.ISerializable"/> object.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The byte array to be converted.</param>
            <returns>The converted <see cref="T:Neo.IO.ISerializable"/> object.</returns>
        </member>
        <member name="M:Neo.IO.Helper.AsSerializable(System.ReadOnlyMemory{System.Byte},System.Type)">
            <summary>
            Converts a byte array to an <see cref="T:Neo.IO.ISerializable"/> object.
            </summary>
            <param name="value">The byte array to be converted.</param>
            <param name="type">The type to convert to.</param>
            <returns>The converted <see cref="T:Neo.IO.ISerializable"/> object.</returns>
        </member>
        <member name="M:Neo.IO.Helper.AsSerializableArray``1(System.Byte[],System.Int32)">
            <summary>
            Converts a byte array to an <see cref="T:Neo.IO.ISerializable"/> array.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
            <param name="value">The byte array to be converted.</param>
            <param name="max">The maximum number of elements contained in the converted array.</param>
            <returns>The converted <see cref="T:Neo.IO.ISerializable"/> array.</returns>
        </member>
        <member name="M:Neo.IO.Helper.AsSerializableArray``1(System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Converts a byte array to an <see cref="T:Neo.IO.ISerializable"/> array.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
            <param name="value">The byte array to be converted.</param>
            <param name="max">The maximum number of elements contained in the converted array.</param>
            <returns>The converted <see cref="T:Neo.IO.ISerializable"/> array.</returns>
        </member>
        <member name="M:Neo.IO.Helper.CompressLz4(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compresses the specified data using the LZ4 algorithm.
            </summary>
            <param name="data">The data to be compressed.</param>
            <returns>The compressed data.</returns>
        </member>
        <member name="M:Neo.IO.Helper.DecompressLz4(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Decompresses the specified data using the LZ4 algorithm.
            </summary>
            <param name="data">The compressed data.</param>
            <param name="maxOutput">The maximum data size after decompression.</param>
            <returns>The original data.</returns>
        </member>
        <member name="M:Neo.IO.Helper.GetVarSize(System.Int32)">
            <summary>
            Gets the size of variable-length of the data.
            </summary>
            <param name="value">The length of the data.</param>
            <returns>The size of variable-length of the data.</returns>
        </member>
        <member name="M:Neo.IO.Helper.GetVarSize``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Gets the size of the specified array encoded in variable-length encoding.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
            <param name="value">The specified array.</param>
            <returns>The size of the array.</returns>
        </member>
        <member name="M:Neo.IO.Helper.GetVarSize(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Gets the size of the specified array encoded in variable-length encoding.
            </summary>
            <param name="value">The specified array.</param>
            <returns>The size of the array.</returns>
        </member>
        <member name="M:Neo.IO.Helper.GetVarSize(System.String)">
            <summary>
            Gets the size of the specified <see cref="T:System.String"/> encoded in variable-length encoding.
            </summary>
            <param name="value">The specified <see cref="T:System.String"/>.</param>
            <returns>The size of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Neo.IO.Helper.ReadFixedBytes(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a byte array of the specified size from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> for reading data.</param>
            <param name="size">The size of the byte array.</param>
            <returns>The byte array read from the <see cref="T:System.IO.BinaryReader"/>.</returns>
        </member>
        <member name="M:Neo.IO.Helper.ReadNullableArray``1(Neo.IO.MemoryReader@,System.Int32)">
            <summary>
            Reads an <see cref="T:Neo.IO.ISerializable"/> array from a <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
            <param name="max">The maximum number of elements in the array.</param>
            <returns>The array read from the <see cref="T:Neo.IO.MemoryReader"/>.</returns>
        </member>
        <member name="M:Neo.IO.Helper.ReadSerializable``1(Neo.IO.MemoryReader@)">
            <summary>
            Reads an <see cref="T:Neo.IO.ISerializable"/> object from a <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Neo.IO.ISerializable"/> object.</typeparam>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
            <returns>The object read from the <see cref="T:Neo.IO.MemoryReader"/>.</returns>
        </member>
        <member name="M:Neo.IO.Helper.ReadSerializableArray``1(Neo.IO.MemoryReader@,System.Int32)">
            <summary>
            Reads an <see cref="T:Neo.IO.ISerializable"/> array from a <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
            <param name="max">The maximum number of elements in the array.</param>
            <returns>The array read from the <see cref="T:Neo.IO.MemoryReader"/>.</returns>
        </member>
        <member name="M:Neo.IO.Helper.ReadVarBytes(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a byte array from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> for reading data.</param>
            <param name="max">The maximum size of the byte array.</param>
            <returns>The byte array read from the <see cref="T:System.IO.BinaryReader"/>.</returns>
        </member>
        <member name="M:Neo.IO.Helper.ReadVarInt(System.IO.BinaryReader,System.UInt64)">
            <summary>
            Reads an integer from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> for reading data.</param>
            <param name="max">The maximum value of the integer.</param>
            <returns>The integer read from the <see cref="T:System.IO.BinaryReader"/>.</returns>
        </member>
        <member name="M:Neo.IO.Helper.ToArray(Neo.IO.ISerializable)">
            <summary>
            Converts an <see cref="T:Neo.IO.ISerializable"/> object to a byte array.
            </summary>
            <param name="value">The <see cref="T:Neo.IO.ISerializable"/> object to be converted.</param>
            <returns>The converted byte array.</returns>
        </member>
        <member name="M:Neo.IO.Helper.ToByteArray``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Converts an <see cref="T:Neo.IO.ISerializable"/> array to a byte array.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
            <param name="value">The <see cref="T:Neo.IO.ISerializable"/> array to be converted.</param>
            <returns>The converted byte array.</returns>
        </member>
        <member name="M:Neo.IO.Helper.Write(System.IO.BinaryWriter,Neo.IO.ISerializable)">
            <summary>
            Writes an <see cref="T:Neo.IO.ISerializable"/> object into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
            <param name="value">The <see cref="T:Neo.IO.ISerializable"/> object to be written.</param>
        </member>
        <member name="M:Neo.IO.Helper.Write``1(System.IO.BinaryWriter,System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Writes an <see cref="T:Neo.IO.ISerializable"/> array into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
            <param name="value">The <see cref="T:Neo.IO.ISerializable"/> array to be written.</param>
        </member>
        <member name="M:Neo.IO.Helper.WriteFixedString(System.IO.BinaryWriter,System.String,System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
            <param name="value">The <see cref="T:System.String"/> to be written.</param>
            <param name="length">The fixed size of the <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:Neo.IO.Helper.WriteNullableArray``1(System.IO.BinaryWriter,``0[])">
            <summary>
            Writes an <see cref="T:Neo.IO.ISerializable"/> array into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
            <param name="value">The <see cref="T:Neo.IO.ISerializable"/> array to be written.</param>
        </member>
        <member name="M:Neo.IO.Helper.WriteVarBytes(System.IO.BinaryWriter,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes a byte array into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
            <param name="value">The byte array to be written.</param>
        </member>
        <member name="M:Neo.IO.Helper.WriteVarInt(System.IO.BinaryWriter,System.Int64)">
            <summary>
            Writes an integer into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
            <param name="value">The integer to be written.</param>
        </member>
        <member name="M:Neo.IO.Helper.WriteVarString(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
            <param name="value">The <see cref="T:System.String"/> to be written.</param>
        </member>
        <member name="T:Neo.Ledger.Blockchain">
            <summary>
            Actor used to verify and relay <see cref="T:Neo.Network.P2P.Payloads.IInventory"/>.
            </summary>
        </member>
        <member name="T:Neo.Ledger.Blockchain.ApplicationExecuted">
            <summary>
            Sent by the <see cref="T:Neo.Ledger.Blockchain"/> when a smart contract is executed.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.ApplicationExecuted.Transaction">
            <summary>
            The transaction that contains the executed script. This field could be <see langword="null"/> if the contract is invoked by system.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.ApplicationExecuted.Trigger">
            <summary>
            The trigger of the execution.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.ApplicationExecuted.VMState">
            <summary>
            The state of the virtual machine after the contract is executed.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.ApplicationExecuted.Exception">
            <summary>
            The exception that caused the execution to terminate abnormally. This field could be <see langword="null"/> if the execution ends normally.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.ApplicationExecuted.GasConsumed">
            <summary>
            GAS spent to execute.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.ApplicationExecuted.Stack">
            <summary>
            Items on the stack of the virtual machine after execution.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.ApplicationExecuted.Notifications">
            <summary>
            The notifications sent during the execution.
            </summary>
        </member>
        <member name="T:Neo.Ledger.Blockchain.PersistCompleted">
            <summary>
            Sent by the <see cref="T:Neo.Ledger.Blockchain"/> when a <see cref="T:Neo.Network.P2P.Payloads.Block"/> is persisted.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.PersistCompleted.Block">
            <summary>
            The <see cref="T:Neo.Network.P2P.Payloads.Block"/> that is persisted.
            </summary>
        </member>
        <member name="T:Neo.Ledger.Blockchain.Import">
            <summary>
            Sent to the <see cref="T:Neo.Ledger.Blockchain"/> when importing blocks.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.Import.Blocks">
            <summary>
            The blocks to be imported.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.Import.Verify">
            <summary>
            Indicates whether the blocks need to be verified when importing.
            </summary>
        </member>
        <member name="T:Neo.Ledger.Blockchain.ImportCompleted">
            <summary>
            Sent by the <see cref="T:Neo.Ledger.Blockchain"/> when the import is complete.
            </summary>
        </member>
        <member name="T:Neo.Ledger.Blockchain.FillMemoryPool">
            <summary>
            Sent to the <see cref="T:Neo.Ledger.Blockchain"/> when the consensus is filling the memory pool.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.FillMemoryPool.Transactions">
            <summary>
            The transactions to be sent.
            </summary>
        </member>
        <member name="T:Neo.Ledger.Blockchain.FillCompleted">
            <summary>
            Sent by the <see cref="T:Neo.Ledger.Blockchain"/> when the memory pool is filled.
            </summary>
        </member>
        <member name="T:Neo.Ledger.Blockchain.Reverify">
            <summary>
            Sent to the <see cref="T:Neo.Ledger.Blockchain"/> when inventories need to be re-verified.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.Reverify.Inventories">
            <summary>
            The inventories to be re-verified.
            </summary>
        </member>
        <member name="T:Neo.Ledger.Blockchain.RelayResult">
            <summary>
            Sent by the <see cref="T:Neo.Ledger.Blockchain"/> when an <see cref="T:Neo.Network.P2P.Payloads.IInventory"/> is relayed.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.RelayResult.Inventory">
            <summary>
            The <see cref="T:Neo.Network.P2P.Payloads.IInventory"/> that is relayed.
            </summary>
        </member>
        <member name="P:Neo.Ledger.Blockchain.RelayResult.Result">
            <summary>
            The result.
            </summary>
        </member>
        <member name="M:Neo.Ledger.Blockchain.#ctor(Neo.NeoSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Ledger.Blockchain"/> class.
            </summary>
            <param name="system">The <see cref="T:Neo.NeoSystem"/> object that contains the <see cref="T:Neo.Ledger.Blockchain"/>.</param>
        </member>
        <member name="M:Neo.Ledger.Blockchain.Props(Neo.NeoSystem)">
            <summary>
            Gets a <see cref="T:Akka.Actor.Props"/> object used for creating the <see cref="T:Neo.Ledger.Blockchain"/> actor.
            </summary>
            <param name="system">The <see cref="T:Neo.NeoSystem"/> object that contains the <see cref="T:Neo.Ledger.Blockchain"/>.</param>
            <returns>The <see cref="T:Akka.Actor.Props"/> object used for creating the <see cref="T:Neo.Ledger.Blockchain"/> actor.</returns>
        </member>
        <member name="T:Neo.Ledger.HeaderCache">
            <summary>
            Used to cache the headers of the blocks that have not been received.
            </summary>
        </member>
        <member name="P:Neo.Ledger.HeaderCache.Item(System.UInt32)">
            <summary>
            Gets the <see cref="T:Neo.Network.P2P.Payloads.Header"/> at the specified index in the cache.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Neo.Network.P2P.Payloads.Header"/> to get.</param>
            <returns>The <see cref="T:Neo.Network.P2P.Payloads.Header"/> at the specified index in the cache.</returns>
        </member>
        <member name="P:Neo.Ledger.HeaderCache.Count">
            <summary>
            Gets the number of elements in the cache.
            </summary>
        </member>
        <member name="P:Neo.Ledger.HeaderCache.Full">
            <summary>
            Indicates whether the cache is full.
            </summary>
        </member>
        <member name="P:Neo.Ledger.HeaderCache.Last">
            <summary>
            Gets the last <see cref="T:Neo.Network.P2P.Payloads.Header"/> in the cache. Or <see langword="null"/> if the cache is empty.
            </summary>
        </member>
        <member name="T:Neo.Ledger.MemoryPool">
            <summary>
            Used to cache verified transactions before being written into the block.
            </summary>
        </member>
        <member name="F:Neo.Ledger.MemoryPool._txRwLock">
             <summary>
             Guarantees consistency of the pool data structures.
            
             Note: The data structures are only modified from the `Blockchain` actor; so operations guaranteed to be
                   performed by the blockchain actor do not need to acquire the read lock; they only need the write
                   lock for write operations.
             </summary>
        </member>
        <member name="F:Neo.Ledger.MemoryPool._unsortedTransactions">
            <summary>
            Store all verified unsorted transactions currently in the pool.
            </summary>
        </member>
        <member name="F:Neo.Ledger.MemoryPool._conflicts">
            <summary>
            Store transaction hashes that conflict with verified mempooled transactions.
            </summary>
        </member>
        <member name="F:Neo.Ledger.MemoryPool._sortedTransactions">
            <summary>
            Stores the verified sorted transactions currently in the pool.
            </summary>
        </member>
        <member name="F:Neo.Ledger.MemoryPool._unverifiedTransactions">
             <summary>
             Store the unverified transactions currently in the pool.
            
             Transactions in this data structure were valid in some prior block, but may no longer be valid.
             The top ones that could make it into the next block get verified and moved into the verified data structures
             (_unsortedTransactions, and _sortedTransactions) after each block.
             </summary>
        </member>
        <member name="P:Neo.Ledger.MemoryPool.Capacity">
            <summary>
            Total maximum capacity of transactions the pool can hold.
            </summary>
        </member>
        <member name="F:Neo.Ledger.MemoryPool.VerificationContext">
            <summary>
            Store all verified unsorted transactions' senders' fee currently in the memory pool.
            </summary>
        </member>
        <member name="P:Neo.Ledger.MemoryPool.Count">
            <summary>
            Total count of transactions in the pool.
            </summary>
        </member>
        <member name="P:Neo.Ledger.MemoryPool.VerifiedCount">
            <summary>
            Total count of verified transactions in the pool.
            </summary>
        </member>
        <member name="P:Neo.Ledger.MemoryPool.UnVerifiedCount">
            <summary>
            Total count of unverified transactions in the pool.
            </summary>
        </member>
        <member name="M:Neo.Ledger.MemoryPool.#ctor(Neo.NeoSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Ledger.MemoryPool"/> class.
            </summary>
            <param name="system">The <see cref="T:Neo.NeoSystem"/> object that contains the <see cref="T:Neo.Ledger.MemoryPool"/>.</param>
        </member>
        <member name="M:Neo.Ledger.MemoryPool.ContainsKey(Neo.UInt256)">
            <summary>
            Determine whether the pool is holding this transaction and has at some point verified it.
            </summary>
            <param name="hash">The transaction hash.</param>
            <returns><see langword="true"/> if the <see cref="T:Neo.Ledger.MemoryPool"/> contains the transaction; otherwise, <see langword="false"/>.</returns>
            <remarks>
            Note: The pool may not have verified it since the last block was persisted. To get only the
                  transactions that have been verified during this block use <see cref="M:Neo.Ledger.MemoryPool.GetVerifiedTransactions"/>.
            </remarks>
        </member>
        <member name="M:Neo.Ledger.MemoryPool.TryGetValue(Neo.UInt256,Neo.Network.P2P.Payloads.Transaction@)">
            <summary>
            Gets the <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> associated with the specified hash.
            </summary>
            <param name="hash">The hash of the <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> to get.</param>
            <param name="tx">When this method returns, contains the <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> associated with the specified hash, if the hash is found; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Neo.Ledger.MemoryPool"/> contains a <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> with the specified hash; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Ledger.MemoryPool.GetVerifiedTransactions">
            <summary>
            Gets the verified transactions in the <see cref="T:Neo.Ledger.MemoryPool"/>.
            </summary>
            <returns>The verified transactions.</returns>
        </member>
        <member name="M:Neo.Ledger.MemoryPool.GetVerifiedAndUnverifiedTransactions(System.Collections.Generic.IEnumerable{Neo.Network.P2P.Payloads.Transaction}@,System.Collections.Generic.IEnumerable{Neo.Network.P2P.Payloads.Transaction}@)">
            <summary>
            Gets both the verified and the unverified transactions in the <see cref="T:Neo.Ledger.MemoryPool"/>.
            </summary>
            <param name="verifiedTransactions">The verified transactions.</param>
            <param name="unverifiedTransactions">The unverified transactions.</param>
        </member>
        <member name="M:Neo.Ledger.MemoryPool.GetSortedVerifiedTransactions">
            <summary>
            Gets the sorted verified transactions in the <see cref="T:Neo.Ledger.MemoryPool"/>.
            </summary>
            <returns>The sorted verified transactions.</returns>
        </member>
        <member name="M:Neo.Ledger.MemoryPool.CheckConflicts(Neo.Network.P2P.Payloads.Transaction,System.Collections.Generic.List{Neo.Ledger.PoolItem}@)">
            <summary>
            Checks whether there is no mismatch in Conflicts attributes between the current transaction
            and mempooled unsorted transactions. If true, then these unsorted transactions will be added
            into conflictsList.
            </summary>
            <param name="tx">The <see cref="T:Neo.Network.P2P.Payloads.Transaction"/>current transaction needs to be checked.</param>
            <param name="conflictsList">The list of conflicting verified transactions that should be removed from the pool if tx fits the pool.</param>
            <returns>True if transaction fits the pool, otherwise false.</returns>
        </member>
        <member name="M:Neo.Ledger.MemoryPool.ReVerifyTopUnverifiedTransactionsIfNeeded(System.Int32,Neo.Persistence.DataCache)">
             <summary>
             Reverify up to a given maximum count of transactions. Verifies less at a time once the max that can be
             persisted per block has been reached.
            
             Note: this must only be called from a single thread (the Blockchain actor)
             </summary>
             <param name="maxToVerify">Max transactions to reverify, the value passed can be >=1</param>
             <param name="snapshot">The snapshot to use for verifying.</param>
             <returns>true if more unsorted messages exist, otherwise false</returns>
        </member>
        <member name="T:Neo.Ledger.PoolItem">
             <summary>
             Represents an item in the Memory Pool.
            
              Note: PoolItem objects don't consider transaction priority (low or high) in their compare CompareTo method.
                   This is because items of differing priority are never added to the same sorted set in MemoryPool.
             </summary>
        </member>
        <member name="F:Neo.Ledger.PoolItem.Tx">
            <summary>
            Internal transaction for PoolItem
            </summary>
        </member>
        <member name="F:Neo.Ledger.PoolItem.Timestamp">
            <summary>
            Timestamp when transaction was stored on PoolItem
            </summary>
        </member>
        <member name="F:Neo.Ledger.PoolItem.LastBroadcastTimestamp">
            <summary>
            Timestamp when this transaction was last broadcast to other nodes
            </summary>
        </member>
        <member name="T:Neo.Ledger.TransactionRemovalReason">
            <summary>
            The reason a transaction was removed.
            </summary>
        </member>
        <member name="F:Neo.Ledger.TransactionRemovalReason.CapacityExceeded">
            <summary>
            The transaction was rejected since it was the lowest priority transaction and the memory pool capacity was exceeded.
            </summary>
        </member>
        <member name="F:Neo.Ledger.TransactionRemovalReason.NoLongerValid">
            <summary>
            The transaction was rejected due to failing re-validation after a block was persisted.
            </summary>
        </member>
        <member name="F:Neo.Ledger.TransactionRemovalReason.Conflict">
            <summary>
            The transaction was rejected due to conflict with higher priority transactions with Conflicts attribute.
            </summary>
        </member>
        <member name="T:Neo.Ledger.TransactionRemovedEventArgs">
            <summary>
            Represents the event data of <see cref="E:Neo.Ledger.MemoryPool.TransactionRemoved"/>.
            </summary>
        </member>
        <member name="P:Neo.Ledger.TransactionRemovedEventArgs.Transactions">
            <summary>
            The <see cref="T:Neo.Network.P2P.Payloads.Transaction"/>s that is being removed.
            </summary>
        </member>
        <member name="P:Neo.Ledger.TransactionRemovedEventArgs.Reason">
            <summary>
            The reason a transaction was removed.
            </summary>
        </member>
        <member name="T:Neo.Ledger.TransactionVerificationContext">
            <summary>
            The context used to verify the transaction.
            </summary>
        </member>
        <member name="F:Neo.Ledger.TransactionVerificationContext.senderFee">
            <summary>
            Store all verified unsorted transactions' senders' fee currently in the memory pool.
            </summary>
        </member>
        <member name="F:Neo.Ledger.TransactionVerificationContext.oracleResponses">
            <summary>
            Store oracle responses
            </summary>
        </member>
        <member name="M:Neo.Ledger.TransactionVerificationContext.AddTransaction(Neo.Network.P2P.Payloads.Transaction)">
            <summary>
            Adds a verified <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> to the context.
            </summary>
            <param name="tx">The verified <see cref="T:Neo.Network.P2P.Payloads.Transaction"/>.</param>
        </member>
        <member name="M:Neo.Ledger.TransactionVerificationContext.CheckTransaction(Neo.Network.P2P.Payloads.Transaction,System.Collections.Generic.IEnumerable{Neo.Network.P2P.Payloads.Transaction},Neo.Persistence.DataCache)">
            <summary>
            Determine whether the specified <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> conflicts with other transactions.
            </summary>
            <param name="tx">The specified <see cref="T:Neo.Network.P2P.Payloads.Transaction"/>.</param>
            <param name="conflictingTxs">The list of <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> that conflicts with the specified one and are to be removed from the pool.</param>
            <param name="snapshot">The snapshot used to verify the <see cref="T:Neo.Network.P2P.Payloads.Transaction"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> passes the check; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Ledger.TransactionVerificationContext.RemoveTransaction(Neo.Network.P2P.Payloads.Transaction)">
            <summary>
            Removes a <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> from the context.
            </summary>
            <param name="tx">The <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> to be removed.</param>
        </member>
        <member name="T:Neo.Ledger.VerifyResult">
            <summary>
            Represents a verifying result of <see cref="T:Neo.Network.P2P.Payloads.IInventory"/>.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.Succeed">
            <summary>
            Indicates that the verification was successful.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.AlreadyExists">
            <summary>
            Indicates that an <see cref="T:Neo.Network.P2P.Payloads.IInventory"/> with the same hash already exists.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.AlreadyInPool">
            <summary>
            Indicates that an <see cref="T:Neo.Network.P2P.Payloads.IInventory"/> with the same hash already exists in the memory pool.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.OutOfMemory">
            <summary>
            Indicates that the <see cref="T:Neo.Ledger.MemoryPool"/> is full and the transaction cannot be verified.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.UnableToVerify">
            <summary>
            Indicates that the previous block of the current block has not been received, so the block cannot be verified.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.Invalid">
            <summary>
            Indicates that the <see cref="T:Neo.Network.P2P.Payloads.IInventory"/> is invalid.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.InvalidScript">
            <summary>
            Indicates that the <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> has an invalid script.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.InvalidAttribute">
            <summary>
            Indicates that the <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> has an invalid attribute.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.InvalidSignature">
            <summary>
            Indicates that the <see cref="T:Neo.Network.P2P.Payloads.IInventory"/> has an invalid signature.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.OverSize">
            <summary>
            Indicates that the size of the <see cref="T:Neo.Network.P2P.Payloads.IInventory"/> is not allowed.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.Expired">
            <summary>
            Indicates that the <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> has expired.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.InsufficientFunds">
            <summary>
            Indicates that the <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> failed to verify due to insufficient fees.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.PolicyFail">
            <summary>
            Indicates that the <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> failed to verify because it didn't comply with the policy.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.HasConflicts">
            <summary>
            Indicates that the <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> failed to verify because it conflicts with on-chain or mempooled transactions.
            </summary>
        </member>
        <member name="F:Neo.Ledger.VerifyResult.Unknown">
            <summary>
            Indicates that the <see cref="T:Neo.Network.P2P.Payloads.IInventory"/> failed to verify due to other reasons.
            </summary>
        </member>
        <member name="T:Neo.NeoSystem">
            <summary>
            Represents the basic unit that contains all the components required for running of a NEO node.
            </summary>
        </member>
        <member name="E:Neo.NeoSystem.ServiceAdded">
            <summary>
            Triggered when a service is added to the <see cref="T:Neo.NeoSystem"/>.
            </summary>
        </member>
        <member name="P:Neo.NeoSystem.Settings">
            <summary>
            The protocol settings of the <see cref="T:Neo.NeoSystem"/>.
            </summary>
        </member>
        <member name="P:Neo.NeoSystem.ActorSystem">
            <summary>
            The <see cref="T:Akka.Actor.ActorSystem"/> used to create actors for the <see cref="T:Neo.NeoSystem"/>.
            </summary>
        </member>
        <member name="P:Neo.NeoSystem.GenesisBlock">
            <summary>
            The genesis block of the NEO blockchain.
            </summary>
        </member>
        <member name="P:Neo.NeoSystem.Blockchain">
            <summary>
            The <see cref="T:Neo.Ledger.Blockchain"/> actor of the <see cref="T:Neo.NeoSystem"/>.
            </summary>
        </member>
        <member name="P:Neo.NeoSystem.LocalNode">
            <summary>
            The <see cref="T:Neo.Network.P2P.LocalNode"/> actor of the <see cref="T:Neo.NeoSystem"/>.
            </summary>
        </member>
        <member name="P:Neo.NeoSystem.TaskManager">
            <summary>
            The <see cref="T:Neo.Network.P2P.TaskManager"/> actor of the <see cref="T:Neo.NeoSystem"/>.
            </summary>
        </member>
        <member name="F:Neo.NeoSystem.TxRouter">
            <summary>
            The transaction router actor of the <see cref="T:Neo.NeoSystem"/>.
            </summary>
        </member>
        <member name="P:Neo.NeoSystem.StoreView">
            <summary>
            A readonly view of the store.
            </summary>
            <remarks>
            It doesn't need to be disposed because the <see cref="T:Neo.Persistence.ISnapshot"/> inside it is null.
            </remarks>
        </member>
        <member name="P:Neo.NeoSystem.MemPool">
            <summary>
            The memory pool of the <see cref="T:Neo.NeoSystem"/>.
            </summary>
        </member>
        <member name="P:Neo.NeoSystem.HeaderCache">
            <summary>
            The header cache of the <see cref="T:Neo.NeoSystem"/>.
            </summary>
        </member>
        <member name="M:Neo.NeoSystem.#ctor(Neo.ProtocolSettings,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.NeoSystem"/> class.
            </summary>
            <param name="settings">The protocol settings of the <see cref="T:Neo.NeoSystem"/>.</param>
            <param name="storageProvider">The storage engine used to create the <see cref="T:Neo.Persistence.IStoreProvider"/> objects. If this parameter is <see langword="null"/>, a default in-memory storage engine will be used.</param>
            <param name="storagePath">The path of the storage. If <paramref name="storageProvider"/> is the default in-memory storage engine, this parameter is ignored.</param>
        </member>
        <member name="M:Neo.NeoSystem.#ctor(Neo.ProtocolSettings,Neo.Persistence.IStoreProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.NeoSystem"/> class.
            </summary>
            <param name="settings">The protocol settings of the <see cref="T:Neo.NeoSystem"/>.</param>
            <param name="storageProvider">The <see cref="T:Neo.Persistence.IStoreProvider"/> to use.</param>
            <param name="storagePath">The path of the storage. If <paramref name="storageProvider"/> is the default in-memory storage engine, this parameter is ignored.</param>
        </member>
        <member name="M:Neo.NeoSystem.CreateGenesisBlock(Neo.ProtocolSettings)">
            <summary>
            Creates the genesis block for the NEO blockchain.
            </summary>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> of the NEO system.</param>
            <returns>The genesis block.</returns>
        </member>
        <member name="M:Neo.NeoSystem.AddService(System.Object)">
            <summary>
            Adds a service to the <see cref="T:Neo.NeoSystem"/>.
            </summary>
            <param name="service">The service object to be added.</param>
        </member>
        <member name="M:Neo.NeoSystem.GetService``1(System.Func{``0,System.Boolean})">
            <summary>
            Gets a specified type of service object from the <see cref="T:Neo.NeoSystem"/>.
            </summary>
            <typeparam name="T">The type of the service object.</typeparam>
            <param name="filter">An action used to filter the service objects. This parameter can be <see langword="null"/>.</param>
            <returns>The service object found.</returns>
        </member>
        <member name="M:Neo.NeoSystem.EnsureStopped(Akka.Actor.IActorRef)">
            <summary>
            Blocks the current thread until the specified actor has stopped.
            </summary>
            <param name="actor">The actor to wait.</param>
        </member>
        <member name="M:Neo.NeoSystem.LoadStore(System.String)">
            <summary>
            Loads an <see cref="T:Neo.Persistence.IStore"/> at the specified path.
            </summary>
            <param name="path">The path of the storage.</param>
            <returns>The loaded <see cref="T:Neo.Persistence.IStore"/>.</returns>
        </member>
        <member name="M:Neo.NeoSystem.ResumeNodeStartup">
            <summary>
            Resumes the startup process of <see cref="P:Neo.NeoSystem.LocalNode"/>.
            </summary>
            <returns><see langword="true"/> if the startup process is resumed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.NeoSystem.StartNode(Neo.Network.P2P.ChannelsConfig)">
            <summary>
            Starts the <see cref="P:Neo.NeoSystem.LocalNode"/> with the specified configuration.
            </summary>
            <param name="config">The configuration used to start the <see cref="P:Neo.NeoSystem.LocalNode"/>.</param>
        </member>
        <member name="M:Neo.NeoSystem.SuspendNodeStartup">
            <summary>
            Suspends the startup process of <see cref="P:Neo.NeoSystem.LocalNode"/>.
            </summary>
        </member>
        <member name="M:Neo.NeoSystem.GetSnapshot">
            <summary>
            Gets a snapshot of the blockchain storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neo.NeoSystem.ContainsTransaction(Neo.UInt256)">
            <summary>
            Determines whether the specified transaction exists in the memory pool or storage.
            </summary>
            <param name="hash">The hash of the transaction</param>
            <returns><see langword="true"/> if the transaction exists; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.NeoSystem.ContainsConflictHash(Neo.UInt256,System.Collections.Generic.IEnumerable{Neo.UInt160})">
            <summary>
            Determines whether the specified transaction conflicts with some on-chain transaction.
            </summary>
            <param name="hash">The hash of the transaction</param>
            <param name="signers">The list of signer accounts of the transaction</param>
            <returns><see langword="true"/> if the transaction conflicts with on-chain transaction; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Capabilities.FullNodeCapability">
            <summary>
            Indicates that a node has complete block data.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Capabilities.FullNodeCapability.StartHeight">
            <summary>
            Indicates the current block height of the node.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Capabilities.FullNodeCapability.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Network.P2P.Capabilities.FullNodeCapability"/> class.
            </summary>
            <param name="startHeight">The current block height of the node.</param>
        </member>
        <member name="T:Neo.Network.P2P.Capabilities.NodeCapability">
            <summary>
            Represents the capabilities of a NEO node.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Capabilities.NodeCapability.Type">
            <summary>
            Indicates the type of the <see cref="T:Neo.Network.P2P.Capabilities.NodeCapability"/>.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Capabilities.NodeCapability.#ctor(Neo.Network.P2P.Capabilities.NodeCapabilityType)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Network.P2P.Capabilities.NodeCapability"/> class.
            </summary>
            <param name="type">The type of the <see cref="T:Neo.Network.P2P.Capabilities.NodeCapability"/>.</param>
        </member>
        <member name="M:Neo.Network.P2P.Capabilities.NodeCapability.DeserializeFrom(Neo.IO.MemoryReader@)">
            <summary>
            Deserializes an <see cref="T:Neo.Network.P2P.Capabilities.NodeCapability"/> object from a <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
            <returns>The deserialized <see cref="T:Neo.Network.P2P.Capabilities.NodeCapability"/>.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Capabilities.NodeCapability.DeserializeWithoutType(Neo.IO.MemoryReader@)">
            <summary>
            Deserializes the <see cref="T:Neo.Network.P2P.Capabilities.NodeCapability"/> object from a <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
        </member>
        <member name="M:Neo.Network.P2P.Capabilities.NodeCapability.SerializeWithoutType(System.IO.BinaryWriter)">
            <summary>
            Serializes the <see cref="T:Neo.Network.P2P.Capabilities.NodeCapability"/> object to a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
        </member>
        <member name="T:Neo.Network.P2P.Capabilities.NodeCapabilityType">
            <summary>
            Represents the type of <see cref="T:Neo.Network.P2P.Capabilities.NodeCapability"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Capabilities.NodeCapabilityType.TcpServer">
            <summary>
            Indicates that the node is listening on a Tcp port.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Capabilities.NodeCapabilityType.WsServer">
            <summary>
            Indicates that the node is listening on a WebSocket port.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Capabilities.NodeCapabilityType.FullNode">
            <summary>
            Indicates that the node has complete block data.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Capabilities.ServerCapability">
            <summary>
            Indicates that the node is a server.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Capabilities.ServerCapability.Port">
            <summary>
            Indicates the port that the node is listening on.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Capabilities.ServerCapability.#ctor(Neo.Network.P2P.Capabilities.NodeCapabilityType,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Network.P2P.Capabilities.ServerCapability"/> class.
            </summary>
            <param name="type">The type of the <see cref="T:Neo.Network.P2P.Capabilities.ServerCapability"/>. It must be <see cref="F:Neo.Network.P2P.Capabilities.NodeCapabilityType.TcpServer"/> or <see cref="F:Neo.Network.P2P.Capabilities.NodeCapabilityType.WsServer"/></param>
            <param name="port">The port that the node is listening on.</param>
        </member>
        <member name="T:Neo.Network.P2P.ChannelsConfig">
            <summary>
            Represents the settings to start <see cref="T:Neo.Network.P2P.LocalNode"/>.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.ChannelsConfig.Tcp">
            <summary>
            Tcp configuration.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.ChannelsConfig.MinDesiredConnections">
            <summary>
            Minimum desired connections.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.ChannelsConfig.MaxConnections">
            <summary>
            Max allowed connections.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.ChannelsConfig.MaxConnectionsPerAddress">
            <summary>
            Max allowed connections per address.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Connection">
            <summary>
            Represents a connection of the P2P network.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Connection.connectionTimeoutLimitStart">
            <summary>
            connection initial timeout (in seconds) before any package has been accepted.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Connection.connectionTimeoutLimit">
            <summary>
            connection timeout (in seconds) after every `OnReceived(ByteString data)` event.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Connection.Remote">
            <summary>
            The address of the remote node.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Connection.Local">
            <summary>
            The address of the local node.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Connection.#ctor(System.Object,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Network.P2P.Connection"/> class.
            </summary>
            <param name="connection">The underlying connection object.</param>
            <param name="remote">The address of the remote node.</param>
            <param name="local">The address of the local node.</param>
        </member>
        <member name="M:Neo.Network.P2P.Connection.Disconnect(System.Boolean)">
            <summary>
            Disconnect from the remote node.
            </summary>
            <param name="abort">Indicates whether the TCP ABORT command should be sent.</param>
        </member>
        <member name="M:Neo.Network.P2P.Connection.OnAck">
            <summary>
            Called when a TCP ACK message is received.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Connection.OnData(Akka.IO.ByteString)">
            <summary>
            Called when data is received.
            </summary>
            <param name="data">The received data.</param>
        </member>
        <member name="M:Neo.Network.P2P.Connection.SendData(Akka.IO.ByteString)">
            <summary>
            Sends data to the remote node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Neo.Network.P2P.Helper">
            <summary>
            A helper class for <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/>.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Helper.CalculateHash(Neo.Network.P2P.Payloads.IVerifiable)">
            <summary>
            Calculates the hash of a <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/>.
            </summary>
            <param name="verifiable">The <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> object to hash.</param>
            <returns>The hash of the object.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Helper.GetSignData(Neo.Network.P2P.Payloads.IVerifiable,System.UInt32)">
            <summary>
            Gets the data of a <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> object to be hashed.
            </summary>
            <param name="verifiable">The <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> object to hash.</param>
            <param name="network">The magic number of the network.</param>
            <returns>The data to hash.</returns>
        </member>
        <member name="T:Neo.Network.P2P.LocalNode">
            <summary>
            Actor used to manage the connections of the local node.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.LocalNode.RelayDirectly">
            <summary>
            Sent to <see cref="T:Neo.Network.P2P.LocalNode"/> to relay an <see cref="T:Neo.Network.P2P.Payloads.IInventory"/>.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.LocalNode.SendDirectly">
            <summary>
            Sent to <see cref="T:Neo.Network.P2P.LocalNode"/> to send an <see cref="T:Neo.Network.P2P.Payloads.IInventory"/>.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.LocalNode.GetInstance">
            <summary>
            Sent to <see cref="T:Neo.Network.P2P.LocalNode"/> to request for an instance of <see cref="T:Neo.Network.P2P.LocalNode"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.LocalNode.ProtocolVersion">
            <summary>
            Indicates the protocol version of the local node.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.LocalNode.ConnectedCount">
            <summary>
            Indicates the number of connected nodes.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.LocalNode.UnconnectedCount">
            <summary>
            Indicates the number of unconnected nodes. When the number of connections is not enough, it will automatically connect to these nodes.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.LocalNode.Nonce">
            <summary>
            The random number used to identify the local node.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.LocalNode.UserAgent">
            <summary>
            The identifier of the client software of the local node.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.LocalNode.#ctor(Neo.NeoSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Network.P2P.LocalNode"/> class.
            </summary>
            <param name="system">The <see cref="T:Neo.NeoSystem"/> object that contains the <see cref="T:Neo.Network.P2P.LocalNode"/>.</param>
        </member>
        <member name="M:Neo.Network.P2P.LocalNode.BroadcastMessage(Neo.Network.P2P.MessageCommand,Neo.IO.ISerializable)">
            <summary>
            Packs a MessageCommand to a full Message with an optional ISerializable payload.
            Forwards it to <see cref="M:Neo.Network.P2P.LocalNode.BroadcastMessage(Neo.Network.P2P.Message)"/>.
            </summary>
            <param name="command">The message command to be packed.</param>
            <param name="payload">Optional payload to be Serialized along the message.</param>
        </member>
        <member name="M:Neo.Network.P2P.LocalNode.BroadcastMessage(Neo.Network.P2P.Message)">
            <summary>
            Broadcast a message to all connected nodes.
            </summary>
            <param name="message">The message to be broadcast.</param>
        </member>
        <member name="M:Neo.Network.P2P.LocalNode.SendToRemoteNodes(System.Object)">
            <summary>
            Send message to all the RemoteNodes connected to other nodes, faster than ActorSelection.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.LocalNode.AllowNewConnection(Akka.Actor.IActorRef,Neo.Network.P2P.RemoteNode)">
            <summary>
            Checks the new connection.
            If it is equal to the nonce of local or any remote node, it'll return false,
            else we'll return true and update the Listener address of the connected remote node.
            </summary>
            <param name="actor">Remote node actor.</param>
            <param name="node">Remote node object.</param>
            <returns><see langword="true"/> if the new connection is allowed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Network.P2P.LocalNode.GetRemoteNodes">
            <summary>
            Gets the connected remote nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neo.Network.P2P.LocalNode.GetUnconnectedPeers">
            <summary>
            Gets the unconnected nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neo.Network.P2P.LocalNode.NeedMorePeers(System.Int32)">
            <summary>
            Performs a broadcast with the command <see cref="F:Neo.Network.P2P.MessageCommand.GetAddr"/>,
            which, eventually, tells all known connections.
            If there are no connected peers it will try with the default,
            respecting <see cref="F:Neo.Network.P2P.LocalNode.MaxCountFromSeedList"/> limit.
            </summary>
            <param name="count">Number of peers that are being requested.</param>
        </member>
        <member name="M:Neo.Network.P2P.LocalNode.Props(Neo.NeoSystem)">
            <summary>
            Gets a <see cref="T:Akka.Actor.Props"/> object used for creating the <see cref="T:Neo.Network.P2P.LocalNode"/> actor.
            </summary>
            <param name="system">The <see cref="T:Neo.NeoSystem"/> object that contains the <see cref="T:Neo.Network.P2P.LocalNode"/>.</param>
            <returns>The <see cref="T:Akka.Actor.Props"/> object used for creating the <see cref="T:Neo.Network.P2P.LocalNode"/> actor.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Message">
            <summary>
            Represents a message on the NEO network.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Message.PayloadMaxSize">
            <summary>
            Indicates the maximum size of <see cref="F:Neo.Network.P2P.Message.Payload"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Message.Flags">
            <summary>
            The flags of the message.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Message.Command">
            <summary>
            The command of the message.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Message.Payload">
            <summary>
            The payload of the message.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Message.Create(Neo.Network.P2P.MessageCommand,Neo.IO.ISerializable)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Message"/> class.
            </summary>
            <param name="command">The command of the message.</param>
            <param name="payload">The payload of the message. For the messages that don't require a payload, it should be <see langword="null"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Neo.Network.P2P.MessageCommand">
            <summary>
            Represents the command of a message.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Version">
            <summary>
            Sent when a connection is established.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Verack">
            <summary>
            Sent to respond to <see cref="F:Neo.Network.P2P.MessageCommand.Version"/> messages.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.GetAddr">
            <summary>
            Sent to request for remote nodes.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Addr">
            <summary>
            Sent to respond to <see cref="F:Neo.Network.P2P.MessageCommand.GetAddr"/> messages.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Ping">
            <summary>
            Sent to detect whether the connection has been disconnected.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Pong">
            <summary>
            Sent to respond to <see cref="F:Neo.Network.P2P.MessageCommand.Ping"/> messages.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.GetHeaders">
            <summary>
            Sent to request for headers.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Headers">
            <summary>
            Sent to respond to <see cref="F:Neo.Network.P2P.MessageCommand.GetHeaders"/> messages.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.GetBlocks">
            <summary>
            Sent to request for blocks.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Mempool">
            <summary>
            Sent to request for memory pool.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Inv">
            <summary>
            Sent to relay inventories.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.GetData">
            <summary>
            Sent to request for inventories.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.GetBlockByIndex">
            <summary>
            Sent to request for blocks.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.NotFound">
            <summary>
            Sent to respond to <see cref="F:Neo.Network.P2P.MessageCommand.GetData"/> messages when the inventories are not found.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Transaction">
            <summary>
            Sent to send a transaction.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Block">
            <summary>
            Sent to send a block.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Extensible">
            <summary>
            Sent to send an <see cref="T:Neo.Network.P2P.Payloads.ExtensiblePayload"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Reject">
            <summary>
            Sent to reject an inventory.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.FilterLoad">
            <summary>
            Sent to load the <see cref="T:Neo.Cryptography.BloomFilter"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.FilterAdd">
            <summary>
            Sent to update the items for the <see cref="T:Neo.Cryptography.BloomFilter"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.FilterClear">
            <summary>
            Sent to clear the <see cref="T:Neo.Cryptography.BloomFilter"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.MerkleBlock">
            <summary>
            Sent to send a filtered block.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageCommand.Alert">
            <summary>
            Sent to send an alert.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.MessageFlags">
            <summary>
            Represents the flags of a message.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageFlags.None">
            <summary>
            No flag is set for the message.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.MessageFlags.Compressed">
            <summary>
            Indicates that the message is compressed.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.AddrPayload">
            <summary>
            This message is sent to respond to <see cref="F:Neo.Network.P2P.MessageCommand.GetAddr"/> messages.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.AddrPayload.MaxCountToSend">
            <summary>
            Indicates the maximum number of nodes sent each time.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.AddrPayload.AddressList">
            <summary>
            The list of nodes.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.AddrPayload.Create(Neo.Network.P2P.Payloads.NetworkAddressWithTime[])">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Payloads.AddrPayload"/> class.
            </summary>
            <param name="addresses">The list of nodes.</param>
            <returns>The created payload.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.Block">
            <summary>
            Represents a block.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Block.Header">
            <summary>
            The header of the block.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Block.Transactions">
            <summary>
            The transaction list of the block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Block.Version">
            <summary>
            The version of the block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Block.PrevHash">
            <summary>
            The hash of the previous block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Block.MerkleRoot">
            <summary>
            The merkle root of the transactions.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Block.Timestamp">
            <summary>
            The timestamp of the block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Block.Nonce">
            <summary>
            The random number of the block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Block.Index">
            <summary>
            The index of the block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Block.PrimaryIndex">
            <summary>
            The primary index of the consensus node that generated this block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Block.NextConsensus">
            <summary>
            The multi-signature address of the consensus nodes that generates the next block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Block.Witness">
            <summary>
            The witness of the block.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Block.ToJson(Neo.ProtocolSettings)">
            <summary>
            Converts the block to a JSON object.
            </summary>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used during the conversion.</param>
            <returns>The block represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.Conditions.AndCondition">
            <summary>
            Represents the condition that all conditions must be met.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.AndCondition.Expressions">
            <summary>
            The expressions of the condition.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.BooleanCondition.Expression">
            <summary>
            The expression of the <see cref="T:Neo.Network.P2P.Payloads.Conditions.BooleanCondition"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.CalledByContractCondition.Hash">
            <summary>
            The script hash to be checked.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.CalledByGroupCondition.Group">
            <summary>
            The group to be checked.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.GroupCondition.Group">
            <summary>
            The group to be checked.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.Conditions.NotCondition">
            <summary>
            Reverse another condition.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.NotCondition.Expression">
            <summary>
            The expression of the condition to be reversed.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.Conditions.OrCondition">
            <summary>
            Represents the condition that any of the conditions meets.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.OrCondition.Expressions">
            <summary>
            The expressions of the condition.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.ScriptHashCondition.Hash">
            <summary>
            The script hash to be checked.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Conditions.WitnessCondition.Type">
            <summary>
            The type of the <see cref="T:Neo.Network.P2P.Payloads.Conditions.WitnessCondition"/>.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Conditions.WitnessCondition.DeserializeConditions(Neo.IO.MemoryReader@,System.Int32)">
            <summary>
            Deserializes an <see cref="T:Neo.Network.P2P.Payloads.Conditions.WitnessCondition"/> array from a <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
            <param name="maxNestDepth">The maximum nesting depth allowed during deserialization.</param>
            <returns>The deserialized <see cref="T:Neo.Network.P2P.Payloads.Conditions.WitnessCondition"/> array.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Conditions.WitnessCondition.DeserializeFrom(Neo.IO.MemoryReader@,System.Int32)">
            <summary>
            Deserializes an <see cref="T:Neo.Network.P2P.Payloads.Conditions.WitnessCondition"/> object from a <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
            <param name="maxNestDepth">The maximum nesting depth allowed during deserialization.</param>
            <returns>The deserialized <see cref="T:Neo.Network.P2P.Payloads.Conditions.WitnessCondition"/>.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Conditions.WitnessCondition.DeserializeWithoutType(Neo.IO.MemoryReader@,System.Int32)">
            <summary>
            Deserializes the <see cref="T:Neo.Network.P2P.Payloads.Conditions.WitnessCondition"/> object from a <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
            <param name="maxNestDepth">The maximum nesting depth allowed during deserialization.</param>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Conditions.WitnessCondition.Match(Neo.SmartContract.ApplicationEngine)">
            <summary>
            Checks whether the current context matches the condition.
            </summary>
            <param name="engine">The <see cref="T:Neo.SmartContract.ApplicationEngine"/> that is executing CheckWitness.</param>
            <returns><see langword="true"/> if the condition matches; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Conditions.WitnessCondition.SerializeWithoutType(System.IO.BinaryWriter)">
            <summary>
            Serializes the <see cref="T:Neo.Network.P2P.Payloads.Conditions.WitnessCondition"/> object to a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Conditions.WitnessCondition.FromJson(Neo.Json.JObject,System.Int32)">
            <summary>
            Converts the <see cref="T:Neo.Network.P2P.Payloads.Conditions.WitnessCondition"/> from a JSON object.
            </summary>
            <param name="json">The <see cref="T:Neo.Network.P2P.Payloads.Conditions.WitnessCondition"/> represented by a JSON object.</param>
            <param name="maxNestDepth">The maximum nesting depth allowed during deserialization.</param>
            <returns>The converted <see cref="T:Neo.Network.P2P.Payloads.Conditions.WitnessCondition"/>.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Conditions.WitnessCondition.ToJson">
            <summary>
            Converts the condition to a JSON object.
            </summary>
            <returns>The condition represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.Conditions.WitnessConditionType">
            <summary>
            Represents the type of <see cref="T:Neo.Network.P2P.Payloads.Conditions.WitnessCondition"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.WitnessConditionType.Boolean">
            <summary>
            Indicates that the condition will always be met or not met.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.WitnessConditionType.Not">
            <summary>
            Reverse another condition.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.WitnessConditionType.And">
            <summary>
            Indicates that all conditions must be met.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.WitnessConditionType.Or">
            <summary>
            Indicates that any of the conditions meets.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.WitnessConditionType.ScriptHash">
            <summary>
            Indicates that the condition is met when the current context has the specified script hash.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.WitnessConditionType.Group">
            <summary>
            Indicates that the condition is met when the current context has the specified group.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.WitnessConditionType.CalledByEntry">
            <summary>
            Indicates that the condition is met when the current context is the entry point or is called by the entry point.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.WitnessConditionType.CalledByContract">
            <summary>
            Indicates that the condition is met when the current context is called by the specified contract.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conditions.WitnessConditionType.CalledByGroup">
            <summary>
            Indicates that the condition is met when the current context is called by the specified group.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Conflicts.Hash">
            <summary>
            Indicates the conflict transaction hash.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.ExtensiblePayload">
            <summary>
            Represents an extensible message that can be relayed.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.ExtensiblePayload.Category">
            <summary>
            The category of the extension.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.ExtensiblePayload.ValidBlockStart">
            <summary>
            Indicates that the payload is only valid when the block height is greater than or equal to this value.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.ExtensiblePayload.ValidBlockEnd">
            <summary>
            Indicates that the payload is only valid when the block height is less than this value.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.ExtensiblePayload.Sender">
            <summary>
            The sender of the payload.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.ExtensiblePayload.Data">
            <summary>
            The data of the payload.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.ExtensiblePayload.Witness">
            <summary>
            The witness of the payload. It must match the <see cref="F:Neo.Network.P2P.Payloads.ExtensiblePayload.Sender"/>.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.FilterAddPayload">
            <summary>
            This message is sent to update the items for the <see cref="T:Neo.Cryptography.BloomFilter"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.FilterAddPayload.Data">
            <summary>
            The items to be added.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.FilterLoadPayload">
            <summary>
            This message is sent to load the <see cref="T:Neo.Cryptography.BloomFilter"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.FilterLoadPayload.Filter">
            <summary>
            The data of the <see cref="T:Neo.Cryptography.BloomFilter"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.FilterLoadPayload.K">
            <summary>
            The number of hash functions used by the <see cref="T:Neo.Cryptography.BloomFilter"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.FilterLoadPayload.Tweak">
            <summary>
            Used to generate the seeds of the murmur hash functions.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.FilterLoadPayload.Create(Neo.Cryptography.BloomFilter)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Payloads.FilterLoadPayload"/> class.
            </summary>
            <param name="filter">The fields in the filter will be copied to the payload.</param>
            <returns>The created payload.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.GetBlockByIndexPayload">
            <summary>
            This message is sent to request for blocks by index.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.GetBlockByIndexPayload.IndexStart">
            <summary>
            The starting index of the blocks to request.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.GetBlockByIndexPayload.Count">
            <summary>
            The number of blocks to request.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.GetBlockByIndexPayload.Create(System.UInt32,System.Int16)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Payloads.GetBlockByIndexPayload"/> class.
            </summary>
            <param name="index_start">The starting index of the blocks to request.</param>
            <param name="count">The number of blocks to request. Set this parameter to -1 to request as many blocks as possible.</param>
            <returns>The created payload.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.GetBlocksPayload">
            <summary>
            This message is sent to request for blocks by hash.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.GetBlocksPayload.HashStart">
            <summary>
            The starting hash of the blocks to request.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.GetBlocksPayload.Count">
            <summary>
            The number of blocks to request.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.GetBlocksPayload.Create(Neo.UInt256,System.Int16)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Payloads.GetBlocksPayload"/> class.
            </summary>
            <param name="hash_start">The starting hash of the blocks to request.</param>
            <param name="count">The number of blocks to request. Set this parameter to -1 to request as many blocks as possible.</param>
            <returns>The created payload.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.Header">
            <summary>
            Represents the header of a block.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Header.Witness">
            <summary>
            The witness of the block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Header.Version">
            <summary>
            The version of the block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Header.PrevHash">
            <summary>
            The hash of the previous block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Header.MerkleRoot">
            <summary>
            The merkle root of the transactions.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Header.Timestamp">
            <summary>
            The timestamp of the block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Header.Nonce">
            <summary>
            The first eight bytes of random number generated.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Header.Index">
            <summary>
            The index of the block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Header.PrimaryIndex">
            <summary>
            The primary index of the consensus node that generated this block.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Header.NextConsensus">
            <summary>
            The multi-signature address of the consensus nodes that generates the next block.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Header.ToJson(Neo.ProtocolSettings)">
            <summary>
            Converts the header to a JSON object.
            </summary>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used during the conversion.</param>
            <returns>The header represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.HeadersPayload">
            <summary>
            This message is sent to respond to <see cref="F:Neo.Network.P2P.MessageCommand.GetHeaders"/> messages.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.HeadersPayload.MaxHeadersCount">
            <summary>
            Indicates the maximum number of headers sent each time.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.HeadersPayload.Headers">
            <summary>
            The list of headers.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.HeadersPayload.Create(Neo.Network.P2P.Payloads.Header[])">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Payloads.HeadersPayload"/> class.
            </summary>
            <param name="headers">The list of headers.</param>
            <returns>The created payload.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.HighPriorityAttribute">
            <summary>
            Indicates that the transaction is of high priority.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.IInventory">
            <summary>
            Represents a message that can be relayed on the NEO network.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.IInventory.InventoryType">
            <summary>
            The type of the inventory.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.InventoryType">
            <summary>
            Represents the type of an inventory.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.InventoryType.TX">
            <summary>
            Indicates that the inventory is a <see cref="T:Neo.Network.P2P.Payloads.Transaction"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.InventoryType.Block">
            <summary>
            Indicates that the inventory is a <see cref="F:Neo.Network.P2P.Payloads.InventoryType.Block"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.InventoryType.Extensible">
            <summary>
            Indicates that the inventory is an <see cref="T:Neo.Network.P2P.Payloads.ExtensiblePayload"/>.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.InvPayload">
            <summary>
            This message is sent to relay inventories.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.InvPayload.MaxHashesCount">
            <summary>
            Indicates the maximum number of inventories sent each time.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.InvPayload.Type">
            <summary>
            The type of the inventories.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.InvPayload.Hashes">
            <summary>
            The hashes of the inventories.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.InvPayload.Create(Neo.Network.P2P.Payloads.InventoryType,Neo.UInt256[])">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Payloads.InvPayload"/> class.
            </summary>
            <param name="type">The type of the inventories.</param>
            <param name="hashes">The hashes of the inventories.</param>
            <returns>The created payload.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.InvPayload.CreateGroup(Neo.Network.P2P.Payloads.InventoryType,Neo.UInt256[])">
            <summary>
            Creates a group of the <see cref="T:Neo.Network.P2P.Payloads.InvPayload"/> instance.
            </summary>
            <param name="type">The type of the inventories.</param>
            <param name="hashes">The hashes of the inventories.</param>
            <returns>The created payloads.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.IVerifiable">
            <summary>
            Represents an object that can be verified in the NEO network.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.IVerifiable.Hash">
            <summary>
            The hash of the <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> object.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.IVerifiable.Witnesses">
            <summary>
            The witnesses of the <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> object.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.IVerifiable.DeserializeUnsigned(Neo.IO.MemoryReader@)">
            <summary>
            Deserializes the part of the <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> object other than <see cref="P:Neo.Network.P2P.Payloads.IVerifiable.Witnesses"/>.
            </summary>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.IVerifiable.GetScriptHashesForVerifying(Neo.Persistence.DataCache)">
            <summary>
            Gets the script hashes that should be verified for this <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> object.
            </summary>
            <param name="snapshot">The snapshot to be used.</param>
            <returns>The script hashes that should be verified.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.IVerifiable.SerializeUnsigned(System.IO.BinaryWriter)">
            <summary>
            Serializes the part of the <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> object other than <see cref="P:Neo.Network.P2P.Payloads.IVerifiable.Witnesses"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.MerkleBlockPayload">
            <summary>
            Represents a block that is filtered by a <see cref="T:Neo.Cryptography.BloomFilter"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.MerkleBlockPayload.Header">
            <summary>
            The header of the block.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.MerkleBlockPayload.TxCount">
            <summary>
            The number of the transactions in the block.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.MerkleBlockPayload.Hashes">
            <summary>
            The nodes of the transactions hash tree.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.MerkleBlockPayload.Flags">
            <summary>
            The data in the <see cref="T:Neo.Cryptography.BloomFilter"/> that filtered the block.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.MerkleBlockPayload.Create(Neo.Network.P2P.Payloads.Block,System.Collections.BitArray)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Payloads.MerkleBlockPayload"/> class.
            </summary>
            <param name="block">The original block.</param>
            <param name="flags">The data in the <see cref="T:Neo.Cryptography.BloomFilter"/> that filtered the block.</param>
            <returns>The created payload.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.NetworkAddressWithTime">
            <summary>
            Sent with an <see cref="T:Neo.Network.P2P.Payloads.AddrPayload"/> to respond to <see cref="F:Neo.Network.P2P.MessageCommand.GetAddr"/> messages.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.NetworkAddressWithTime.Timestamp">
            <summary>
            The time when connected to the node.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.NetworkAddressWithTime.Address">
            <summary>
            The address of the node.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.NetworkAddressWithTime.Capabilities">
            <summary>
            The capabilities of the node.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.NetworkAddressWithTime.EndPoint">
            <summary>
            The <see cref="T:System.Net.IPEndPoint"/> of the Tcp server.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.NetworkAddressWithTime.Create(System.Net.IPAddress,System.UInt32,Neo.Network.P2P.Capabilities.NodeCapability[])">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Payloads.NetworkAddressWithTime"/> class.
            </summary>
            <param name="address">The address of the node.</param>
            <param name="timestamp">The time when connected to the node.</param>
            <param name="capabilities">The capabilities of the node.</param>
            <returns>The created payload.</returns>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.NotValidBefore.Height">
            <summary>
            Indicates that the transaction is not valid before this height.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.OracleResponse">
            <summary>
            Indicates that the transaction is an oracle response.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponse.MaxResultSize">
            <summary>
            Indicates the maximum size of the <see cref="F:Neo.Network.P2P.Payloads.OracleResponse.Result"/> field.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponse.FixedScript">
            <summary>
            Represents the fixed value of the <see cref="P:Neo.Network.P2P.Payloads.Transaction.Script"/> field of the oracle responding transaction.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponse.Id">
            <summary>
            The ID of the oracle request.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponse.Code">
            <summary>
            The response code for the oracle request.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponse.Result">
            <summary>
            The result for the oracle request.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.OracleResponseCode">
            <summary>
            Represents the response code for the oracle request.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponseCode.Success">
            <summary>
            Indicates that the request has been successfully completed.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponseCode.ProtocolNotSupported">
            <summary>
            Indicates that the protocol of the request is not supported.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponseCode.ConsensusUnreachable">
            <summary>
            Indicates that the oracle nodes cannot reach a consensus on the result of the request.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponseCode.NotFound">
            <summary>
            Indicates that the requested Uri does not exist.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponseCode.Timeout">
            <summary>
            Indicates that the request was not completed within the specified time.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponseCode.Forbidden">
            <summary>
            Indicates that there is no permission to request the resource.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponseCode.ResponseTooLarge">
            <summary>
            Indicates that the data for the response is too large.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponseCode.InsufficientFunds">
            <summary>
            Indicates that the request failed due to insufficient balance.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponseCode.ContentTypeNotSupported">
            <summary>
            Indicates that the content-type of the request is not supported.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.OracleResponseCode.Error">
            <summary>
            Indicates that the request failed due to other errors.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.PingPayload">
            <summary>
            Sent to detect whether the connection has been disconnected.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.PingPayload.LastBlockIndex">
            <summary>
            The latest block index.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.PingPayload.Timestamp">
            <summary>
            The timestamp when the message was sent.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.PingPayload.Nonce">
            <summary>
            A random number. This number must be the same in
            <see cref="F:Neo.Network.P2P.MessageCommand.Ping"/> and <see cref="F:Neo.Network.P2P.MessageCommand.Pong"/> messages.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.PingPayload.Create(System.UInt32)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Payloads.PingPayload"/> class.
            </summary>
            <param name="height">The latest block index.</param>
            <returns>The created payload.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.PingPayload.Create(System.UInt32,System.UInt32)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Payloads.PingPayload"/> class.
            </summary>
            <param name="height">The latest block index.</param>
            <param name="nonce">The random number.</param>
            <returns>The created payload.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.Signer">
            <summary>
            Represents a signer of a <see cref="T:Neo.Network.P2P.Payloads.Transaction"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Signer.Account">
            <summary>
            The account of the signer.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Signer.Scopes">
            <summary>
            The scopes of the witness.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Signer.AllowedContracts">
            <summary>
            The contracts that allowed by the witness.
            Only available when the <see cref="F:Neo.Network.P2P.Payloads.WitnessScope.CustomContracts"/> flag is set.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Signer.AllowedGroups">
            <summary>
            The groups that allowed by the witness.
            Only available when the <see cref="F:Neo.Network.P2P.Payloads.WitnessScope.CustomGroups"/> flag is set.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Signer.Rules">
            <summary>
            The rules that the witness must meet.
            Only available when the <see cref="F:Neo.Network.P2P.Payloads.WitnessScope.WitnessRules"/> flag is set.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Signer.GetAllRules">
            <summary>
            Converts all rules contained in the <see cref="T:Neo.Network.P2P.Payloads.Signer"/> object to <see cref="T:Neo.Network.P2P.Payloads.WitnessRule"/>.
            </summary>
            <returns>The <see cref="T:Neo.Network.P2P.Payloads.WitnessRule"/> array used to represent the current signer.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Signer.FromJson(Neo.Json.JObject)">
            <summary>
            Converts the signer from a JSON object.
            </summary>
            <param name="json">The signer represented by a JSON object.</param>
            <returns>The converted signer.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Signer.ToJson">
            <summary>
            Converts the signer to a JSON object.
            </summary>
            <returns>The signer represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.Transaction">
            <summary>
            Represents a transaction.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Transaction.MaxTransactionSize">
            <summary>
            The maximum size of a transaction.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Transaction.MaxTransactionAttributes">
            <summary>
            The maximum number of attributes that can be contained within a transaction.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Transaction.HeaderSize">
            <summary>
            The size of a transaction header.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Transaction.Attributes">
            <summary>
            The attributes of the transaction.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Transaction.FeePerByte">
            <summary>
            The <see cref="P:Neo.Network.P2P.Payloads.Transaction.NetworkFee"/> for the transaction divided by its <see cref="P:Neo.Network.P2P.Payloads.Transaction.Size"/>.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Transaction.NetworkFee">
            <summary>
            The network fee of the transaction.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Transaction.Nonce">
            <summary>
            The nonce of the transaction.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Transaction.Script">
            <summary>
            The script of the transaction.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Transaction.Sender">
            <summary>
            The sender is the first signer of the transaction, regardless of its <see cref="T:Neo.Network.P2P.Payloads.WitnessScope"/>.
            </summary>
            <remarks>Note: The sender will pay the fees of the transaction.</remarks>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Transaction.Signers">
            <summary>
            The signers of the transaction.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Transaction.SystemFee">
            <summary>
            The system fee of the transaction.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Transaction.ValidUntilBlock">
            <summary>
            Indicates that the transaction is only valid before this block height.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Transaction.Version">
            <summary>
            The version of the transaction.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Transaction.GetAttribute``1">
            <summary>
            Gets the attribute of the specified type.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
            <returns>The first attribute of this type. Or <see langword="null"/> if there is no attribute of this type.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Transaction.GetAttributes``1">
            <summary>
            Gets all attributes of the specified type.
            </summary>
            <typeparam name="T">The type of the attributes.</typeparam>
            <returns>All the attributes of this type.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Transaction.ToJson(Neo.ProtocolSettings)">
            <summary>
            Converts the transaction to a JSON object.
            </summary>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used during the conversion.</param>
            <returns>The transaction represented by a JSON object.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Transaction.Verify(Neo.ProtocolSettings,Neo.Persistence.DataCache,Neo.Ledger.TransactionVerificationContext,System.Collections.Generic.IEnumerable{Neo.Network.P2P.Payloads.Transaction})">
            <summary>
            Verifies the transaction.
            </summary>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used to verify the transaction.</param>
            <param name="snapshot">The snapshot used to verify the transaction.</param>
            <param name="context">The <see cref="T:Neo.Ledger.TransactionVerificationContext"/> used to verify the transaction.</param>
            <param name="conflictsList">The list of conflicting <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> those fee should be excluded from sender's overall fee during <see cref="T:Neo.Ledger.TransactionVerificationContext"/>-based verification in case of sender's match.</param>
            <returns>The result of the verification.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Transaction.VerifyStateDependent(Neo.ProtocolSettings,Neo.Persistence.DataCache,Neo.Ledger.TransactionVerificationContext,System.Collections.Generic.IEnumerable{Neo.Network.P2P.Payloads.Transaction})">
            <summary>
            Verifies the state-dependent part of the transaction.
            </summary>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used to verify the transaction.</param>
            <param name="snapshot">The snapshot used to verify the transaction.</param>
            <param name="context">The <see cref="T:Neo.Ledger.TransactionVerificationContext"/> used to verify the transaction.</param>
            <param name="conflictsList">The list of conflicting <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> those fee should be excluded from sender's overall fee during <see cref="T:Neo.Ledger.TransactionVerificationContext"/>-based verification in case of sender's match.</param>
            <returns>The result of the verification.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Transaction.VerifyStateIndependent(Neo.ProtocolSettings)">
            <summary>
            Verifies the state-independent part of the transaction.
            </summary>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used to verify the transaction.</param>
            <returns>The result of the verification.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.TransactionAttribute">
            <summary>
            Represents an attribute of a transaction.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.TransactionAttribute.Type">
            <summary>
            The type of the attribute.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.TransactionAttribute.AllowMultiple">
            <summary>
            Indicates whether multiple instances of this attribute are allowed.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.TransactionAttribute.DeserializeFrom(Neo.IO.MemoryReader@)">
            <summary>
            Deserializes an <see cref="T:Neo.Network.P2P.Payloads.TransactionAttribute"/> object from a <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
            <returns>The deserialized attribute.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.TransactionAttribute.DeserializeWithoutType(Neo.IO.MemoryReader@)">
            <summary>
            Deserializes the <see cref="T:Neo.Network.P2P.Payloads.TransactionAttribute"/> object from a <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.TransactionAttribute.ToJson">
            <summary>
            Converts the attribute to a JSON object.
            </summary>
            <returns>The attribute represented by a JSON object.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.TransactionAttribute.SerializeWithoutType(System.IO.BinaryWriter)">
            <summary>
            Serializes the <see cref="T:Neo.Network.P2P.Payloads.TransactionAttribute"/> object to a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.TransactionAttribute.Verify(Neo.Persistence.DataCache,Neo.Network.P2P.Payloads.Transaction)">
            <summary>
            Verifies the attribute with the transaction.
            </summary>
            <param name="snapshot">The snapshot used to verify the attribute.</param>
            <param name="tx">The <see cref="T:Neo.Network.P2P.Payloads.Transaction"/> that contains the attribute.</param>
            <returns><see langword="true"/> if the verification passes; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.TransactionAttributeType">
            <summary>
            Represents the type of a <see cref="T:Neo.Network.P2P.Payloads.TransactionAttribute"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.TransactionAttributeType.HighPriority">
            <summary>
            Indicates that the transaction is of high priority.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.TransactionAttributeType.OracleResponse">
            <summary>
            Indicates that the transaction is an oracle response.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.TransactionAttributeType.NotValidBefore">
            <summary>
            Indicates that the transaction is not valid before <see cref="F:Neo.Network.P2P.Payloads.NotValidBefore.Height"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.TransactionAttributeType.Conflicts">
            <summary>
            Indicates that the transaction conflicts with <see cref="F:Neo.Network.P2P.Payloads.Conflicts.Hash"/>.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.VersionPayload">
            <summary>
            Sent when a connection is established.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.VersionPayload.MaxCapabilities">
            <summary>
            Indicates the maximum number of capabilities contained in a <see cref="T:Neo.Network.P2P.Payloads.VersionPayload"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.VersionPayload.Network">
            <summary>
            The magic number of the network.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.VersionPayload.Version">
            <summary>
            The protocol version of the node.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.VersionPayload.Timestamp">
            <summary>
            The time when connected to the node.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.VersionPayload.Nonce">
            <summary>
            A random number used to identify the node.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.VersionPayload.UserAgent">
            <summary>
            A <see cref="T:System.String"/> used to identify the client software of the node.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.VersionPayload.Capabilities">
            <summary>
            The capabilities of the node.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.VersionPayload.Create(System.UInt32,System.UInt32,System.String,Neo.Network.P2P.Capabilities.NodeCapability[])">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Network.P2P.Payloads.VersionPayload"/> class.
            </summary>
            <param name="network">The magic number of the network.</param>
            <param name="nonce">The random number used to identify the node.</param>
            <param name="userAgent">The <see cref="T:System.String"/> used to identify the client software of the node.</param>
            <param name="capabilities">The capabilities of the node.</param>
            <returns></returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.Witness">
            <summary>
            Represents a witness of an <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> object.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Witness.InvocationScript">
            <summary>
            The invocation script of the witness. Used to pass arguments for <see cref="F:Neo.Network.P2P.Payloads.Witness.VerificationScript"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.Witness.VerificationScript">
            <summary>
            The verification script of the witness. It can be empty if the contract is deployed.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Payloads.Witness.ScriptHash">
            <summary>
            The hash of the <see cref="F:Neo.Network.P2P.Payloads.Witness.VerificationScript"/>.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.Witness.ToJson">
            <summary>
            Converts the witness to a JSON object.
            </summary>
            <returns>The witness represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.WitnessRule">
            <summary>
            The rule used to describe the scope of the witness.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.WitnessRule.Action">
            <summary>
            Indicates the action to be taken if the current context meets with the rule.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.WitnessRule.Condition">
            <summary>
            The condition of the rule.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.WitnessRule.FromJson(Neo.Json.JObject)">
            <summary>
            Converts the <see cref="T:Neo.Network.P2P.Payloads.WitnessRule"/> from a JSON object.
            </summary>
            <param name="json">The <see cref="T:Neo.Network.P2P.Payloads.WitnessRule"/> represented by a JSON object.</param>
            <returns>The converted <see cref="T:Neo.Network.P2P.Payloads.WitnessRule"/>.</returns>
        </member>
        <member name="M:Neo.Network.P2P.Payloads.WitnessRule.ToJson">
            <summary>
            Converts the rule to a JSON object.
            </summary>
            <returns>The rule represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.WitnessRuleAction">
            <summary>
            Indicates the action to be taken if the current context meets with the rule.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.WitnessRuleAction.Deny">
            <summary>
            Deny the witness according to the rule.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.WitnessRuleAction.Allow">
            <summary>
            Allow the witness according to the rule.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Payloads.WitnessScope">
            <summary>
            Represents the scope of a <see cref="T:Neo.Network.P2P.Payloads.Witness"/>.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.WitnessScope.None">
            <summary>
            Indicates that no contract was witnessed. Only sign the transaction.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.WitnessScope.CalledByEntry">
            <summary>
            Indicates that the calling contract must be the entry contract.
            The witness/permission/signature given on first invocation will automatically expire if entering deeper internal invokes.
            This can be the default safe choice for native NEO/GAS (previously used on Neo 2 as "attach" mode).
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.WitnessScope.CustomContracts">
            <summary>
            Custom hash for contract-specific.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.WitnessScope.CustomGroups">
            <summary>
            Custom pubkey for group members.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.WitnessScope.WitnessRules">
            <summary>
            Indicates that the current context must satisfy the specified rules.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Payloads.WitnessScope.Global">
            <summary>
            This allows the witness in all contexts (default Neo2 behavior).
            </summary>
            <remarks>Note: It cannot be combined with other flags.</remarks>
        </member>
        <member name="T:Neo.Network.P2P.Peer">
            <summary>
            Actor used to manage the connections of the local node.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Peer.Peers">
            <summary>
            Sent to <see cref="T:Neo.Network.P2P.Peer"/> to add more unconnected peers.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Peer.Peers.EndPoints">
            <summary>
            The unconnected peers to be added.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.Peer.Connect">
            <summary>
            Sent to <see cref="T:Neo.Network.P2P.Peer"/> to connect to a remote node.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Peer.Connect.EndPoint">
            <summary>
            The address of the remote node.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Peer.Connect.IsTrusted">
            <summary>
            Indicates whether the remote node is trusted. A trusted node will always be connected.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Peer.DefaultMinDesiredConnections">
            <summary>
            The default minimum number of desired connections.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Peer.DefaultMaxConnections">
            <summary>
            The default maximum number of desired connections.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Peer.ConnectedPeers">
            <summary>
            A dictionary that stores the connected nodes.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Peer.UnconnectedPeers">
            <summary>
            A set that stores the peers received from other nodes.
            If the number of desired connections is not enough, first try to connect with the peers from this set.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.Peer.ConnectingPeers">
            <summary>
            When a TCP connection request is sent to a peer, the peer will be added to the set.
            If a Tcp.Connected or a Tcp.CommandFailed (with TCP.Command of type Tcp.Connect) is received, the related peer will be removed.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Peer.TrustedIpAddresses">
            <summary>
            A hash set to store the trusted nodes. A trusted node will always be connected.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Peer.ListenerTcpPort">
            <summary>
            The port listened by the local Tcp server.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Peer.MaxConnectionsPerAddress">
            <summary>
            Indicates the maximum number of connections with the same address.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Peer.MinDesiredConnections">
            <summary>
            Indicates the minimum number of desired connections.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Peer.MaxConnections">
            <summary>
            Indicates the maximum number of connections.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Peer.UnconnectedMax">
            <summary>
            Indicates the maximum number of unconnected peers stored in <see cref="F:Neo.Network.P2P.Peer.UnconnectedPeers"/>.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.Peer.ConnectingMax">
            <summary>
            Indicates the maximum number of pending connections.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.Peer.AddPeers(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint})">
            <summary>
            Tries to add a set of peers to the immutable ImmutableHashSet of UnconnectedPeers.
            </summary>
            <param name="peers">Peers that the method will try to add (union) to (with) UnconnectedPeers.</param>
        </member>
        <member name="M:Neo.Network.P2P.Peer.ConnectToPeer(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Tries to connect the a remote peer.
            </summary>
            <param name="endPoint">The address of the remote peer.</param>
            <param name="isTrusted">Indicates whether the remote node is trusted. A trusted node will always be connected.</param>
        </member>
        <member name="M:Neo.Network.P2P.Peer.NeedMorePeers(System.Int32)">
            <summary>
            Called for asking for more peers.
            </summary>
            <param name="count">Number of peers that are being requested.</param>
        </member>
        <member name="M:Neo.Network.P2P.Peer.OnTcpConnected(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Will be triggered when a Tcp.Connected message is received.
            If the conditions are met, the remote endpoint will be added to ConnectedPeers.
            Increase the connection number with the remote endpoint by one.
            </summary>
            <param name="remote">The remote endpoint of TCP connection.</param>
            <param name="local">The local endpoint of TCP connection.</param>
        </member>
        <member name="M:Neo.Network.P2P.Peer.OnTcpConnected(Akka.Actor.IActorRef)">
            <summary>
            Called when a Tcp connection is established.
            </summary>
            <param name="connection">The connection actor.</param>
        </member>
        <member name="M:Neo.Network.P2P.Peer.OnTcpCommandFailed(Akka.IO.Tcp.Command)">
            <summary>
            Will be triggered when a Tcp.CommandFailed message is received.
            If it's a Tcp.Connect command, remove the related endpoint from ConnectingPeers.
            </summary>
            <param name="cmd">Tcp.Command message/event.</param>
        </member>
        <member name="M:Neo.Network.P2P.Peer.ProtocolProps(System.Object,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Gets a <see cref="T:Akka.Actor.Props"/> object used for creating the protocol actor.
            </summary>
            <param name="connection">The underlying connection object.</param>
            <param name="remote">The address of the remote node.</param>
            <param name="local">The address of the local node.</param>
            <returns>The <see cref="T:Akka.Actor.Props"/> object used for creating the protocol actor.</returns>
        </member>
        <member name="T:Neo.Network.P2P.RemoteNode">
            <summary>
            Represents a connection of the NEO network.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.RemoteNode.Listener">
            <summary>
            The address of the remote Tcp server.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.RemoteNode.ListenerTcpPort">
            <summary>
            The port listened by the remote Tcp server. If the remote node is not a server, this field is 0.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.RemoteNode.Version">
            <summary>
            The <see cref="T:Neo.Network.P2P.Payloads.VersionPayload"/> sent by the remote node.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.RemoteNode.LastBlockIndex">
            <summary>
            The index of the last block sent by the remote node.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.RemoteNode.IsFullNode">
            <summary>
            Indicates whether the remote node is a full node.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.RemoteNode.#ctor(Neo.NeoSystem,Neo.Network.P2P.LocalNode,System.Object,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Network.P2P.RemoteNode"/> class.
            </summary>
            <param name="system">The <see cref="T:Neo.NeoSystem"/> object that contains the <paramref name="localNode"/>.</param>
            <param name="localNode">The <see cref="T:Neo.Network.P2P.LocalNode"/> that manages the <see cref="T:Neo.Network.P2P.RemoteNode"/>.</param>
            <param name="connection">The underlying connection object.</param>
            <param name="remote">The address of the remote node.</param>
            <param name="local">The address of the local node.</param>
        </member>
        <member name="M:Neo.Network.P2P.RemoteNode.CheckMessageQueue">
            <summary>
            It defines the message queue to be used for dequeuing.
            If the high-priority message queue is not empty, choose the high-priority message queue.
            Otherwise, choose the low-priority message queue.
            Finally, it sends the first message of the queue.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.RemoteNode.EnqueueMessage(Neo.Network.P2P.Message)">
            <summary>
            Add message to high priority queue or low priority queue depending on the message type.
            </summary>
            <param name="message">The message to be added.</param>
        </member>
        <member name="M:Neo.Network.P2P.RemoteNode.OnGetAddrMessageReceived">
            <summary>
            Will be triggered when a MessageCommand.GetAddr message is received.
            Randomly select nodes from the local RemoteNodes and tells to RemoteNode actors a MessageCommand.Addr message.
            The message contains a list of networkAddresses from those selected random peers.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.RemoteNode.OnGetBlocksMessageReceived(Neo.Network.P2P.Payloads.GetBlocksPayload)">
            <summary>
            Will be triggered when a MessageCommand.GetBlocks message is received.
            Tell the specified number of blocks' hashes starting with the requested HashStart until payload.Count or MaxHashesCount
            Responses are sent to RemoteNode actor as MessageCommand.Inv Message.
            </summary>
            <param name="payload">A GetBlocksPayload including start block Hash and number of blocks requested.</param>
        </member>
        <member name="M:Neo.Network.P2P.RemoteNode.OnGetDataMessageReceived(Neo.Network.P2P.Payloads.InvPayload)">
            <summary>
            Will be triggered when a MessageCommand.GetData message is received.
            The payload includes an array of hash values.
            For different payload.Type (Tx, Block, Consensus),
            get the corresponding (Txs, Blocks, Consensus) and tell them to RemoteNode actor.
            </summary>
            <param name="payload">The payload containing the requested information.</param>
        </member>
        <member name="M:Neo.Network.P2P.RemoteNode.OnGetHeadersMessageReceived(Neo.Network.P2P.Payloads.GetBlockByIndexPayload)">
            <summary>
            Will be triggered when a MessageCommand.GetHeaders message is received.
            Tell the specified number of blocks' headers starting with the requested IndexStart to RemoteNode actor.
            A limit set by HeadersPayload.MaxHeadersCount is also applied to the number of requested Headers, namely payload.Count.
            </summary>
            <param name="payload">A GetBlockByIndexPayload including start block index and number of blocks' headers requested.</param>
        </member>
        <member name="T:Neo.Network.P2P.TaskManager">
            <summary>
            Actor used to manage the tasks of inventories.
            </summary>
        </member>
        <member name="T:Neo.Network.P2P.TaskManager.RestartTasks">
            <summary>
            Sent to <see cref="T:Neo.Network.P2P.TaskManager"/> to restart tasks for inventories.
            </summary>
        </member>
        <member name="P:Neo.Network.P2P.TaskManager.RestartTasks.Payload">
            <summary>
            The inventories that need to restart.
            </summary>
        </member>
        <member name="F:Neo.Network.P2P.TaskManager.knownHashes">
            <summary>
            A set of known hashes, of inventories or payloads, already received.
            </summary>
        </member>
        <member name="M:Neo.Network.P2P.TaskManager.#ctor(Neo.NeoSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Network.P2P.TaskManager"/> class.
            </summary>
            <param name="system">The <see cref="T:Neo.NeoSystem"/> object that contains the <see cref="T:Neo.Network.P2P.TaskManager"/>.</param>
        </member>
        <member name="M:Neo.Network.P2P.TaskManager.Props(Neo.NeoSystem)">
            <summary>
            Gets a <see cref="T:Akka.Actor.Props"/> object used for creating the <see cref="T:Neo.Network.P2P.TaskManager"/> actor.
            </summary>
            <param name="system">The <see cref="T:Neo.NeoSystem"/> object that contains the <see cref="T:Neo.Network.P2P.TaskManager"/>.</param>
            <returns>The <see cref="T:Akka.Actor.Props"/> object used for creating the <see cref="T:Neo.Network.P2P.TaskManager"/> actor.</returns>
        </member>
        <member name="T:Neo.Network.UPnP">
            <summary>
            Provides methods for interacting with UPnP devices.
            </summary>
        </member>
        <member name="P:Neo.Network.UPnP.TimeOut">
            <summary>
            Gets or sets the timeout for discovering the UPnP device.
            </summary>
        </member>
        <member name="M:Neo.Network.UPnP.Discover">
            <summary>
            Sends an Udp broadcast message to discover the UPnP device.
            </summary>
            <returns><see langword="true"/> if the UPnP device is successfully discovered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Network.UPnP.ForwardPort(System.Int32,System.Net.Sockets.ProtocolType,System.String)">
            <summary>
            Attempt to create a port forwarding.
            </summary>
            <param name="port">The port to forward.</param>
            <param name="protocol">The <see cref="T:System.Net.Sockets.ProtocolType"/> of the port.</param>
            <param name="description">The description of the forward.</param>
        </member>
        <member name="M:Neo.Network.UPnP.DeleteForwardingRule(System.Int32,System.Net.Sockets.ProtocolType)">
            <summary>
            Attempt to delete a port forwarding.
            </summary>
            <param name="port">The port to forward.</param>
            <param name="protocol">The <see cref="T:System.Net.Sockets.ProtocolType"/> of the port.</param>
        </member>
        <member name="M:Neo.Network.UPnP.GetExternalIP">
            <summary>
            Attempt to get the external IP address of the local host.
            </summary>
            <returns>The external IP address of the local host.</returns>
        </member>
        <member name="T:Neo.Persistence.DataCache">
            <summary>
            Represents a cache for the underlying storage of the NEO blockchain.
            </summary>
        </member>
        <member name="T:Neo.Persistence.DataCache.Trackable">
            <summary>
            Represents an entry in the cache.
            </summary>
        </member>
        <member name="F:Neo.Persistence.DataCache.Trackable.Key">
            <summary>
            The key of the entry.
            </summary>
        </member>
        <member name="F:Neo.Persistence.DataCache.Trackable.Item">
            <summary>
            The data of the entry.
            </summary>
        </member>
        <member name="F:Neo.Persistence.DataCache.Trackable.State">
            <summary>
            The state of the entry.
            </summary>
        </member>
        <member name="P:Neo.Persistence.DataCache.Item(Neo.SmartContract.StorageKey)">
            <summary>
            Reads a specified entry from the cache. If the entry is not in the cache, it will be automatically loaded from the underlying storage.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>The cached data.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the entry doesn't exist.</exception>
        </member>
        <member name="M:Neo.Persistence.DataCache.Add(Neo.SmartContract.StorageKey,Neo.SmartContract.StorageItem)">
            <summary>
            Adds a new entry to the cache.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The data of the entry.</param>
            <exception cref="T:System.ArgumentException">The entry has already been cached.</exception>
            <remarks>Note: This method does not read the internal storage to check whether the record already exists.</remarks>
        </member>
        <member name="M:Neo.Persistence.DataCache.AddInternal(Neo.SmartContract.StorageKey,Neo.SmartContract.StorageItem)">
            <summary>
            Adds a new entry to the underlying storage.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The data of the entry.</param>
        </member>
        <member name="M:Neo.Persistence.DataCache.Commit">
            <summary>
            Commits all changes in the cache to the underlying storage.
            </summary>
        </member>
        <member name="M:Neo.Persistence.DataCache.CreateSnapshot">
            <summary>
            Creates a snapshot, which uses this instance as the underlying storage.
            </summary>
            <returns>The snapshot of this instance.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.Delete(Neo.SmartContract.StorageKey)">
            <summary>
            Deletes an entry from the cache.
            </summary>
            <param name="key">The key of the entry.</param>
        </member>
        <member name="M:Neo.Persistence.DataCache.DeleteInternal(Neo.SmartContract.StorageKey)">
            <summary>
            Deletes an entry from the underlying storage.
            </summary>
            <param name="key">The key of the entry.</param>
        </member>
        <member name="M:Neo.Persistence.DataCache.Find(System.Byte[],Neo.Persistence.SeekDirection)">
            <summary>
            Finds the entries starting with the specified prefix.
            </summary>
            <param name="key_prefix">The prefix of the key.</param>
            <param name="direction">The search direction.</param>
            <returns>The entries found with the desired prefix.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.FindRange(System.Byte[],System.Byte[],Neo.Persistence.SeekDirection)">
            <summary>
            Finds the entries that between [start, end).
            </summary>
            <param name="start">The start key (inclusive).</param>
            <param name="end">The end key (exclusive).</param>
            <param name="direction">The search direction.</param>
            <returns>The entries found with the desired range.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.GetChangeSet">
            <summary>
            Gets the change set in the cache.
            </summary>
            <returns>The change set.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.Contains(Neo.SmartContract.StorageKey)">
            <summary>
            Determines whether the cache contains the specified entry.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns><see langword="true"/> if the cache contains an entry with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.ContainsInternal(Neo.SmartContract.StorageKey)">
            <summary>
            Determines whether the underlying storage contains the specified entry.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns><see langword="true"/> if the underlying storage contains an entry with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.GetInternal(Neo.SmartContract.StorageKey)">
            <summary>
            Reads a specified entry from the underlying storage.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>The data of the entry. Or <see langword="null"/> if the entry doesn't exist.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.GetAndChange(Neo.SmartContract.StorageKey,System.Func{Neo.SmartContract.StorageItem})">
            <summary>
            Reads a specified entry from the cache, and mark it as <see cref="F:Neo.Persistence.TrackState.Changed"/>. If the entry is not in the cache, it will be automatically loaded from the underlying storage.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="factory">A delegate used to create the entry if it doesn't exist. If the entry already exists, the factory will not be used.</param>
            <returns>The cached data. Or <see langword="null"/> if it doesn't exist and the <paramref name="factory"/> is not provided.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.GetOrAdd(Neo.SmartContract.StorageKey,System.Func{Neo.SmartContract.StorageItem})">
            <summary>
            Reads a specified entry from the cache. If the entry is not in the cache, it will be automatically loaded from the underlying storage. If the entry doesn't exist, the factory will be used to create a new one.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="factory">A delegate used to create the entry if it doesn't exist. If the entry already exists, the factory will not be used.</param>
            <returns>The cached data.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.Seek(System.Byte[],Neo.Persistence.SeekDirection)">
            <summary>
            Seeks to the entry with the specified key.
            </summary>
            <param name="keyOrPrefix">The key to be sought.</param>
            <param name="direction">The direction of seek.</param>
            <returns>An enumerator containing all the entries after seeking.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.SeekInternal(System.Byte[],Neo.Persistence.SeekDirection)">
            <summary>
            Seeks to the entry with the specified key in the underlying storage.
            </summary>
            <param name="keyOrPrefix">The key to be sought.</param>
            <param name="direction">The direction of seek.</param>
            <returns>An enumerator containing all the entries after seeking.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.TryGet(Neo.SmartContract.StorageKey)">
            <summary>
            Reads a specified entry from the cache. If the entry is not in the cache, it will be automatically loaded from the underlying storage.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>The cached data. Or <see langword="null"/> if it is neither in the cache nor in the underlying storage.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.TryGetInternal(Neo.SmartContract.StorageKey)">
            <summary>
            Reads a specified entry from the underlying storage.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>The data of the entry. Or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Neo.Persistence.DataCache.UpdateInternal(Neo.SmartContract.StorageKey,Neo.SmartContract.StorageItem)">
            <summary>
            Updates an entry in the underlying storage.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The data of the entry.</param>
        </member>
        <member name="T:Neo.Persistence.IReadOnlyStore">
            <summary>
            This interface provides methods to read from the database.
            </summary>
        </member>
        <member name="M:Neo.Persistence.IReadOnlyStore.Seek(System.Byte[],Neo.Persistence.SeekDirection)">
            <summary>
            Seeks to the entry with the specified key.
            </summary>
            <param name="key">The key to be sought.</param>
            <param name="direction">The direction of seek.</param>
            <returns>An enumerator containing all the entries after seeking.</returns>
        </member>
        <member name="M:Neo.Persistence.IReadOnlyStore.TryGet(System.Byte[])">
            <summary>
            Reads a specified entry from the database.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>The data of the entry. Or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Neo.Persistence.IReadOnlyStore.Contains(System.Byte[])">
            <summary>
            Determines whether the database contains the specified entry.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns><see langword="true"/> if the database contains an entry with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.Persistence.ISnapshot">
            <summary>
            This interface provides methods for reading, writing, and committing from/to snapshot.
            </summary>
        </member>
        <member name="M:Neo.Persistence.ISnapshot.Commit">
            <summary>
            Commits all changes in the snapshot to the database.
            </summary>
        </member>
        <member name="M:Neo.Persistence.ISnapshot.Delete(System.Byte[])">
            <summary>
            Deletes an entry from the snapshot.
            </summary>
            <param name="key">The key of the entry.</param>
        </member>
        <member name="M:Neo.Persistence.ISnapshot.Put(System.Byte[],System.Byte[])">
            <summary>
            Puts an entry to the snapshot.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The data of the entry.</param>
        </member>
        <member name="T:Neo.Persistence.IStore">
            <summary>
            This interface provides methods for reading, writing from/to database. Developers should implement this interface to provide new storage engines for NEO.
            </summary>
        </member>
        <member name="M:Neo.Persistence.IStore.Delete(System.Byte[])">
            <summary>
            Deletes an entry from the database.
            </summary>
            <param name="key">The key of the entry.</param>
        </member>
        <member name="M:Neo.Persistence.IStore.GetSnapshot">
            <summary>
            Creates a snapshot of the database.
            </summary>
            <returns>A snapshot of the database.</returns>
        </member>
        <member name="M:Neo.Persistence.IStore.Put(System.Byte[],System.Byte[])">
            <summary>
            Puts an entry to the database.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The data of the entry.</param>
        </member>
        <member name="M:Neo.Persistence.IStore.PutSync(System.Byte[],System.Byte[])">
            <summary>
            Puts an entry to the database synchronously.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The data of the entry.</param>
        </member>
        <member name="T:Neo.Persistence.IStoreProvider">
            <summary>
            A provider used to create <see cref="T:Neo.Persistence.IStore"/> instances.
            </summary>
        </member>
        <member name="P:Neo.Persistence.IStoreProvider.Name">
            <summary>
            Gets the name of the <see cref="T:Neo.Persistence.IStoreProvider"/>.
            </summary>
        </member>
        <member name="M:Neo.Persistence.IStoreProvider.GetStore(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.Persistence.IStore"/> interface.
            </summary>
            <param name="path">The path of the database.</param>
            <returns>The created <see cref="T:Neo.Persistence.IStore"/> instance.</returns>
        </member>
        <member name="T:Neo.Persistence.MemoryStore">
            <summary>
            An in-memory <see cref="T:Neo.Persistence.IStore"/> implementation that uses ConcurrentDictionary as the underlying storage.
            </summary>
        </member>
        <member name="T:Neo.Persistence.SeekDirection">
            <summary>
            Represents the direction when searching from the database.
            </summary>
        </member>
        <member name="F:Neo.Persistence.SeekDirection.Forward">
            <summary>
            Indicates that the search should be performed in ascending order.
            </summary>
        </member>
        <member name="F:Neo.Persistence.SeekDirection.Backward">
            <summary>
            Indicates that the search should be performed in descending order.
            </summary>
        </member>
        <member name="T:Neo.Persistence.SnapshotCache">
            <summary>
            Represents a cache for the snapshot or database of the NEO blockchain.
            </summary>
        </member>
        <member name="M:Neo.Persistence.SnapshotCache.#ctor(Neo.Persistence.IReadOnlyStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Persistence.SnapshotCache"/> class.
            </summary>
            <param name="store">An <see cref="T:Neo.Persistence.IReadOnlyStore"/> to create a readonly cache; or an <see cref="T:Neo.Persistence.ISnapshot"/> to create a snapshot cache.</param>
        </member>
        <member name="M:Neo.Persistence.StoreFactory.GetStoreProvider(System.String)">
            <summary>
            Get store provider by name
            </summary>
            <param name="name">Name</param>
            <returns>Store provider</returns>
        </member>
        <member name="M:Neo.Persistence.StoreFactory.GetStore(System.String,System.String)">
            <summary>
            Get store from name
            </summary>
            <param name="storageProvider">The storage engine used to create the <see cref="T:Neo.Persistence.IStore"/> objects. If this parameter is <see langword="null"/>, a default in-memory storage engine will be used.</param>
            <param name="path">The path of the storage. If <paramref name="storageProvider"/> is the default in-memory storage engine, this parameter is ignored.</param>
            <returns>The storage engine.</returns>
        </member>
        <member name="T:Neo.Persistence.TrackState">
            <summary>
            Represents the state of a cached entry.
            </summary>
        </member>
        <member name="F:Neo.Persistence.TrackState.None">
            <summary>
            Indicates that the entry has been loaded from the underlying storage, but has not been modified.
            </summary>
        </member>
        <member name="F:Neo.Persistence.TrackState.Added">
            <summary>
            Indicates that this is a newly added record.
            </summary>
        </member>
        <member name="F:Neo.Persistence.TrackState.Changed">
            <summary>
            Indicates that the entry has been loaded from the underlying storage, and has been modified.
            </summary>
        </member>
        <member name="F:Neo.Persistence.TrackState.Deleted">
            <summary>
            Indicates that the entry should be deleted from the underlying storage when committing.
            </summary>
        </member>
        <member name="F:Neo.Persistence.TrackState.NotFound">
            <summary>
            Indicates that the entry was not found in the underlying storage.
            </summary>
        </member>
        <member name="T:Neo.Plugins.Plugin">
            <summary>
            Represents the base class of all plugins. Any plugin should inherit this class.
            The plugins are automatically loaded when the process starts.
            </summary>
        </member>
        <member name="F:Neo.Plugins.Plugin.Plugins">
            <summary>
            A list of all loaded plugins.
            </summary>
        </member>
        <member name="F:Neo.Plugins.Plugin.PluginsDirectory">
            <summary>
            The directory containing the plugin folders. Files can be contained in any subdirectory.
            </summary>
        </member>
        <member name="P:Neo.Plugins.Plugin.RootPath">
            <summary>
            Indicates the root path of the plugin.
            </summary>
        </member>
        <member name="P:Neo.Plugins.Plugin.ConfigFile">
            <summary>
            Indicates the location of the plugin configuration file.
            </summary>
        </member>
        <member name="P:Neo.Plugins.Plugin.Name">
            <summary>
            Indicates the name of the plugin.
            </summary>
        </member>
        <member name="P:Neo.Plugins.Plugin.Description">
            <summary>
            Indicates the description of the plugin.
            </summary>
        </member>
        <member name="P:Neo.Plugins.Plugin.Path">
            <summary>
            Indicates the location of the plugin dll file.
            </summary>
        </member>
        <member name="P:Neo.Plugins.Plugin.Version">
            <summary>
            Indicates the version of the plugin.
            </summary>
        </member>
        <member name="M:Neo.Plugins.Plugin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Plugins.Plugin"/> class.
            </summary>
        </member>
        <member name="M:Neo.Plugins.Plugin.Configure">
            <summary>
            Called when the plugin is loaded and need to load the configure file,
            or the configuration file has been modified and needs to be reconfigured.
            </summary>
        </member>
        <member name="M:Neo.Plugins.Plugin.GetConfiguration">
            <summary>
            Loads the configuration file from the path of <see cref="P:Neo.Plugins.Plugin.ConfigFile"/>.
            </summary>
            <returns>The content of the configuration file read.</returns>
        </member>
        <member name="M:Neo.Plugins.Plugin.Log(System.Object,Neo.LogLevel)">
            <summary>
            Write a log for the plugin.
            </summary>
            <param name="message">The message of the log.</param>
            <param name="level">The level of the log.</param>
        </member>
        <member name="M:Neo.Plugins.Plugin.OnMessage(System.Object)">
            <summary>
            Called when a message to the plugins is received. The message is sent by calling <see cref="M:Neo.Plugins.Plugin.SendMessage(System.Object)"/>.
            </summary>
            <param name="message">The received message.</param>
            <returns><see langword="true"/> if the <paramref name="message"/> has been handled; otherwise, <see langword="false"/>.</returns>
            <remarks>If a message has been handled by a plugin, the other plugins won't receive it anymore.</remarks>
        </member>
        <member name="M:Neo.Plugins.Plugin.OnSystemLoaded(Neo.NeoSystem)">
            <summary>
            Called when a <see cref="T:Neo.NeoSystem"/> is loaded.
            </summary>
            <param name="system">The loaded <see cref="T:Neo.NeoSystem"/>.</param>
        </member>
        <member name="M:Neo.Plugins.Plugin.SendMessage(System.Object)">
            <summary>
            Sends a message to all plugins. It can be handled by <see cref="M:Neo.Plugins.Plugin.OnMessage(System.Object)"/>.
            </summary>
            <param name="message">The message to send.</param>
            <returns><see langword="true"/> if the <paramref name="message"/> is handled by a plugin; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.ProtocolSettings">
            <summary>
            Represents the protocol settings of the NEO system.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.Network">
            <summary>
            The magic number of the NEO network.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.AddressVersion">
            <summary>
            The address version of the NEO system.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.StandbyCommittee">
            <summary>
            The public keys of the standby committee members.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.CommitteeMembersCount">
            <summary>
            The number of members of the committee in NEO system.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.ValidatorsCount">
            <summary>
            The number of the validators in NEO system.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.SeedList">
            <summary>
            The default seed nodes list.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.MillisecondsPerBlock">
            <summary>
            Indicates the time in milliseconds between two blocks.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.TimePerBlock">
            <summary>
            Indicates the time between two blocks.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.MaxValidUntilBlockIncrement">
            <summary>
            The maximum increment of the <see cref="P:Neo.Network.P2P.Payloads.Transaction.ValidUntilBlock"/> field.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.MaxTransactionsPerBlock">
            <summary>
            Indicates the maximum number of transactions that can be contained in a block.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.MemoryPoolMaxTransactions">
            <summary>
            Indicates the maximum number of transactions that can be contained in the memory pool.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.MaxTraceableBlocks">
            <summary>
            Indicates the maximum number of blocks that can be traced in the smart contract.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.Hardforks">
            <summary>
            Sets the block height from which a hardfork is activated.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.InitialGasDistribution">
            <summary>
            Indicates the amount of gas to distribute during initialization.
            In the unit of datoshi, 1 GAS = 1e8 datoshi
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.StandbyValidators">
            <summary>
            The public keys of the standby validators.
            </summary>
        </member>
        <member name="P:Neo.ProtocolSettings.Default">
            <summary>
            The default protocol settings for NEO MainNet.
            </summary>
        </member>
        <member name="M:Neo.ProtocolSettings.Load(System.String,System.Boolean)">
            <summary>
            Loads the <see cref="T:Neo.ProtocolSettings"/> at the specified path.
            </summary>
            <param name="path">The path of the settings file.</param>
            <param name="optional">Indicates whether the file is optional.</param>
            <returns>The loaded <see cref="T:Neo.ProtocolSettings"/>.</returns>
        </member>
        <member name="M:Neo.ProtocolSettings.Load(Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Loads the <see cref="T:Neo.ProtocolSettings"/> with the specified <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection"/>.
            </summary>
            <param name="section">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection"/> to be loaded.</param>
            <returns>The loaded <see cref="T:Neo.ProtocolSettings"/>.</returns>
        </member>
        <member name="M:Neo.ProtocolSettings.EnsureOmmitedHardforks(System.Collections.Generic.Dictionary{Neo.Hardfork,System.UInt32})">
            <summary>
            Explicitly set the height of all old omitted hardforks to 0 for proper IsHardforkEnabled behaviour.
            </summary>
            <param name="hardForks">HardForks</param>
            <returns>Processed hardfork configuration</returns>
        </member>
        <member name="M:Neo.ProtocolSettings.IsHardforkEnabled(Neo.Hardfork,System.UInt32)">
            <summary>
            Check if the Hardfork is Enabled
            </summary>
            <param name="hardfork">Hardfork</param>
            <param name="index">Block index</param>
            <returns>True if enabled</returns>
        </member>
        <member name="T:Neo.SmartContract.ApplicationEngine">
            <summary>
            A virtual machine used to execute smart contracts in the NEO system.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Contract_Call">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Contract.Call.
            Use it to call another contract dynamically.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Contract_CallNative">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Contract.CallNative.
            </summary>
            <remarks>Note: It is for internal use only. Do not use it directly in smart contracts.</remarks>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Contract_GetCallFlags">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Contract.GetCallFlags.
            Gets the <see cref="T:Neo.SmartContract.CallFlags"/> of the current context.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Contract_CreateStandardAccount">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Contract.CreateStandardAccount.
            Calculates corresponding account scripthash for the given public key.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Contract_CreateMultisigAccount">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Contract.CreateMultisigAccount.
            Calculates corresponding multisig account scripthash for the given public keys.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Contract_NativeOnPersist">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Contract.NativeOnPersist.
            </summary>
            <remarks>Note: It is for internal use only. Do not use it directly in smart contracts.</remarks>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Contract_NativePostPersist">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Contract.NativePostPersist.
            </summary>
            <remarks>Note: It is for internal use only. Do not use it directly in smart contracts.</remarks>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.CallContract(Neo.UInt160,System.String,Neo.SmartContract.CallFlags,Neo.VM.Types.Array)">
            <summary>
            The implementation of System.Contract.Call.
            Use it to call another contract dynamically.
            </summary>
            <param name="contractHash">The hash of the contract to be called.</param>
            <param name="method">The method of the contract to be called.</param>
            <param name="callFlags">The <see cref="T:Neo.SmartContract.CallFlags"/> to be used to call the contract.</param>
            <param name="args">The arguments to be used.</param>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.CallNativeContract(System.Byte)">
            <summary>
            The implementation of System.Contract.CallNative.
            Calls to a native contract.
            </summary>
            <param name="version">The version of the native contract to be called.</param>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetCallFlags">
            <summary>
            The implementation of System.Contract.GetCallFlags.
            Gets the <see cref="T:Neo.SmartContract.CallFlags"/> of the current context.
            </summary>
            <returns>The <see cref="T:Neo.SmartContract.CallFlags"/> of the current context.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.CreateStandardAccount(Neo.Cryptography.ECC.ECPoint)">
            <summary>
            The implementation of System.Contract.CreateStandardAccount.
            Calculates corresponding account scripthash for the given public key.
            </summary>
            <param name="pubKey">The public key of the account.</param>
            <returns>The hash of the account.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.CreateMultisigAccount(System.Int32,Neo.Cryptography.ECC.ECPoint[])">
            <summary>
            The implementation of System.Contract.CreateMultisigAccount.
            Calculates corresponding multisig account scripthash for the given public keys.
            </summary>
            <param name="m">The minimum number of correct signatures that need to be provided in order for the verification to pass.</param>
            <param name="pubKeys">The public keys of the account.</param>
            <returns>The hash of the account.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.NativeOnPersistAsync">
            <summary>
            The implementation of System.Contract.NativeOnPersist.
            Calls to the <see cref="M:Neo.SmartContract.Native.NativeContract.OnPersistAsync(Neo.SmartContract.ApplicationEngine)"/> of all native contracts.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.NativePostPersistAsync">
            <summary>
            The implementation of System.Contract.NativePostPersist.
            Calls to the <see cref="M:Neo.SmartContract.Native.NativeContract.PostPersistAsync(Neo.SmartContract.ApplicationEngine)"/> of all native contracts.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.CheckSigPrice">
            <summary>
            The price of System.Crypto.CheckSig.
            In the unit of datoshi, 1 datoshi = 1e-8 GAS
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Crypto_CheckSig">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Crypto.CheckSig.
            Checks the signature for the current script container.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Crypto_CheckMultisig">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Crypto.CheckMultisig.
            Checks the signatures for the current script container.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.CheckSig(System.Byte[],System.Byte[])">
            <summary>
            The implementation of System.Crypto.CheckSig.
            Checks the signature for the current script container.
            </summary>
            <param name="pubkey">The public key of the account.</param>
            <param name="signature">The signature of the current script container.</param>
            <returns><see langword="true"/> if the signature is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.CheckMultisig(System.Byte[][],System.Byte[][])">
            <summary>
            The implementation of System.Crypto.CheckMultisig.
            Checks the signatures for the current script container.
            </summary>
            <param name="pubkeys">The public keys of the account.</param>
            <param name="signatures">The signatures of the current script container.</param>
            <returns><see langword="true"/> if the signatures are valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.TestModeGas">
            <summary>
            The maximum cost that can be spent when a contract is executed in test mode.
            In the unit of datoshi, 1 datoshi = 1e-8 GAS
            </summary>
        </member>
        <member name="E:Neo.SmartContract.ApplicationEngine.Notify">
            <summary>
            Triggered when a contract calls System.Runtime.Notify.
            </summary>
        </member>
        <member name="E:Neo.SmartContract.ApplicationEngine.Log">
            <summary>
            Triggered when a contract calls System.Runtime.Log.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.Provider">
            <summary>
            Gets or sets the provider used to create the <see cref="T:Neo.SmartContract.ApplicationEngine"/>.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.Services">
            <summary>
            Gets the descriptors of all interoperable services available in NEO.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.Diagnostic">
            <summary>
            The diagnostic used by the engine. This property can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.Trigger">
            <summary>
            The trigger of the execution.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.ScriptContainer">
            <summary>
            The container that containing the executed script. This field could be <see langword="null"/> if the contract is invoked by system.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.Snapshot">
            <summary>
            The snapshot used to read or write data.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.PersistingBlock">
            <summary>
            The block being persisted. This field could be <see langword="null"/> if the <see cref="P:Neo.SmartContract.ApplicationEngine.Trigger"/> is <see cref="F:Neo.SmartContract.TriggerType.Verification"/>.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.ProtocolSettings">
            <summary>
            The <see cref="T:Neo.ProtocolSettings"/> used by the engine.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.GasConsumed">
            <summary>
            GAS spent to execute.
            In the unit of datoshi, 1 datoshi = 1e-8 GAS, 1 GAS = 1e8 datoshi
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.FeeConsumed">
            <summary>
            GAS spent to execute.
            In the unit of datoshi, 1 datoshi = 1e-8 GAS, 1 GAS = 1e8 datoshi
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.GasLeft">
            <summary>
            The remaining GAS that can be spent in order to complete the execution.
            In the unit of datoshi, 1 datoshi = 1e-8 GAS, 1 GAS = 1e8 datoshi
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.FaultException">
            <summary>
            The exception that caused the execution to terminate abnormally. This field could be <see langword="null"/> if no exception is thrown.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.CurrentScriptHash">
            <summary>
            The script hash of the current context. This field could be <see langword="null"/> if no context is loaded to the engine.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.CallingScriptHash">
            <summary>
            The script hash of the calling contract. This field could be <see langword="null"/> if the current context is the entry context.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.EntryScriptHash">
            <summary>
            The script hash of the entry context. This field could be <see langword="null"/> if no context is loaded to the engine.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ApplicationEngine.Notifications">
            <summary>
            The notifications sent during the execution.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.#ctor(Neo.SmartContract.TriggerType,Neo.Network.P2P.Payloads.IVerifiable,Neo.Persistence.DataCache,Neo.Network.P2P.Payloads.Block,Neo.ProtocolSettings,System.Int64,Neo.SmartContract.IDiagnostic,Neo.VM.JumpTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.ApplicationEngine"/> class.
            </summary>
            <param name="trigger">The trigger of the execution.</param>
            <param name="container">The container of the script.</param>
            <param name="snapshot">The snapshot used by the engine during execution.</param>
            <param name="persistingBlock">The block being persisted. It should be <see langword="null"/> if the <paramref name="trigger"/> is <see cref="F:Neo.SmartContract.TriggerType.Verification"/>.</param>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used by the engine.</param>
            <param name="gas">The maximum gas, in the unit of datoshi, used in this execution. The execution will fail when the gas is exhausted.</param>
            <param name="diagnostic">The diagnostic to be used by the <see cref="T:Neo.SmartContract.ApplicationEngine"/>.</param>
            <param name="jumpTable">The jump table to be used by the <see cref="T:Neo.SmartContract.ApplicationEngine"/>.</param>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.AddFee(System.Int64)">
            <summary>
            Adds GAS to <see cref="P:Neo.SmartContract.ApplicationEngine.FeeConsumed"/> and checks if it has exceeded the maximum limit.
            </summary>
            <param name="datoshi">The amount of GAS, in the unit of datoshi, 1 datoshi = 1e-8 GAS, to be added.</param>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.Create(Neo.SmartContract.TriggerType,Neo.Network.P2P.Payloads.IVerifiable,Neo.Persistence.DataCache,Neo.Network.P2P.Payloads.Block,Neo.ProtocolSettings,System.Int64,Neo.SmartContract.IDiagnostic)">
            <summary>
            Use the loaded <see cref="T:Neo.SmartContract.IApplicationEngineProvider"/> to create a new instance of the <see cref="T:Neo.SmartContract.ApplicationEngine"/> class. If no <see cref="T:Neo.SmartContract.IApplicationEngineProvider"/> is loaded, the constructor of <see cref="T:Neo.SmartContract.ApplicationEngine"/> will be called.
            </summary>
            <param name="trigger">The trigger of the execution.</param>
            <param name="container">The container of the script.</param>
            <param name="snapshot">The snapshot used by the engine during execution.</param>
            <param name="persistingBlock">The block being persisted. It should be <see langword="null"/> if the <paramref name="trigger"/> is <see cref="F:Neo.SmartContract.TriggerType.Verification"/>.</param>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used by the engine.</param>
            <param name="gas">The maximum gas used in this execution, in the unit of datoshi. The execution will fail when the gas is exhausted.</param>
            <param name="diagnostic">The diagnostic to be used by the <see cref="T:Neo.SmartContract.ApplicationEngine"/>.</param>
            <returns>The engine instance created.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.LoadContract(Neo.SmartContract.ContractState,Neo.SmartContract.Manifest.ContractMethodDescriptor,Neo.SmartContract.CallFlags)">
            <summary>
            Loads a deployed contract to the invocation stack. If the _initialize method is found on the contract, loads it as well.
            </summary>
            <param name="contract">The contract to be loaded.</param>
            <param name="method">The method of the contract to be called.</param>
            <param name="callFlags">The <see cref="T:Neo.SmartContract.CallFlags"/> used to call the method.</param>
            <returns>The loaded context.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.LoadScript(Neo.VM.Script,System.Int32,System.Int32,System.Action{Neo.SmartContract.ExecutionContextState})">
            <summary>
            Loads a script to the invocation stack.
            </summary>
            <param name="script">The script to be loaded.</param>
            <param name="rvcount">The number of return values of the script.</param>
            <param name="initialPosition">The initial position of the instruction pointer.</param>
            <param name="configureState">The action used to configure the state of the loaded context.</param>
            <returns>The loaded context.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.Convert(System.Object)">
            <summary>
            Converts an <see cref="T:System.Object"/> to a <see cref="T:Neo.VM.Types.StackItem"/> that used in the virtual machine.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>The converted <see cref="T:Neo.VM.Types.StackItem"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.Convert(Neo.VM.Types.StackItem,Neo.SmartContract.InteropParameterDescriptor)">
            <summary>
            Converts a <see cref="T:Neo.VM.Types.StackItem"/> to an <see cref="T:System.Object"/> that to be used as an argument of an interoperable service or native contract.
            </summary>
            <param name="item">The <see cref="T:Neo.VM.Types.StackItem"/> to convert.</param>
            <param name="descriptor">The descriptor of the parameter.</param>
            <returns>The converted <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.ValidateCallFlags(Neo.SmartContract.CallFlags)">
            <summary>
            Determines whether the <see cref="T:Neo.SmartContract.CallFlags"/> of the current context meets the specified requirements.
            </summary>
            <param name="requiredCallFlags">The requirements to check.</param>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.OnSysCall(Neo.SmartContract.InteropDescriptor)">
            <summary>
            Invokes the specified interoperable service.
            </summary>
            <param name="descriptor">The descriptor of the interoperable service.</param>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.Run(System.ReadOnlyMemory{System.Byte},Neo.Persistence.DataCache,Neo.Network.P2P.Payloads.IVerifiable,Neo.Network.P2P.Payloads.Block,Neo.ProtocolSettings,System.Int32,System.Int64,Neo.SmartContract.IDiagnostic)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.SmartContract.ApplicationEngine"/> class, and use it to run the specified script.
            </summary>
            <param name="script">The script to be executed.</param>
            <param name="snapshot">The snapshot used by the engine during execution.</param>
            <param name="container">The container of the script.</param>
            <param name="persistingBlock">The block being persisted.</param>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used by the engine.</param>
            <param name="offset">The initial position of the instruction pointer.</param>
            <param name="gas">The maximum gas, in the unit of datoshi, used in this execution. The execution will fail when the gas is exhausted.</param>
            <param name="diagnostic">The diagnostic to be used by the <see cref="T:Neo.SmartContract.ApplicationEngine"/>.</param>
            <returns>The engine instance created.</returns>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Iterator_Next">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Iterator.Next.
            Advances the iterator to the next element of the collection.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Iterator_Value">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Iterator.Value.
            Gets the element in the collection at the current position of the iterator.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.IteratorNext(Neo.SmartContract.Iterators.IIterator)">
            <summary>
            The implementation of System.Iterator.Next.
            Advances the iterator to the next element of the collection.
            </summary>
            <param name="iterator">The iterator to be advanced.</param>
            <returns><see langword="true"/> if the iterator was successfully advanced to the next element; <see langword="false"/> if the iterator has passed the end of the collection.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.IteratorValue(Neo.SmartContract.Iterators.IIterator)">
            <summary>
            The implementation of System.Iterator.Value.
            Gets the element in the collection at the current position of the iterator.
            </summary>
            <param name="iterator">The iterator to be used.</param>
            <returns>The element in the collection at the current position of the iterator.</returns>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.OpCodePrices">
            <summary>
            The prices of all the opcodes.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.OpCodePriceTable">
            <summary>
            The prices of all the opcodes.
            In the unit of datoshi, 1 datoshi = 1e-8 GAS
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.#cctor">
            <summary>
            Init OpCodePrices
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.MaxEventName">
            <summary>
            The maximum length of event name.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.MaxNotificationSize">
            <summary>
            The maximum size of notification objects.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_Platform">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.Platform.
            Gets the name of the current platform.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GetNetwork">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GetNetwork.
            Gets the magic number of the current network.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GetAddressVersion">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GetAddressVersion.
            Gets the address version of the current network.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GetTrigger">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GetTrigger.
            Gets the trigger of the execution.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GetTime">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GetTime.
            Gets the timestamp of the current block.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GetScriptContainer">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GetScriptContainer.
            Gets the current script container.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GetExecutingScriptHash">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GetExecutingScriptHash.
            Gets the script hash of the current context.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GetCallingScriptHash">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GetCallingScriptHash.
            Gets the script hash of the calling contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GetEntryScriptHash">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GetEntryScriptHash.
            Gets the script hash of the entry context.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_LoadScript">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.LoadScript.
            Loads a script at rumtime.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_CheckWitness">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.CheckWitness.
            Determines whether the specified account has witnessed the current transaction.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GetInvocationCounter">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GetInvocationCounter.
            Gets the number of times the current contract has been called during the execution.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GetRandom">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GetRandom.
            Gets the random number generated from the VRF.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_Log">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.Log.
            Writes a log.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_Notify">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.Notify.
            Sends a notification.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GetNotifications">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GetNotifications.
            Gets the notifications sent by the specified contract during the execution.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_GasLeft">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.GasLeft.
            Gets the remaining GAS that can be spent in order to complete the execution.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_BurnGas">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.BurnGas.
            Burning GAS to benefit the NEO ecosystem.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Runtime_CurrentSigners">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Runtime.CurrentSigners.
            Get the Signers of the current transaction.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetPlatform">
            <summary>
            The implementation of System.Runtime.Platform.
            Gets the name of the current platform.
            </summary>
            <returns>It always returns "NEO".</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetNetwork">
            <summary>
            The implementation of System.Runtime.GetNetwork.
            Gets the magic number of the current network.
            </summary>
            <returns>The magic number of the current network.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetAddressVersion">
            <summary>
            The implementation of System.Runtime.GetAddressVersion.
            Gets the address version of the current network.
            </summary>
            <returns>The address version of the current network.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetTime">
            <summary>
            The implementation of System.Runtime.GetTime.
            Gets the timestamp of the current block.
            </summary>
            <returns>The timestamp of the current block.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetScriptContainer">
            <summary>
            The implementation of System.Runtime.GetScriptContainer.
            Gets the current script container.
            </summary>
            <returns>The current script container.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.RuntimeLoadScript(System.Byte[],Neo.SmartContract.CallFlags,Neo.VM.Types.Array)">
            <summary>
            The implementation of System.Runtime.LoadScript.
            Loads a script at rumtime.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.CheckWitness(System.Byte[])">
            <summary>
            The implementation of System.Runtime.CheckWitness.
            Determines whether the specified account has witnessed the current transaction.
            </summary>
            <param name="hashOrPubkey">The hash or public key of the account.</param>
            <returns><see langword="true"/> if the account has witnessed the current transaction; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.CheckWitnessInternal(Neo.UInt160)">
            <summary>
            Determines whether the specified account has witnessed the current transaction.
            </summary>
            <param name="hash">The hash of the account.</param>
            <returns><see langword="true"/> if the account has witnessed the current transaction; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetInvocationCounter">
            <summary>
            The implementation of System.Runtime.GetInvocationCounter.
            Gets the number of times the current contract has been called during the execution.
            </summary>
            <returns>The number of times the current contract has been called during the execution.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetRandom">
            <summary>
            The implementation of System.Runtime.GetRandom.
            Gets the next random number.
            </summary>
            <returns>The next random number.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.RuntimeLog(System.Byte[])">
            <summary>
            The implementation of System.Runtime.Log.
            Writes a log.
            </summary>
            <param name="state">The message of the log.</param>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.RuntimeNotify(System.Byte[],Neo.VM.Types.Array)">
            <summary>
            The implementation of System.Runtime.Notify.
            Sends a notification.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="state">The arguments of the event.</param>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.SendNotification(Neo.UInt160,System.String,Neo.VM.Types.Array)">
            <summary>
            Sends a notification for the specified contract.
            </summary>
            <param name="hash">The hash of the specified contract.</param>
            <param name="eventName">The name of the event.</param>
            <param name="state">The arguments of the event.</param>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetNotifications(Neo.UInt160)">
            <summary>
            The implementation of System.Runtime.GetNotifications.
            Gets the notifications sent by the specified contract during the execution.
            </summary>
            <param name="hash">The hash of the specified contract. It can be set to <see langword="null"/> to get all notifications.</param>
            <returns>The notifications sent during the execution.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.BurnGas(System.Int64)">
            <summary>
            The implementation of System.Runtime.BurnGas.
            Burning GAS to benefit the NEO ecosystem.
            </summary>
            <param name="datoshi">The amount of GAS to burn, in the unit of datoshi, 1 datoshi = 1e-8 GAS</param>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetCurrentSigners">
            <summary>
            Get the Signers of the current transaction.
            </summary>
            <returns>The signers of the current transaction, or null if is not related to a transaction execution.</returns>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.MaxStorageKeySize">
            <summary>
            The maximum size of storage keys.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.MaxStorageValueSize">
            <summary>
            The maximum size of storage values.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Storage_GetContext">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Storage.GetContext.
            Gets the storage context for the current contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Storage_GetReadOnlyContext">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Storage.GetReadOnlyContext.
            Gets the readonly storage context for the current contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Storage_AsReadOnly">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Storage.AsReadOnly.
            Converts the specified storage context to a new readonly storage context.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Storage_Get">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Storage.Get.
            Gets the entry with the specified key from the storage.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Storage_Find">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Storage.Find.
            Finds the entries from the storage.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Storage_Put">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Storage.Put.
            Puts a new entry into the storage.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ApplicationEngine.System_Storage_Delete">
            <summary>
            The <see cref="T:Neo.SmartContract.InteropDescriptor"/> of System.Storage.Delete.
            Deletes an entry from the storage.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetStorageContext">
            <summary>
            The implementation of System.Storage.GetContext.
            Gets the storage context for the current contract.
            </summary>
            <returns>The storage context for the current contract.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.GetReadOnlyContext">
            <summary>
            The implementation of System.Storage.GetReadOnlyContext.
            Gets the readonly storage context for the current contract.
            </summary>
            <returns>The storage context for the current contract.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.AsReadOnly(Neo.SmartContract.StorageContext)">
            <summary>
            The implementation of System.Storage.AsReadOnly.
            Converts the specified storage context to a new readonly storage context.
            </summary>
            <param name="context">The storage context to convert.</param>
            <returns>The readonly storage context.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.Get(Neo.SmartContract.StorageContext,System.Byte[])">
            <summary>
            The implementation of System.Storage.Get.
            Gets the entry with the specified key from the storage.
            </summary>
            <param name="context">The context of the storage.</param>
            <param name="key">The key of the entry.</param>
            <returns>The value of the entry. Or <see langword="null"/> if the entry doesn't exist.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.Find(Neo.SmartContract.StorageContext,System.Byte[],Neo.SmartContract.FindOptions)">
            <summary>
            The implementation of System.Storage.Find.
            Finds the entries from the storage.
            </summary>
            <param name="context">The context of the storage.</param>
            <param name="prefix">The prefix of keys to find.</param>
            <param name="options">The options of the search.</param>
            <returns>An iterator for the results.</returns>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.Put(Neo.SmartContract.StorageContext,System.Byte[],System.Byte[])">
            <summary>
            The implementation of System.Storage.Put.
            Puts a new entry into the storage.
            </summary>
            <param name="context">The context of the storage.</param>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:Neo.SmartContract.ApplicationEngine.Delete(Neo.SmartContract.StorageContext,System.Byte[])">
            <summary>
            The implementation of System.Storage.Delete.
            Deletes an entry from the storage.
            </summary>
            <param name="context">The context of the storage.</param>
            <param name="key">The key of the entry.</param>
        </member>
        <member name="T:Neo.SmartContract.BinarySerializer">
            <summary>
            A binary serializer for <see cref="T:Neo.VM.Types.StackItem"/>.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.BinarySerializer.Deserialize(System.ReadOnlyMemory{System.Byte},Neo.VM.ExecutionEngineLimits,Neo.VM.ReferenceCounter)">
            <summary>
            Deserializes a <see cref="T:Neo.VM.Types.StackItem"/> from byte array.
            </summary>
            <param name="data">The byte array to parse.</param>
            <param name="limits">The limits for the deserialization.</param>
            <param name="referenceCounter">The <see cref="T:Neo.VM.ReferenceCounter"/> used by the <see cref="T:Neo.VM.Types.StackItem"/>.</param>
            <returns>The deserialized <see cref="T:Neo.VM.Types.StackItem"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.BinarySerializer.Deserialize(Neo.IO.MemoryReader@,Neo.VM.ExecutionEngineLimits,Neo.VM.ReferenceCounter)">
            <summary>
            Deserializes a <see cref="T:Neo.VM.Types.StackItem"/> from <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
            <param name="limits">The limits for the deserialization.</param>
            <param name="referenceCounter">The <see cref="T:Neo.VM.ReferenceCounter"/> used by the <see cref="T:Neo.VM.Types.StackItem"/>.</param>
            <returns>The deserialized <see cref="T:Neo.VM.Types.StackItem"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.BinarySerializer.Deserialize(Neo.IO.MemoryReader@,System.UInt32,System.UInt32,Neo.VM.ReferenceCounter)">
            <summary>
            Deserializes a <see cref="T:Neo.VM.Types.StackItem"/> from <see cref="T:Neo.IO.MemoryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Neo.IO.MemoryReader"/> for reading data.</param>
            <param name="maxSize">The maximum size of the result.</param>
            <param name="maxItems">The max of items to serialize</param>
            <param name="referenceCounter">The <see cref="T:Neo.VM.ReferenceCounter"/> used by the <see cref="T:Neo.VM.Types.StackItem"/>.</param>
            <returns>The deserialized <see cref="T:Neo.VM.Types.StackItem"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.BinarySerializer.Serialize(Neo.VM.Types.StackItem,Neo.VM.ExecutionEngineLimits)">
            <summary>
            Serializes a <see cref="T:Neo.VM.Types.StackItem"/> to byte array.
            </summary>
            <param name="item">The <see cref="T:Neo.VM.Types.StackItem"/> to be serialized.</param>
            <param name="limits">The <see cref="T:Neo.VM.ExecutionEngineLimits"/> used to ensure the limits.</param>
            <returns>The serialized byte array.</returns>
        </member>
        <member name="M:Neo.SmartContract.BinarySerializer.Serialize(Neo.VM.Types.StackItem,System.Int64,System.Int64)">
            <summary>
            Serializes a <see cref="T:Neo.VM.Types.StackItem"/> to byte array.
            </summary>
            <param name="item">The <see cref="T:Neo.VM.Types.StackItem"/> to be serialized.</param>
            <param name="maxSize">The maximum size of the result.</param>
            <param name="maxItems">The max of items to serialize</param>
            <returns>The serialized byte array.</returns>
        </member>
        <member name="M:Neo.SmartContract.BinarySerializer.Serialize(System.IO.BinaryWriter,Neo.VM.Types.StackItem,System.Int64,System.Int64)">
            <summary>
            Serializes a <see cref="T:Neo.VM.Types.StackItem"/> into <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> for writing data.</param>
            <param name="item">The <see cref="T:Neo.VM.Types.StackItem"/> to be serialized.</param>
            <param name="maxSize">The maximum size of the result.</param>
            <param name="maxItems">The max of items to serialize</param>
        </member>
        <member name="T:Neo.SmartContract.CallFlags">
            <summary>
            Represents the operations allowed when a contract is called.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.CallFlags.None">
            <summary>
            No flag is set.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.CallFlags.ReadStates">
            <summary>
            Indicates that the called contract is allowed to read states.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.CallFlags.WriteStates">
            <summary>
            Indicates that the called contract is allowed to write states.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.CallFlags.AllowCall">
            <summary>
            Indicates that the called contract is allowed to call another contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.CallFlags.AllowNotify">
            <summary>
            Indicates that the called contract is allowed to send notifications.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.CallFlags.States">
            <summary>
            Indicates that the called contract is allowed to read or write states.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.CallFlags.ReadOnly">
            <summary>
            Indicates that the called contract is allowed to read states or call another contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.CallFlags.All">
            <summary>
            All flags are set.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.Contract">
            <summary>
            Represents a contract that can be invoked.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Contract.Script">
            <summary>
            The script of the contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Contract.ParameterList">
            <summary>
            The parameters of the contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Contract.ScriptHash">
            <summary>
            The hash of the contract.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Contract.Create(Neo.SmartContract.ContractParameterType[],System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Neo.SmartContract.Contract"/> class.
            </summary>
            <param name="parameterList">The parameters of the contract.</param>
            <param name="redeemScript">The script of the contract.</param>
            <returns>The created contract.</returns>
        </member>
        <member name="M:Neo.SmartContract.Contract.Create(Neo.UInt160,Neo.SmartContract.ContractParameterType[])">
            <summary>
            Constructs a special contract with empty script, will get the script with scriptHash from blockchain when doing the verification.
            </summary>
            <param name="scriptHash">The hash of the contract.</param>
            <param name="parameterList">The parameters of the contract.</param>
            <returns>The created contract.</returns>
        </member>
        <member name="M:Neo.SmartContract.Contract.CreateMultiSigContract(System.Int32,System.Collections.Generic.IReadOnlyCollection{Neo.Cryptography.ECC.ECPoint})">
            <summary>
            Creates a multi-sig contract.
            </summary>
            <param name="m">The minimum number of correct signatures that need to be provided in order for the verification to pass.</param>
            <param name="publicKeys">The public keys of the contract.</param>
            <returns>The created contract.</returns>
        </member>
        <member name="M:Neo.SmartContract.Contract.CreateMultiSigRedeemScript(System.Int32,System.Collections.Generic.IReadOnlyCollection{Neo.Cryptography.ECC.ECPoint})">
            <summary>
            Creates the script of multi-sig contract.
            </summary>
            <param name="m">The minimum number of correct signatures that need to be provided in order for the verification to pass.</param>
            <param name="publicKeys">The public keys of the contract.</param>
            <returns>The created script.</returns>
        </member>
        <member name="M:Neo.SmartContract.Contract.CreateSignatureContract(Neo.Cryptography.ECC.ECPoint)">
            <summary>
            Creates a signature contract.
            </summary>
            <param name="publicKey">The public key of the contract.</param>
            <returns>The created contract.</returns>
        </member>
        <member name="M:Neo.SmartContract.Contract.CreateSignatureRedeemScript(Neo.Cryptography.ECC.ECPoint)">
            <summary>
            Creates the script of signature contract.
            </summary>
            <param name="publicKey">The public key of the contract.</param>
            <returns>The created script.</returns>
        </member>
        <member name="M:Neo.SmartContract.Contract.GetBFTAddress(System.Collections.Generic.IReadOnlyCollection{Neo.Cryptography.ECC.ECPoint})">
            <summary>
            Gets the BFT address for the specified public keys.
            </summary>
            <param name="pubkeys">The public keys to be used.</param>
            <returns>The BFT address.</returns>
        </member>
        <member name="T:Neo.SmartContract.ContractParameter">
            <summary>
            Represents a parameter of a contract method.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameter.Type">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameter.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ContractParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.ContractParameter"/> class.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ContractParameter.#ctor(Neo.SmartContract.ContractParameterType)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.ContractParameter"/> class with the specified type.
            </summary>
            <param name="type">The type of the parameter.</param>
        </member>
        <member name="M:Neo.SmartContract.ContractParameter.FromJson(Neo.Json.JObject)">
            <summary>
            Converts the parameter from a JSON object.
            </summary>
            <param name="json">The parameter represented by a JSON object.</param>
            <returns>The converted parameter.</returns>
        </member>
        <member name="M:Neo.SmartContract.ContractParameter.SetValue(System.String)">
            <summary>
            Sets the value of the parameter.
            </summary>
            <param name="text">The <see cref="T:System.String"/> form of the value.</param>
        </member>
        <member name="M:Neo.SmartContract.ContractParameter.ToJson">
            <summary>
            Converts the parameter to a JSON object.
            </summary>
            <returns>The parameter represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.SmartContract.ContractParametersContext">
            <summary>
            The context used to add witnesses for <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/>.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParametersContext.Verifiable">
            <summary>
            The <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> to add witnesses.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParametersContext.Snapshot">
            <summary>
            The snapshot used to read data.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParametersContext.Network">
            <summary>
            The magic number of the network.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ContractParametersContext.Completed">
            <summary>
            Determines whether all witnesses are ready to be added.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ContractParametersContext.ScriptHashes">
            <summary>
            Gets the script hashes to be verified for the <see cref="F:Neo.SmartContract.ContractParametersContext.Verifiable"/>.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.#ctor(Neo.Persistence.DataCache,Neo.Network.P2P.Payloads.IVerifiable,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.ContractParametersContext"/> class.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="verifiable">The <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> to add witnesses.</param>
            <param name="network">The magic number of the network.</param>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.Add(Neo.SmartContract.Contract,System.Int32,System.Object)">
            <summary>
            Adds a parameter to the specified witness script.
            </summary>
            <param name="contract">The contract contains the script.</param>
            <param name="index">The index of the parameter.</param>
            <param name="parameter">The value of the parameter.</param>
            <returns><see langword="true"/> if the parameter is added successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.Add(Neo.SmartContract.Contract,System.Object[])">
            <summary>
            Adds parameters to the specified witness script.
            </summary>
            <param name="contract">The contract contains the script.</param>
            <param name="parameters">The values of the parameters.</param>
            <returns><see langword="true"/> if the parameters are added successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.AddSignature(Neo.SmartContract.Contract,Neo.Cryptography.ECC.ECPoint,System.Byte[])">
            <summary>
            Adds a signature to the specified witness script.
            </summary>
            <param name="contract">The contract contains the script.</param>
            <param name="pubkey">The public key for the signature.</param>
            <param name="signature">The signature.</param>
            <returns><see langword="true"/> if the signature is added successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.FromJson(Neo.Json.JObject,Neo.Persistence.DataCache)">
            <summary>
            Converts the context from a JSON object.
            </summary>
            <param name="json">The context represented by a JSON object.</param>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The converted context.</returns>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.GetParameter(Neo.UInt160,System.Int32)">
            <summary>
            Gets the parameter with the specified index from the witness script.
            </summary>
            <param name="scriptHash">The hash of the witness script.</param>
            <param name="index">The specified index.</param>
            <returns>The parameter with the specified index.</returns>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.GetParameters(Neo.UInt160)">
            <summary>
            Gets the parameters from the witness script.
            </summary>
            <param name="scriptHash">The hash of the witness script.</param>
            <returns>The parameters from the witness script.</returns>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.GetSignatures(Neo.UInt160)">
            <summary>
            Gets the signatures from the witness script.
            </summary>
            <param name="scriptHash">The hash of the witness script.</param>
            <returns>The signatures from the witness script.</returns>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.GetScript(Neo.UInt160)">
            <summary>
            Gets the witness script with the specified hash.
            </summary>
            <param name="scriptHash">The hash of the witness script.</param>
            <returns>The witness script.</returns>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.GetWitnesses">
            <summary>
            Gets the witnesses of the <see cref="F:Neo.SmartContract.ContractParametersContext.Verifiable"/>.
            </summary>
            <returns>The witnesses of the <see cref="F:Neo.SmartContract.ContractParametersContext.Verifiable"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The witnesses are not ready to be added.</exception>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.Parse(System.String,Neo.Persistence.DataCache)">
            <summary>
            Parses the context from a JSON <see cref="T:System.String"/>.
            </summary>
            <param name="value">The JSON <see cref="T:System.String"/>.</param>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The parsed context.</returns>
        </member>
        <member name="M:Neo.SmartContract.ContractParametersContext.ToJson">
            <summary>
            Converts the context to a JSON object.
            </summary>
            <returns>The context represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.SmartContract.ContractParameterType">
            <summary>
            Represents the type of <see cref="T:Neo.SmartContract.ContractParameter"/>.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.Any">
            <summary>
            Indicates that the parameter can be of any type.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.Boolean">
            <summary>
            Indicates that the parameter is of Boolean type.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.Integer">
            <summary>
            Indicates that the parameter is an integer.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.ByteArray">
            <summary>
            Indicates that the parameter is a byte array.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.String">
            <summary>
            Indicates that the parameter is a string.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.Hash160">
            <summary>
            Indicates that the parameter is a 160-bit hash.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.Hash256">
            <summary>
            Indicates that the parameter is a 256-bit hash.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.PublicKey">
            <summary>
            Indicates that the parameter is a public key.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.Signature">
            <summary>
            Indicates that the parameter is a signature.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.Array">
            <summary>
            Indicates that the parameter is an array.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.Map">
            <summary>
            Indicates that the parameter is a map.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.InteropInterface">
            <summary>
            Indicates that the parameter is an interoperable interface.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractParameterType.Void">
            <summary>
            It can be only used as the return type of a method, meaning that the method has no return value.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.ContractState">
            <summary>
            Represents a deployed contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractState.Id">
            <summary>
            The id of the contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractState.UpdateCounter">
            <summary>
            Indicates the number of times the contract has been updated.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractState.Hash">
            <summary>
            The hash of the contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractState.Nef">
            <summary>
            The nef of the contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.ContractState.Manifest">
            <summary>
            The manifest of the contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ContractState.Script">
            <summary>
            The script of the contract.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.ContractState.CanCall(Neo.SmartContract.ContractState,System.String)">
            <summary>
            Determines whether the current contract has the permission to call the specified contract.
            </summary>
            <param name="targetContract">The contract to be called.</param>
            <param name="targetMethod">The method to be called.</param>
            <returns><see langword="true"/> if the contract allows to be called; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.ContractState.ToJson">
            <summary>
            Converts the contract to a JSON object.
            </summary>
            <returns>The contract represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.SmartContract.DeployedContract">
            <summary>
            Represents a deployed contract that can be invoked.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.DeployedContract.#ctor(Neo.SmartContract.ContractState)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.DeployedContract"/> class with the specified <see cref="T:Neo.SmartContract.ContractState"/>.
            </summary>
            <param name="contract">The <see cref="T:Neo.SmartContract.ContractState"/> corresponding to the contract.</param>
        </member>
        <member name="T:Neo.SmartContract.ExecutionContextState">
            <summary>
            Represents the custom state in <see cref="T:Neo.VM.ExecutionContext"/>.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ExecutionContextState.ScriptHash">
            <summary>
            The script hash of the current context.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ExecutionContextState.CallingContext">
            <summary>
            The calling context.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ExecutionContextState.NativeCallingScriptHash">
            <summary>
            The script hash of the calling native contract. Used in native contracts only.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ExecutionContextState.Contract">
            <summary>
            The <see cref="T:Neo.SmartContract.ContractState"/> of the current context.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.ExecutionContextState.CallFlags">
            <summary>
            The <see cref="T:Neo.SmartContract.CallFlags"/> of the current context.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.FindOptions">
            <summary>
            Specify the options to be used during the search.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.FindOptions.None">
            <summary>
            No option is set. The results will be an iterator of (key, value).
            </summary>
        </member>
        <member name="F:Neo.SmartContract.FindOptions.KeysOnly">
            <summary>
            Indicates that only keys need to be returned. The results will be an iterator of keys.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.FindOptions.RemovePrefix">
            <summary>
            Indicates that the prefix byte of keys should be removed before return.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.FindOptions.ValuesOnly">
            <summary>
            Indicates that only values need to be returned. The results will be an iterator of values.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.FindOptions.DeserializeValues">
            <summary>
            Indicates that values should be deserialized before return.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.FindOptions.PickField0">
            <summary>
            Indicates that only the field 0 of the deserialized values need to be returned. This flag must be set together with <see cref="F:Neo.SmartContract.FindOptions.DeserializeValues"/>.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.FindOptions.PickField1">
            <summary>
            Indicates that only the field 1 of the deserialized values need to be returned. This flag must be set together with <see cref="F:Neo.SmartContract.FindOptions.DeserializeValues"/>.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.FindOptions.Backwards">
            <summary>
            Indicates that results should be returned in backwards (descending) order.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.FindOptions.All">
            <summary>
            This value is only for internal use, and shouldn't be used in smart contracts.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.Helper">
            <summary>
            A helper class related to smart contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Helper.MaxVerificationGas">
            <summary>
            The maximum GAS that can be consumed when <see cref="M:Neo.SmartContract.Helper.VerifyWitnesses(Neo.Network.P2P.Payloads.IVerifiable,Neo.ProtocolSettings,Neo.Persistence.DataCache,System.Int64)"/> is called.
            The unit is datoshi, 1 datoshi = 1e-8 GAS
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Helper.SignatureContractCost">
            <summary>
            Calculates the verification fee for a signature address.
            In the unit of datoshi, 1 datoshi = 1e-8 GAS
            </summary>
            <returns>The calculated cost.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.MultiSignatureContractCost(System.Int32,System.Int32)">
            <summary>
            Calculates the verification fee for a multi-signature address.
            In the unit of datoshi, 1 datoshi = 1e-8 GAS
            </summary>
            <param name="m">The minimum number of correct signatures that need to be provided in order for the verification to pass.</param>
            <param name="n">The number of public keys in the account.</param>
            <returns>The calculated cost.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.Check(System.Byte[],Neo.SmartContract.Manifest.ContractAbi)">
            <summary>
            Check the correctness of the script and ABI.
            </summary>
            <param name="script">The script of the contract.</param>
            <param name="abi">The ABI of the contract.</param>
        </member>
        <member name="M:Neo.SmartContract.Helper.Check(Neo.VM.Script,Neo.SmartContract.Manifest.ContractAbi)">
            <summary>
            Check the correctness of the script and ABI.
            </summary>
            <param name="script">The script of the contract.</param>
            <param name="abi">The ABI of the contract.</param>
            <remarks>Note: The <see cref="T:Neo.VM.Script"/> passed to this method should be constructed with strict mode.</remarks>
        </member>
        <member name="M:Neo.SmartContract.Helper.GetContractHash(Neo.UInt160,System.UInt32,System.String)">
            <summary>
            Computes the hash of a deployed contract.
            </summary>
            <param name="sender">The sender of the transaction that deployed the contract.</param>
            <param name="nefCheckSum">The checksum of the nef file of the contract.</param>
            <param name="name">The name of the contract.</param>
            <returns>The hash of the contract.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.GetScriptHash(Neo.VM.ExecutionContext)">
            <summary>
            Gets the script hash of the specified <see cref="T:Neo.VM.ExecutionContext"/>.
            </summary>
            <param name="context">The specified <see cref="T:Neo.VM.ExecutionContext"/>.</param>
            <returns>The script hash of the context.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.IsMultiSigContract(System.ReadOnlySpan{System.Byte})">
            <summary>
            Determines whether the specified contract is a multi-signature contract.
            </summary>
            <param name="script">The script of the contract.</param>
            <returns><see langword="true"/> if the contract is a multi-signature contract; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.IsMultiSigContract(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@)">
            <summary>
            Determines whether the specified contract is a multi-signature contract.
            </summary>
            <param name="script">The script of the contract.</param>
            <param name="m">The minimum number of correct signatures that need to be provided in order for the verification to pass.</param>
            <param name="n">The number of public keys in the account.</param>
            <returns><see langword="true"/> if the contract is a multi-signature contract; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.IsMultiSigContract(System.ReadOnlySpan{System.Byte},System.Int32@,Neo.Cryptography.ECC.ECPoint[]@)">
            <summary>
            Determines whether the specified contract is a multi-signature contract.
            </summary>
            <param name="script">The script of the contract.</param>
            <param name="m">The minimum number of correct signatures that need to be provided in order for the verification to pass.</param>
            <param name="points">The public keys in the account.</param>
            <returns><see langword="true"/> if the contract is a multi-signature contract; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.IsSignatureContract(System.ReadOnlySpan{System.Byte})">
            <summary>
            Determines whether the specified contract is a signature contract.
            </summary>
            <param name="script">The script of the contract.</param>
            <returns><see langword="true"/> if the contract is a signature contract; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.IsStandardContract(System.ReadOnlySpan{System.Byte})">
            <summary>
            Determines whether the specified contract is a standard contract. A standard contract is either a signature contract or a multi-signature contract.
            </summary>
            <param name="script">The script of the contract.</param>
            <returns><see langword="true"/> if the contract is a standard contract; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.ToInteroperable``1(Neo.VM.Types.StackItem)">
            <summary>
            Convert the <see cref="T:Neo.VM.Types.StackItem"/> to an <see cref="T:Neo.SmartContract.IInteroperable"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Neo.SmartContract.IInteroperable"/>.</typeparam>
            <param name="item">The <see cref="T:Neo.VM.Types.StackItem"/> to convert.</param>
            <returns>The converted <see cref="T:Neo.SmartContract.IInteroperable"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.ToScriptHash(System.Byte[])">
            <summary>
            Computes the hash of the specified script.
            </summary>
            <param name="script">The specified script.</param>
            <returns>The hash of the script.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.ToScriptHash(System.ReadOnlySpan{System.Byte})">
            <summary>
            Computes the hash of the specified script.
            </summary>
            <param name="script">The specified script.</param>
            <returns>The hash of the script.</returns>
        </member>
        <member name="M:Neo.SmartContract.Helper.VerifyWitnesses(Neo.Network.P2P.Payloads.IVerifiable,Neo.ProtocolSettings,Neo.Persistence.DataCache,System.Int64)">
            <summary>
            Verifies the witnesses of the specified <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/>.
            </summary>
            <param name="verifiable">The <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> to be verified.</param>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> to be used for the verification.</param>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="datoshi">The maximum GAS that can be used, in the unit of datoshi, 1 datoshi = 1e-8 GAS.</param>
            <returns><see langword="true"/> if the <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> is verified as valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.SmartContract.IApplicationEngineProvider">
            <summary>
            A provider for creating <see cref="T:Neo.SmartContract.ApplicationEngine"/> instances.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.IApplicationEngineProvider.Create(Neo.SmartContract.TriggerType,Neo.Network.P2P.Payloads.IVerifiable,Neo.Persistence.DataCache,Neo.Network.P2P.Payloads.Block,Neo.ProtocolSettings,System.Int64,Neo.SmartContract.IDiagnostic,Neo.VM.JumpTable)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.SmartContract.ApplicationEngine"/> class or its subclass. This method will be called by <see cref="M:Neo.SmartContract.ApplicationEngine.Create(Neo.SmartContract.TriggerType,Neo.Network.P2P.Payloads.IVerifiable,Neo.Persistence.DataCache,Neo.Network.P2P.Payloads.Block,Neo.ProtocolSettings,System.Int64,Neo.SmartContract.IDiagnostic)"/>.
            </summary>
            <param name="trigger">The trigger of the execution.</param>
            <param name="container">The container of the script.</param>
            <param name="snapshot">The snapshot used by the engine during execution.</param>
            <param name="persistingBlock">The block being persisted. It should be <see langword="null"/> if the <paramref name="trigger"/> is <see cref="F:Neo.SmartContract.TriggerType.Verification"/>.</param>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used by the engine.</param>
            <param name="gas">The maximum gas used in this execution. The execution will fail when the gas is exhausted.</param>
            <param name="diagnostic">The diagnostic to be used by the <see cref="T:Neo.SmartContract.ApplicationEngine"/>.</param>
            <param name="jumpTable">The jump table to be used by the <see cref="T:Neo.SmartContract.ApplicationEngine"/>.</param>
            <returns>The engine instance created.</returns>
        </member>
        <member name="T:Neo.SmartContract.IInteroperable">
            <summary>
            Represents the object that can be converted to and from <see cref="T:Neo.VM.Types.StackItem"/>.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.IInteroperable.FromStackItem(Neo.VM.Types.StackItem)">
            <summary>
            Convert a <see cref="T:Neo.VM.Types.StackItem"/> to the current object.
            </summary>
            <param name="stackItem">The <see cref="T:Neo.VM.Types.StackItem"/> to convert.</param>
        </member>
        <member name="M:Neo.SmartContract.IInteroperable.ToStackItem(Neo.VM.ReferenceCounter)">
            <summary>
            Convert the current object to a <see cref="T:Neo.VM.Types.StackItem"/>.
            </summary>
            <param name="referenceCounter">The <see cref="T:Neo.VM.ReferenceCounter"/> used by the <see cref="T:Neo.VM.Types.StackItem"/>.</param>
            <returns>The converted <see cref="T:Neo.VM.Types.StackItem"/>.</returns>
        </member>
        <member name="T:Neo.SmartContract.IInteroperableVerifiable">
            <summary>
            Represents the object that can be converted to and from <see cref="T:Neo.VM.Types.StackItem"/>
            and allows you to specify whether a verification is required.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.IInteroperableVerifiable.FromStackItem(Neo.VM.Types.StackItem,System.Boolean)">
            <summary>
            Convert a <see cref="T:Neo.VM.Types.StackItem"/> to the current object.
            </summary>
            <param name="stackItem">The <see cref="T:Neo.VM.Types.StackItem"/> to convert.</param>
            <param name="verify">Verify the content</param>
        </member>
        <member name="T:Neo.SmartContract.InteropDescriptor">
            <summary>
            Represents a descriptor of an interoperable service.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropDescriptor.Name">
            <summary>
            The name of the interoperable service.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropDescriptor.Hash">
            <summary>
            The hash of the interoperable service.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropDescriptor.Handler">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> used to handle the interoperable service.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropDescriptor.Parameters">
            <summary>
            The parameters of the interoperable service.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropDescriptor.FixedPrice">
            <summary>
            The fixed price for calling the interoperable service. It can be 0 if the interoperable service has a variable price.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropDescriptor.RequiredCallFlags">
            <summary>
            The required <see cref="T:Neo.SmartContract.CallFlags"/> for the interoperable service.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.InteropParameterDescriptor">
            <summary>
            Represents a descriptor of an interoperable service parameter.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropParameterDescriptor.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropParameterDescriptor.Type">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropParameterDescriptor.Converter">
            <summary>
            The converter to convert the parameter from <see cref="T:Neo.VM.Types.StackItem"/> to <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropParameterDescriptor.IsEnum">
            <summary>
            Indicates whether the parameter is an enumeration.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropParameterDescriptor.IsArray">
            <summary>
            Indicates whether the parameter is an array.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.InteropParameterDescriptor.IsInterface">
            <summary>
            Indicates whether the parameter is an <see cref="T:Neo.VM.Types.InteropInterface"/>.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.Iterators.IIterator">
            <summary>
            Represents iterators in smart contract.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Iterators.IIterator.Next">
            <summary>
            Advances the iterator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the iterator was successfully advanced to the next element; <see langword="false"/> if the iterator has passed the end of the collection.</returns>
        </member>
        <member name="M:Neo.SmartContract.Iterators.IIterator.Value(Neo.VM.ReferenceCounter)">
            <summary>
            Gets the element in the collection at the current position of the iterator.
            </summary>
            <returns>The element in the collection at the current position of the iterator.</returns>
        </member>
        <member name="T:Neo.SmartContract.JsonSerializer">
            <summary>
            A JSON serializer for <see cref="T:Neo.VM.Types.StackItem"/>.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.JsonSerializer.Serialize(Neo.VM.Types.StackItem)">
            <summary>
            Serializes a <see cref="T:Neo.VM.Types.StackItem"/> to a <see cref="T:Neo.Json.JToken"/>.
            </summary>
            <param name="item">The <see cref="T:Neo.VM.Types.StackItem"/> to serialize.</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="M:Neo.SmartContract.JsonSerializer.SerializeToByteArray(Neo.VM.Types.StackItem,System.UInt32)">
            <summary>
            Serializes a <see cref="T:Neo.VM.Types.StackItem"/> to JSON.
            </summary>
            <param name="item">The <see cref="T:Neo.VM.Types.StackItem"/> to convert.</param>
            <param name="maxSize">The maximum size of the JSON output.</param>
            <returns>A byte array containing the JSON output.</returns>
        </member>
        <member name="M:Neo.SmartContract.JsonSerializer.Deserialize(Neo.SmartContract.ApplicationEngine,Neo.Json.JToken,Neo.VM.ExecutionEngineLimits,Neo.VM.ReferenceCounter)">
            <summary>
            Deserializes a <see cref="T:Neo.VM.Types.StackItem"/> from <see cref="T:Neo.Json.JToken"/>.
            </summary>
            <param name="engine">The <see cref="T:Neo.SmartContract.ApplicationEngine"/> used.</param>
            <param name="json">The <see cref="T:Neo.Json.JToken"/> to deserialize.</param>
            <param name="limits">The limits for the deserialization.</param>
            <param name="referenceCounter">The <see cref="T:Neo.VM.ReferenceCounter"/> used by the <see cref="T:Neo.VM.Types.StackItem"/>.</param>
            <returns>The deserialized <see cref="T:Neo.VM.Types.StackItem"/>.</returns>
        </member>
        <member name="T:Neo.SmartContract.KeyBuilder">
            <summary>
            Used to build storage keys for native contracts.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.KeyBuilder.#ctor(System.Int32,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.KeyBuilder"/> class.
            </summary>
            <param name="id">The id of the contract.</param>
            <param name="prefix">The prefix of the key.</param>
        </member>
        <member name="M:Neo.SmartContract.KeyBuilder.Add(System.Byte)">
            <summary>
            Adds part of the key to the builder.
            </summary>
            <param name="key">Part of the key.</param>
            <returns>A reference to this instance after the add operation has completed.</returns>
        </member>
        <member name="M:Neo.SmartContract.KeyBuilder.Add(System.ReadOnlySpan{System.Byte})">
            <summary>
            Adds part of the key to the builder.
            </summary>
            <param name="key">Part of the key.</param>
            <returns>A reference to this instance after the add operation has completed.</returns>
        </member>
        <member name="M:Neo.SmartContract.KeyBuilder.Add(Neo.IO.ISerializable)">
            <summary>
            Adds part of the key to the builder.
            </summary>
            <param name="key">Part of the key.</param>
            <returns>A reference to this instance after the add operation has completed.</returns>
        </member>
        <member name="M:Neo.SmartContract.KeyBuilder.AddBigEndian(System.Int32)">
            <summary>
            Adds part of the key to the builder in BigEndian.
            </summary>
            <param name="key">Part of the key.</param>
            <returns>A reference to this instance after the add operation has completed.</returns>
        </member>
        <member name="M:Neo.SmartContract.KeyBuilder.AddBigEndian(System.UInt32)">
            <summary>
            Adds part of the key to the builder in BigEndian.
            </summary>
            <param name="key">Part of the key.</param>
            <returns>A reference to this instance after the add operation has completed.</returns>
        </member>
        <member name="M:Neo.SmartContract.KeyBuilder.AddBigEndian(System.Int64)">
            <summary>
            Adds part of the key to the builder in BigEndian.
            </summary>
            <param name="key">Part of the key.</param>
            <returns>A reference to this instance after the add operation has completed.</returns>
        </member>
        <member name="M:Neo.SmartContract.KeyBuilder.AddBigEndian(System.UInt64)">
            <summary>
            Adds part of the key to the builder in BigEndian.
            </summary>
            <param name="key">Part of the key.</param>
            <returns>A reference to this instance after the add operation has completed.</returns>
        </member>
        <member name="M:Neo.SmartContract.KeyBuilder.ToArray">
            <summary>
            Gets the storage key generated by the builder.
            </summary>
            <returns>The storage key.</returns>
        </member>
        <member name="T:Neo.SmartContract.LogEventArgs">
            <summary>
            The <see cref="T:System.EventArgs"/> of <see cref="E:Neo.SmartContract.ApplicationEngine.Log"/>.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.LogEventArgs.ScriptContainer">
            <summary>
            The container that containing the executed script.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.LogEventArgs.ScriptHash">
            <summary>
            The script hash of the contract that sends the log.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.LogEventArgs.Message">
            <summary>
            The message of the log.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.LogEventArgs.#ctor(Neo.Network.P2P.Payloads.IVerifiable,Neo.UInt160,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.LogEventArgs"/> class.
            </summary>
            <param name="container">The container that containing the executed script.</param>
            <param name="script_hash">The script hash of the contract that sends the log.</param>
            <param name="message">The message of the log.</param>
        </member>
        <member name="T:Neo.SmartContract.Manifest.ContractAbi">
            <summary>
            Represents the ABI of a smart contract.
            </summary>
            <remarks>For more details, see NEP-14.</remarks>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractAbi.Methods">
            <summary>
            Gets the methods in the ABI.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractAbi.Events">
            <summary>
            Gets the events in the ABI.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractAbi.FromJson(Neo.Json.JObject)">
            <summary>
            Converts the ABI from a JSON object.
            </summary>
            <param name="json">The ABI represented by a JSON object.</param>
            <returns>The converted ABI.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractAbi.GetMethod(System.String,System.Int32)">
            <summary>
            Gets the method with the specified name.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="pcount">The number of parameters of the method. It can be set to -1 to search for the method with the specified name and any number of parameters.</param>
            <returns>The method that matches the specified name and number of parameters. If <paramref name="pcount"/> is set to -1, the first method with the specified name will be returned.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractAbi.ToJson">
            <summary>
            Converts the ABI to a JSON object.
            </summary>
            <returns>The ABI represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.SmartContract.Manifest.ContractEventDescriptor">
            <summary>
            Represents an event in a smart contract ABI.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractEventDescriptor.Name">
            <summary>
            The name of the event or method.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractEventDescriptor.Parameters">
            <summary>
            The parameters of the event or method.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractEventDescriptor.FromJson(Neo.Json.JObject)">
            <summary>
            Converts the event from a JSON object.
            </summary>
            <param name="json">The event represented by a JSON object.</param>
            <returns>The converted event.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractEventDescriptor.ToJson">
            <summary>
            Converts the event to a JSON object.
            </summary>
            <returns>The event represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.SmartContract.Manifest.ContractGroup">
            <summary>
            Represents a set of mutually trusted contracts.
            A contract will trust and allow any contract in the same group to invoke it, and the user interface will not give any warnings.
            A group is identified by a public key and must be accompanied by a signature for the contract hash to prove that the contract is indeed included in the group.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractGroup.PubKey">
            <summary>
            The public key of the group.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractGroup.Signature">
            <summary>
            The signature of the contract hash which can be verified by <see cref="P:Neo.SmartContract.Manifest.ContractGroup.PubKey"/>.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractGroup.FromJson(Neo.Json.JObject)">
            <summary>
            Converts the group from a JSON object.
            </summary>
            <param name="json">The group represented by a JSON object.</param>
            <returns>The converted group.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractGroup.IsValid(Neo.UInt160)">
            <summary>
            Determines whether the signature in the group is valid.
            </summary>
            <param name="hash">The hash of the contract.</param>
            <returns><see langword="true"/> if the signature is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractGroup.ToJson">
            <summary>
            Converts the group to a JSON object.
            </summary>
            <returns>The group represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.SmartContract.Manifest.ContractManifest">
            <summary>
            Represents the manifest of a smart contract.
            When a smart contract is deployed, it must explicitly declare the features and permissions it will use.
            When it is running, it will be limited by its declared list of features and permissions, and cannot make any behavior beyond the scope of the list.
            </summary>
            <remarks>For more details, see NEP-15.</remarks>
        </member>
        <member name="F:Neo.SmartContract.Manifest.ContractManifest.MaxLength">
            <summary>
            The maximum length of a manifest.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractManifest.Name">
            <summary>
            The name of the contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractManifest.Groups">
            <summary>
            The groups of the contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractManifest.SupportedStandards">
            <summary>
            Indicates which standards the contract supports. It can be a list of NEPs.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractManifest.Abi">
            <summary>
            The ABI of the contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractManifest.Permissions">
            <summary>
            The permissions of the contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractManifest.Trusts">
            <summary>
            The trusted contracts and groups of the contract.
            If a contract is trusted, the user interface will not give any warnings when called by the contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractManifest.Extra">
            <summary>
            Custom user data.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractManifest.FromJson(Neo.Json.JObject)">
            <summary>
            Converts the manifest from a JSON object.
            </summary>
            <param name="json">The manifest represented by a JSON object.</param>
            <returns>The converted manifest.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractManifest.Parse(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parse the manifest from a byte array containing JSON data.
            </summary>
            <param name="json">The byte array containing JSON data.</param>
            <returns>The parsed manifest.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractManifest.Parse(System.String)">
            <summary>
            Parse the manifest from a JSON <see cref="T:System.String"/>.
            </summary>
            <param name="json">The JSON <see cref="T:System.String"/>.</param>
            <returns>The parsed manifest.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractManifest.ToJson">
            <summary>
            Converts the manifest to a JSON object.
            </summary>
            <returns>The manifest represented by a JSON object.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractManifest.IsValid(Neo.VM.ExecutionEngineLimits,Neo.UInt160)">
            <summary>
            Determines whether the manifest is valid.
            </summary>
            <param name="limits">The <see cref="T:Neo.VM.ExecutionEngineLimits"/> used for test serialization.</param>
            <param name="hash">The hash of the contract.</param>
            <returns><see langword="true"/> if the manifest is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.SmartContract.Manifest.ContractMethodDescriptor">
            <summary>
            Represents a method in a smart contract ABI.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractMethodDescriptor.ReturnType">
            <summary>
            Indicates the return type of the method. It can be any value of <see cref="T:Neo.SmartContract.ContractParameterType"/>.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractMethodDescriptor.Offset">
            <summary>
            The position of the method in the contract script.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractMethodDescriptor.Safe">
            <summary>
            Indicates whether the method is a safe method.
            If a method is marked as safe, the user interface will not give any warnings when it is called by other contracts.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractMethodDescriptor.FromJson(Neo.Json.JObject)">
            <summary>
            Converts the method from a JSON object.
            </summary>
            <param name="json">The method represented by a JSON object.</param>
            <returns>The converted method.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractMethodDescriptor.ToJson">
            <summary>
            Converts the method to a JSON object.
            </summary>
            <returns>The method represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.SmartContract.Manifest.ContractParameterDefinition">
            <summary>
            Represents a parameter of an event or method in ABI.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractParameterDefinition.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractParameterDefinition.Type">
            <summary>
            The type of the parameter. It can be any value of <see cref="T:Neo.SmartContract.ContractParameterType"/> except <see cref="F:Neo.SmartContract.ContractParameterType.Void"/>.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractParameterDefinition.FromJson(Neo.Json.JObject)">
            <summary>
            Converts the parameter from a JSON object.
            </summary>
            <param name="json">The parameter represented by a JSON object.</param>
            <returns>The converted parameter.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractParameterDefinition.ToJson">
            <summary>
            Converts the parameter to a JSON object.
            </summary>
            <returns>The parameter represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.SmartContract.Manifest.ContractPermission">
            <summary>
            Represents a permission of a contract. It describes which contracts may be
            invoked and which methods are called.
            If a contract invokes a contract or method that is not declared in the manifest
            at runtime, the invocation will fail.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractPermission.Contract">
            <summary>
            Indicates which contract to be invoked.
            It can be a hash of a contract, a public key of a group, or a wildcard *.
            If it specifies a hash of a contract, then the contract will be invoked;
            If it specifies a public key of a group, then any contract in this group
            may be invoked; If it specifies a wildcard *, then any contract may be invoked.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractPermission.Methods">
            <summary>
            Indicates which methods to be called.
            It can also be assigned with a wildcard *. If it is a wildcard *,
            then it means that any method can be called.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Manifest.ContractPermission.DefaultPermission">
            <summary>
            A default permission that both <see cref="P:Neo.SmartContract.Manifest.ContractPermission.Contract"/> and <see cref="P:Neo.SmartContract.Manifest.ContractPermission.Methods"/> fields are set to wildcard *.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractPermission.FromJson(Neo.Json.JObject)">
            <summary>
            Converts the permission from a JSON object.
            </summary>
            <param name="json">The permission represented by a JSON object.</param>
            <returns>The converted permission.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractPermission.ToJson">
            <summary>
            Converts the permission to a JSON object.
            </summary>
            <returns>The permission represented by a JSON object.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractPermission.IsAllowed(Neo.SmartContract.ContractState,System.String)">
            <summary>
            Determines whether the method of the specified contract can be called by this contract.
            </summary>
            <param name="targetContract">The contract being called.</param>
            <param name="targetMethod">The method of the specified contract.</param>
            <returns><see langword="true"/> if the contract allows to be called; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.SmartContract.Manifest.ContractPermissionDescriptor">
            <summary>
            Indicates which contracts are authorized to be called.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractPermissionDescriptor.Hash">
            <summary>
            The hash of the contract. It can't be set with <see cref="P:Neo.SmartContract.Manifest.ContractPermissionDescriptor.Group"/>.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractPermissionDescriptor.Group">
            <summary>
            The group of the contracts. It can't be set with <see cref="P:Neo.SmartContract.Manifest.ContractPermissionDescriptor.Hash"/>.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractPermissionDescriptor.IsHash">
            <summary>
            Indicates whether <see cref="P:Neo.SmartContract.Manifest.ContractPermissionDescriptor.Hash"/> is set.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractPermissionDescriptor.IsGroup">
            <summary>
            Indicates whether <see cref="P:Neo.SmartContract.Manifest.ContractPermissionDescriptor.Group"/> is set.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Manifest.ContractPermissionDescriptor.IsWildcard">
            <summary>
            Indicates whether it is a wildcard.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractPermissionDescriptor.Create(Neo.UInt160)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.SmartContract.Manifest.ContractPermissionDescriptor"/> class with the specified contract hash.
            </summary>
            <param name="hash">The contract to be called.</param>
            <returns>The created permission descriptor.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractPermissionDescriptor.Create(Neo.Cryptography.ECC.ECPoint)">
            <summary>
            Creates a new instance of the <see cref="T:Neo.SmartContract.Manifest.ContractPermissionDescriptor"/> class with the specified group.
            </summary>
            <param name="group">The group of the contracts to be called.</param>
            <returns>The created permission descriptor.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractPermissionDescriptor.CreateWildcard">
            <summary>
            Creates a new instance of the <see cref="T:Neo.SmartContract.Manifest.ContractPermissionDescriptor"/> class with wildcard.
            </summary>
            <returns>The created permission descriptor.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractPermissionDescriptor.FromJson(Neo.Json.JString)">
            <summary>
            Converts the permission descriptor from a JSON object.
            </summary>
            <param name="json">The permission descriptor represented by a JSON object.</param>
            <returns>The converted permission descriptor.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractPermissionDescriptor.ToJson">
            <summary>
            Converts the permission descriptor to a JSON object.
            </summary>
            <returns>The permission descriptor represented by a JSON object.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.ContractPermissionDescriptor.ToArray">
            <summary>
            Converts the permission descriptor to byte array.
            </summary>
            <returns>The converted byte array. Or <see langword="null"/> if it is a wildcard.</returns>
        </member>
        <member name="T:Neo.SmartContract.Manifest.WildcardContainer`1">
            <summary>
            A list that supports wildcard.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:Neo.SmartContract.Manifest.WildcardContainer`1.IsWildcard">
            <summary>
            Indicates whether the list is a wildcard.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Manifest.WildcardContainer`1.Create(`0[])">
            <summary>
            Creates a new instance of the <see cref="T:Neo.SmartContract.Manifest.WildcardContainer`1"/> class with the initial elements.
            </summary>
            <param name="data">The initial elements.</param>
            <returns>The created list.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.WildcardContainer`1.CreateWildcard">
            <summary>
            Creates a new instance of the <see cref="T:Neo.SmartContract.Manifest.WildcardContainer`1"/> class with wildcard.
            </summary>
            <returns>The created list.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.WildcardContainer`1.FromJson(Neo.Json.JToken,System.Func{Neo.Json.JToken,`0})">
            <summary>
            Converts the list from a JSON object.
            </summary>
            <param name="json">The list represented by a JSON object.</param>
            <param name="elementSelector">A converter for elements.</param>
            <returns>The converted list.</returns>
        </member>
        <member name="M:Neo.SmartContract.Manifest.WildcardContainer`1.ToJson(System.Func{`0,Neo.Json.JToken})">
            <summary>
            Converts the list to a JSON object.
            </summary>
            <returns>The list represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.SmartContract.MethodToken">
            <summary>
            Represents the methods that a contract will call statically.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.MethodToken.Hash">
            <summary>
            The hash of the contract to be called.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.MethodToken.Method">
            <summary>
            The name of the method to be called.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.MethodToken.ParametersCount">
            <summary>
            The number of parameters of the method to be called.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.MethodToken.HasReturnValue">
            <summary>
            Indicates whether the method to be called has a return value.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.MethodToken.CallFlags">
            <summary>
            The <see cref="F:Neo.SmartContract.MethodToken.CallFlags"/> to be used to call the contract.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.MethodToken.ToJson">
            <summary>
            Converts the token to a JSON object.
            </summary>
            <returns>The token represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.SmartContract.Native.AccountState">
            <summary>
            The base class of account state for all native tokens.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.AccountState.Balance">
            <summary>
            The balance of the account.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.Native.ContractManagement">
            <summary>
            A native contract used to manage all deployed smart contracts.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.ContractManagement.GetContract(Neo.Persistence.DataCache,Neo.UInt160)">
            <summary>
            Gets the deployed contract with the specified hash.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="hash">The hash of the deployed contract.</param>
            <returns>The deployed contract.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.ContractManagement.GetContractById(Neo.Persistence.DataCache,System.Int32)">
            <summary>
            Maps specified ID to deployed contract.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="id">Contract ID.</param>
            <returns>The deployed contract.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.ContractManagement.GetContractHashes(Neo.Persistence.DataCache)">
            <summary>
            Gets hashes of all non native deployed contracts.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>Iterator with hashes of all deployed contracts.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.ContractManagement.HasMethod(Neo.Persistence.DataCache,Neo.UInt160,System.String,System.Int32)">
            <summary>
            Check if a method exists in a contract.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="hash">The hash of the deployed contract.</param>
            <param name="method">The name of the method</param>
            <param name="pcount">The number of parameters</param>
            <returns>True if the method exists.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.ContractManagement.ListContracts(Neo.Persistence.DataCache)">
            <summary>
            Gets all deployed contracts.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The deployed contracts.</returns>
        </member>
        <member name="T:Neo.SmartContract.Native.CryptoLib">
            <summary>
            A native contract library that provides cryptographic algorithms.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.CryptoLib.Bls12381Serialize(Neo.VM.Types.InteropInterface)">
            <summary>
            Serialize a bls12381 point.
            </summary>
            <param name="g">The point to be serialized.</param>
            <returns></returns>
        </member>
        <member name="M:Neo.SmartContract.Native.CryptoLib.Bls12381Deserialize(System.Byte[])">
            <summary>
            Deserialize a bls12381 point.
            </summary>
            <param name="data">The point as byte array.</param>
            <returns></returns>
        </member>
        <member name="M:Neo.SmartContract.Native.CryptoLib.Bls12381Equal(Neo.VM.Types.InteropInterface,Neo.VM.Types.InteropInterface)">
            <summary>
            Determines whether the specified points are equal.
            </summary>
            <param name="x">The first point.</param>
            <param name="y">Teh second point.</param>
            <returns><c>true</c> if the specified points are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.CryptoLib.Bls12381Add(Neo.VM.Types.InteropInterface,Neo.VM.Types.InteropInterface)">
            <summary>
            Add operation of two points.
            </summary>
            <param name="x">The first point.</param>
            <param name="y">The second point.</param>
            <returns></returns>
        </member>
        <member name="M:Neo.SmartContract.Native.CryptoLib.Bls12381Mul(Neo.VM.Types.InteropInterface,System.Byte[],System.Boolean)">
            <summary>
            Mul operation of gt point and multiplier
            </summary>
            <param name="x">The point</param>
            <param name="mul">Multiplier,32 bytes,little-endian</param>
            <param name="neg">negative number</param>
            <returns></returns>
        </member>
        <member name="M:Neo.SmartContract.Native.CryptoLib.Bls12381Pairing(Neo.VM.Types.InteropInterface,Neo.VM.Types.InteropInterface)">
            <summary>
            Pairing operation of g1 and g2
            </summary>
            <param name="g1">The g1 point.</param>
            <param name="g2">The g2 point.</param>
            <returns></returns>
        </member>
        <member name="M:Neo.SmartContract.Native.CryptoLib.RIPEMD160(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array using the ripemd160 algorithm.
            </summary>
            <param name="data">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.CryptoLib.Sha256(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array using the sha256 algorithm.
            </summary>
            <param name="data">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.CryptoLib.Murmur32(System.Byte[],System.UInt32)">
            <summary>
            Computes the hash value for the specified byte array using the murmur32 algorithm.
            </summary>
            <param name="data">The input to compute the hash code for.</param>
            <param name="seed">The seed of the murmur32 hash function</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.CryptoLib.Keccak256(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array using the keccak256 algorithm.
            </summary>
            <param name="data">The input to compute the hash code for.</param>
            <returns>Computed hash</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.CryptoLib.VerifyWithECDsa(System.Byte[],System.Byte[],System.Byte[],Neo.SmartContract.Native.NamedCurveHash)">
            <summary>
            Verifies that a digital signature is appropriate for the provided key and message using the ECDSA algorithm.
            </summary>
            <param name="message">The signed message.</param>
            <param name="pubkey">The public key to be used.</param>
            <param name="signature">The signature to be verified.</param>
            <param name="curveHash">A pair of the curve to be used by the ECDSA algorithm and the hasher function to be used to hash message.</param>
            <returns><see langword="true"/> if the signature is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.SmartContract.Native.FungibleToken`1">
            <summary>
            The base class of all native tokens that are compatible with NEP-17.
            </summary>
            <typeparam name="TState">The type of account state.</typeparam>
        </member>
        <member name="P:Neo.SmartContract.Native.FungibleToken`1.Symbol">
            <summary>
            The symbol of the token.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.FungibleToken`1.Decimals">
            <summary>
            The number of decimal places of the token.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.FungibleToken`1.Factor">
            <summary>
            The factor used when calculating the displayed value of the token value.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.FungibleToken`1.Prefix_TotalSupply">
            <summary>
            The prefix for storing total supply.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.FungibleToken`1.Prefix_Account">
            <summary>
            The prefix for storing account states.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.FungibleToken`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.Native.FungibleToken`1"/> class.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.FungibleToken`1.TotalSupply(Neo.Persistence.DataCache)">
            <summary>
            Gets the total supply of the token.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The total supply of the token.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.FungibleToken`1.BalanceOf(Neo.Persistence.DataCache,Neo.UInt160)">
            <summary>
            Gets the balance of the specified account.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="account">The owner of the account.</param>
            <returns>The balance of the account. Or 0 if the account doesn't exist.</returns>
        </member>
        <member name="T:Neo.SmartContract.Native.GasToken">
            <summary>
            Represents the GAS token in the NEO system.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.Native.LedgerContract">
            <summary>
            A native contract for storing all blocks and transactions.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.GetBlockHash(Neo.Persistence.DataCache,System.UInt32)">
            <summary>
            Gets the hash of the specified block.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="index">The index of the block.</param>
            <returns>The hash of the block.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.CurrentHash(Neo.Persistence.DataCache)">
            <summary>
            Gets the hash of the current block.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The hash of the current block.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.CurrentIndex(Neo.Persistence.DataCache)">
            <summary>
            Gets the index of the current block.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The index of the current block.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.ContainsBlock(Neo.Persistence.DataCache,Neo.UInt256)">
            <summary>
            Determine whether the specified block is contained in the blockchain.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="hash">The hash of the block.</param>
            <returns><see langword="true"/> if the blockchain contains the block; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.ContainsTransaction(Neo.Persistence.DataCache,Neo.UInt256)">
            <summary>
            Determine whether the specified transaction is contained in the blockchain.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="hash">The hash of the transaction.</param>
            <returns><see langword="true"/> if the blockchain contains the transaction; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.ContainsConflictHash(Neo.Persistence.DataCache,Neo.UInt256,System.Collections.Generic.IEnumerable{Neo.UInt160},System.UInt32)">
            <summary>
            Determine whether the specified transaction hash is contained in the blockchain
            as the hash of conflicting transaction.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="hash">The hash of the conflicting transaction.</param>
            <param name="signers">The list of signer accounts of the conflicting transaction.</param>
            <param name="maxTraceableBlocks">MaxTraceableBlocks protocol setting.</param>
            <returns><see langword="true"/> if the blockchain contains the hash of the conflicting transaction; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.GetTrimmedBlock(Neo.Persistence.DataCache,Neo.UInt256)">
            <summary>
            Gets a <see cref="T:Neo.SmartContract.Native.TrimmedBlock"/> with the specified hash.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="hash">The hash of the block.</param>
            <returns>The trimmed block.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.GetBlock(Neo.Persistence.DataCache,Neo.UInt256)">
            <summary>
            Gets a block with the specified hash.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="hash">The hash of the block.</param>
            <returns>The block with the specified hash.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.GetBlock(Neo.Persistence.DataCache,System.UInt32)">
            <summary>
            Gets a block with the specified index.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="index">The index of the block.</param>
            <returns>The block with the specified index.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.GetHeader(Neo.Persistence.DataCache,Neo.UInt256)">
            <summary>
            Gets a block header with the specified hash.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="hash">The hash of the block.</param>
            <returns>The block header with the specified hash.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.GetHeader(Neo.Persistence.DataCache,System.UInt32)">
            <summary>
            Gets a block header with the specified index.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="index">The index of the block.</param>
            <returns>The block header with the specified index.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.GetTransactionState(Neo.Persistence.DataCache,Neo.UInt256)">
            <summary>
            Gets a <see cref="T:Neo.SmartContract.Native.TransactionState"/> with the specified hash.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="hash">The hash of the transaction.</param>
            <returns>The <see cref="T:Neo.SmartContract.Native.TransactionState"/> with the specified hash.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.LedgerContract.GetTransaction(Neo.Persistence.DataCache,Neo.UInt256)">
            <summary>
            Gets a transaction with the specified hash.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="hash">The hash of the transaction.</param>
            <returns>The transaction with the specified hash.</returns>
        </member>
        <member name="T:Neo.SmartContract.Native.NamedCurveHash">
            <summary>
            Represents a pair of the named curve used in ECDSA and a hash algorithm used to hash message.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.NamedCurveHash.secp256k1SHA256">
            <summary>
            The secp256k1 curve and SHA256 hash algorithm.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.NamedCurveHash.secp256r1SHA256">
            <summary>
            The secp256r1 curve, which known as prime256v1 or nistP-256, and SHA256 hash algorithm.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.NamedCurveHash.secp256k1Keccak256">
            <summary>
            The secp256k1 curve and Keccak256 hash algorithm.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.NamedCurveHash.secp256r1Keccak256">
            <summary>
            The secp256r1 curve, which known as prime256v1 or nistP-256, and Keccak256 hash algorithm.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.Native.NativeContract">
            <summary>
            The base class of all native contracts.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.ContractManagement">
            <summary>
            Gets the instance of the <see cref="T:Neo.SmartContract.Native.ContractManagement"/> class.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.StdLib">
            <summary>
            Gets the instance of the <see cref="T:Neo.SmartContract.Native.StdLib"/> class.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.CryptoLib">
            <summary>
            Gets the instance of the <see cref="T:Neo.SmartContract.Native.CryptoLib"/> class.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.Ledger">
            <summary>
            Gets the instance of the <see cref="T:Neo.SmartContract.Native.LedgerContract"/> class.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.NEO">
            <summary>
            Gets the instance of the <see cref="T:Neo.SmartContract.Native.NeoToken"/> class.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.GAS">
            <summary>
            Gets the instance of the <see cref="T:Neo.SmartContract.Native.GasToken"/> class.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.Policy">
            <summary>
            Gets the instance of the <see cref="T:Neo.SmartContract.Native.PolicyContract"/> class.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.RoleManagement">
            <summary>
            Gets the instance of the <see cref="T:Neo.SmartContract.Native.RoleManagement"/> class.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.Oracle">
            <summary>
            Gets the instance of the <see cref="T:Neo.SmartContract.Native.OracleContract"/> class.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.Contracts">
            <summary>
            Gets all native contracts.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.Name">
            <summary>
            The name of the native contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.ActiveIn">
            <summary>
            Since Hardfork has to start having access to the native contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.Hash">
            <summary>
            The hash of the native contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NativeContract.Id">
            <summary>
            The id of the native contract.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.NativeContract.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.Native.NativeContract"/> class.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.NativeContract.GetAllowedMethods(Neo.SmartContract.Native.NativeContract.IsHardforkEnabledDelegate,System.UInt32)">
            <summary>
            The allowed methods and his offsets.
            </summary>
            <param name="hfChecker">Hardfork checker</param>
            <param name="index">Block index</param>
            <returns>The <see cref="T:Neo.SmartContract.Native.NativeContract.NativeContractsCache"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NativeContract.GetContractState(Neo.ProtocolSettings,System.UInt32)">
            <summary>
            The <see cref="T:Neo.SmartContract.ContractState"/> of the native contract.
            </summary>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> where the HardForks are configured.</param>
            <param name="index">Block index</param>
            <returns>The <see cref="T:Neo.SmartContract.ContractState"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NativeContract.GetContractState(Neo.SmartContract.Native.NativeContract.IsHardforkEnabledDelegate,System.UInt32)">
            <summary>
            The <see cref="T:Neo.SmartContract.ContractState"/> of the native contract.
            </summary>
            <param name="hfChecker">Hardfork checker</param>
            <param name="index">Block index</param>
            <returns>The <see cref="T:Neo.SmartContract.ContractState"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NativeContract.IsInitializeBlock(Neo.ProtocolSettings,System.UInt32,Neo.Hardfork[]@)">
            <summary>
            It is the initialize block
            </summary>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> where the HardForks are configured.</param>
            <param name="index">Block index</param>
            <param name="hardforks">Active hardforks</param>
            <returns>True if the native contract must be initialized</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NativeContract.IsActive(Neo.ProtocolSettings,System.UInt32)">
            <summary>
            Is the native contract active
            </summary>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> where the HardForks are configured.</param>
            <param name="index">Block index</param>
            <returns>True if the native contract is active</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NativeContract.CheckCommittee(Neo.SmartContract.ApplicationEngine)">
            <summary>
            Checks whether the committee has witnessed the current transaction.
            </summary>
            <param name="engine">The <see cref="T:Neo.SmartContract.ApplicationEngine"/> that is executing the contract.</param>
            <returns><see langword="true"/> if the committee has witnessed the current transaction; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NativeContract.GetContract(Neo.UInt160)">
            <summary>
            Gets the native contract with the specified hash.
            </summary>
            <param name="hash">The hash of the native contract.</param>
            <returns>The native contract with the specified hash.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NativeContract.IsNative(Neo.UInt160)">
            <summary>
            Determine whether the specified contract is a native contract.
            </summary>
            <param name="hash">The hash of the contract.</param>
            <returns><see langword="true"/> if the contract is native; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.SmartContract.Native.NeoToken">
            <summary>
            Represents the NEO token in the NEO system.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.NeoToken.TotalAmount">
            <summary>
            Indicates the total amount of NEO.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.NeoToken.EffectiveVoterTurnout">
            <summary>
            Indicates the effective voting turnout in NEO. The voted candidates will only be effective when the voting turnout exceeds this value.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.ShouldRefreshCommittee(System.UInt32,System.Int32)">
            <summary>
            Determine whether the votes should be recounted at the specified height.
            </summary>
            <param name="height">The height to be checked.</param>
            <param name="committeeMembersCount">The number of committee members in the system.</param>
            <returns><see langword="true"/> if the votes should be recounted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.GetGasPerBlock(Neo.Persistence.DataCache)">
            <summary>
            Gets the amount of GAS generated in each block.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The amount of GAS generated.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.GetRegisterPrice(Neo.Persistence.DataCache)">
            <summary>
            Gets the fees to be paid to register as a candidate.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The amount of the fees.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.UnclaimedGas(Neo.Persistence.DataCache,Neo.UInt160,System.UInt32)">
            <summary>
            Get the amount of unclaimed GAS in the specified account.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="account">The account to check.</param>
            <param name="end">The block index used when calculating GAS.</param>
            <returns>The amount of unclaimed GAS.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.GetCandidates(Neo.Persistence.DataCache)">
            <summary>
            Gets the first 256 registered candidates.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>All the registered candidates.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.GetAllCandidates(Neo.Persistence.DataCache)">
            <summary>
            Gets the registered candidates iterator.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>All the registered candidates.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.GetCandidateVote(Neo.Persistence.DataCache,Neo.Cryptography.ECC.ECPoint)">
            <summary>
            Gets votes from specific candidate.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="pubKey">Specific public key</param>
            <returns>Votes or -1 if it was not found.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.GetCommittee(Neo.Persistence.DataCache)">
            <summary>
            Gets all the members of the committee.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The public keys of the members.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.GetAccountState(Neo.Persistence.DataCache,Neo.UInt160)">
            <summary>
            Get account state.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="account">account</param>
            <returns>The state of the account.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.GetCommitteeAddress(Neo.Persistence.DataCache)">
            <summary>
            Gets the address of the committee.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The address of the committee.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.ComputeNextBlockValidators(Neo.Persistence.DataCache,Neo.ProtocolSettings)">
            <summary>
            Computes the validators of the next block.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used during computing.</param>
            <returns>The public keys of the validators.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.NeoToken.GetNextBlockValidators(Neo.Persistence.DataCache,System.Int32)">
            <summary>
            Gets the validators of the next block.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="validatorsCount">The number of validators in the system.</param>
            <returns>The public keys of the validators.</returns>
        </member>
        <member name="T:Neo.SmartContract.Native.NeoToken.NeoAccountState">
            <summary>
            Represents the account state of <see cref="T:Neo.SmartContract.Native.NeoToken"/>.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.NeoToken.NeoAccountState.BalanceHeight">
            <summary>
            The height of the block where the balance changed last time.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.NeoToken.NeoAccountState.VoteTo">
            <summary>
            The voting target of the account. This field can be <see langword="null"/>.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.Native.OracleContract">
            <summary>
            The native Oracle service for NEO system.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.OracleContract.GetPrice(Neo.Persistence.DataCache)">
            <summary>
            Gets the price for an Oracle request.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The price for an Oracle request, in the unit of datoshi, 1 datoshi = 1e-8 GAS.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.OracleContract.GetRequest(Neo.Persistence.DataCache,System.UInt64)">
            <summary>
            Gets a pending request with the specified id.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="id">The id of the request.</param>
            <returns>The pending request. Or <see langword="null"/> if no request with the specified id is found.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.OracleContract.GetRequests(Neo.Persistence.DataCache)">
            <summary>
            Gets all the pending requests.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>All the pending requests.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.OracleContract.GetRequestsByUrl(Neo.Persistence.DataCache,System.String)">
            <summary>
            Gets the requests with the specified url.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="url">The url of the requests.</param>
            <returns>All the requests with the specified url.</returns>
        </member>
        <member name="T:Neo.SmartContract.Native.OracleRequest">
            <summary>
            Represents an Oracle request in smart contracts.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.OracleRequest.OriginalTxid">
            <summary>
            The original transaction that sent the related request.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.OracleRequest.GasForResponse">
            <summary>
            The maximum amount of GAS that can be used when executing response callback.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.OracleRequest.Url">
            <summary>
            The url of the request.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.OracleRequest.Filter">
            <summary>
            The filter for the response.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.OracleRequest.CallbackContract">
            <summary>
            The hash of the callback contract.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.OracleRequest.CallbackMethod">
            <summary>
            The name of the callback method.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.OracleRequest.UserData">
            <summary>
            The user-defined object that will be passed to the callback.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.Native.PolicyContract">
            <summary>
            A native contract that manages the system policies.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.PolicyContract.DefaultExecFeeFactor">
            <summary>
            The default execution fee factor.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.PolicyContract.DefaultStoragePrice">
            <summary>
            The default storage price.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.PolicyContract.DefaultFeePerByte">
            <summary>
            The default network fee per byte of transactions.
            In the unit of datoshi, 1 datoshi = 1e-8 GAS
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.PolicyContract.DefaultAttributeFee">
            <summary>
            The default fee for attribute.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.PolicyContract.MaxExecFeeFactor">
            <summary>
            The maximum execution fee factor that the committee can set.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.PolicyContract.MaxAttributeFee">
            <summary>
            The maximum fee for attribute that the committee can set.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.PolicyContract.MaxStoragePrice">
            <summary>
            The maximum storage price that the committee can set.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.PolicyContract.GetFeePerByte(Neo.Persistence.DataCache)">
            <summary>
            Gets the network fee per transaction byte.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The network fee per transaction byte.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.PolicyContract.GetExecFeeFactor(Neo.Persistence.DataCache)">
            <summary>
            Gets the execution fee factor. This is a multiplier that can be adjusted by the committee to adjust the system fees for transactions.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The execution fee factor.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.PolicyContract.GetStoragePrice(Neo.Persistence.DataCache)">
            <summary>
            Gets the storage price.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <returns>The storage price.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.PolicyContract.GetAttributeFee(Neo.Persistence.DataCache,System.Byte)">
            <summary>
            Gets the fee for attribute.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="attributeType">Attribute type</param>
            <returns>The fee for attribute.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.PolicyContract.IsBlocked(Neo.Persistence.DataCache,Neo.UInt160)">
            <summary>
            Determines whether the specified account is blocked.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="account">The account to be checked.</param>
            <returns><see langword="true"/> if the account is blocked; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.SmartContract.Native.Role">
            <summary>
            Represents the roles in the NEO system.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.Role.StateValidator">
            <summary>
            The validators of state. Used to generate and sign the state root.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.Role.Oracle">
            <summary>
            The nodes used to process Oracle requests.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.Role.NeoFSAlphabetNode">
            <summary>
            NeoFS Alphabet nodes.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.Role.P2PNotary">
            <summary>
            P2P Notary nodes used to process P2P notary requests.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.Native.RoleManagement">
            <summary>
            A native contract for managing roles in NEO system.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.RoleManagement.GetDesignatedByRole(Neo.Persistence.DataCache,Neo.SmartContract.Native.Role,System.UInt32)">
            <summary>
            Gets the list of nodes for the specified role.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="role">The type of the role.</param>
            <param name="index">The index of the block to be queried.</param>
            <returns>The public keys of the nodes.</returns>
        </member>
        <member name="T:Neo.SmartContract.Native.StdLib">
            <summary>
            A native contract library that provides useful functions.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.Native.StdLib.Itoa(System.Numerics.BigInteger)">
            <summary>
            Converts an integer to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The integer to convert.</param>
            <returns>The converted <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.StdLib.Itoa(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Converts an integer to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The integer to convert.</param>
            <param name="base">The base of the integer. Only support 10 and 16.</param>
            <returns>The converted <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.StdLib.Atoi(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> to an integer.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to convert.</param>
            <returns>The converted integer.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.StdLib.Atoi(System.String,System.Int32)">
            <summary>
            Converts a <see cref="T:System.String"/> to an integer.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to convert.</param>
            <param name="base">The base of the integer. Only support 10 and 16.</param>
            <returns>The converted integer.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.StdLib.Base64Encode(System.Byte[])">
            <summary>
            Encodes a byte array into a base64 <see cref="T:System.String"/>.
            </summary>
            <param name="data">The byte array to be encoded.</param>
            <returns>The encoded <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.StdLib.Base64Decode(System.String)">
            <summary>
            Decodes a byte array from a base64 <see cref="T:System.String"/>.
            </summary>
            <param name="s">The base64 <see cref="T:System.String"/>.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.StdLib.Base58Encode(System.Byte[])">
            <summary>
            Encodes a byte array into a base58 <see cref="T:System.String"/>.
            </summary>
            <param name="data">The byte array to be encoded.</param>
            <returns>The encoded <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.StdLib.Base58Decode(System.String)">
            <summary>
            Decodes a byte array from a base58 <see cref="T:System.String"/>.
            </summary>
            <param name="s">The base58 <see cref="T:System.String"/>.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.StdLib.Base58CheckEncode(System.Byte[])">
            <summary>
            Converts a byte array to its equivalent <see cref="T:System.String"/> representation that is encoded with base-58 digits. The encoded <see cref="T:System.String"/> contains the checksum of the binary data.
            </summary>
            <param name="data">The byte array to be encoded.</param>
            <returns>The encoded <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.Native.StdLib.Base58CheckDecode(System.String)">
            <summary>
            Converts the specified <see cref="T:System.String"/>, which encodes binary data as base-58 digits, to an equivalent byte array. The encoded <see cref="T:System.String"/> contains the checksum of the binary data.
            </summary>
            <param name="s">The base58 <see cref="T:System.String"/>.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="T:Neo.SmartContract.Native.TransactionState">
            <summary>
            Represents a transaction that has been included in a block.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.TransactionState.BlockIndex">
            <summary>
            The block containing this transaction.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.TransactionState.Transaction">
            <summary>
            The transaction, if the transaction is trimmed this value will be null
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.TransactionState.State">
            <summary>
            The execution state
            </summary>
        </member>
        <member name="T:Neo.SmartContract.Native.TrimmedBlock">
            <summary>
            Represents a block which the transactions are trimmed.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.TrimmedBlock.Header">
            <summary>
            The header of the block.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.Native.TrimmedBlock.Hashes">
            <summary>
            The hashes of the transactions of the block.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.TrimmedBlock.Hash">
            <summary>
            The hash of the block.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.Native.TrimmedBlock.Index">
            <summary>
            The index of the block.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.NefFile">
            <summary>
            Represents the structure of NEO Executable Format.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.NefFile.Magic">
            <summary>
            NEO Executable Format 3 (NEF3)
            </summary>
        </member>
        <member name="P:Neo.SmartContract.NefFile.Compiler">
            <summary>
            The name and version of the compiler that generated this nef file.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.NefFile.Source">
            <summary>
            The url of the source files.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.NefFile.Tokens">
            <summary>
            The methods that to be called statically.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.NefFile.Script">
            <summary>
            The script of the contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.NefFile.CheckSum">
            <summary>
            The checksum of the nef file.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.NefFile.Parse(System.ReadOnlyMemory{System.Byte},System.Boolean)">
            <summary>
            Parse NefFile from memory
            </summary>
            <param name="memory">Memory</param>
            <param name="verify">Do checksum and MaxItemSize checks</param>
            <returns>NefFile</returns>
        </member>
        <member name="M:Neo.SmartContract.NefFile.ComputeChecksum(Neo.SmartContract.NefFile)">
            <summary>
            Computes the checksum for the specified nef file.
            </summary>
            <param name="file">The specified nef file.</param>
            <returns>The checksum of the nef file.</returns>
        </member>
        <member name="M:Neo.SmartContract.NefFile.ToJson">
            <summary>
            Converts the nef file to a JSON object.
            </summary>
            <returns>The nef file represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.SmartContract.NotifyEventArgs">
            <summary>
            The <see cref="T:System.EventArgs"/> of <see cref="E:Neo.SmartContract.ApplicationEngine.Notify"/>.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.NotifyEventArgs.ScriptContainer">
            <summary>
            The container that containing the executed script.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.NotifyEventArgs.ScriptHash">
            <summary>
            The script hash of the contract that sends the log.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.NotifyEventArgs.EventName">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.NotifyEventArgs.State">
            <summary>
            The arguments of the event.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.NotifyEventArgs.#ctor(Neo.Network.P2P.Payloads.IVerifiable,Neo.UInt160,System.String,Neo.VM.Types.Array)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.NotifyEventArgs"/> class.
            </summary>
            <param name="container">The container that containing the executed script.</param>
            <param name="script_hash">The script hash of the contract that sends the log.</param>
            <param name="eventName">The name of the event.</param>
            <param name="state">The arguments of the event.</param>
        </member>
        <member name="T:Neo.SmartContract.StorageContext">
            <summary>
            The storage context used to read and write data in smart contracts.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.StorageContext.Id">
            <summary>
            The id of the contract that owns the context.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.StorageContext.IsReadOnly">
            <summary>
            Indicates whether the context is read-only.
            </summary>
        </member>
        <member name="T:Neo.SmartContract.StorageItem">
            <summary>
            Represents the values in contract storage.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.StorageItem.Value">
            <summary>
            The byte array value of the <see cref="T:Neo.SmartContract.StorageItem"/>.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.StorageItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.StorageItem"/> class.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.StorageItem.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.StorageItem"/> class.
            </summary>
            <param name="value">The byte array value of the <see cref="T:Neo.SmartContract.StorageItem"/>.</param>
        </member>
        <member name="M:Neo.SmartContract.StorageItem.#ctor(System.Numerics.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.StorageItem"/> class.
            </summary>
            <param name="value">The integer value of the <see cref="T:Neo.SmartContract.StorageItem"/>.</param>
        </member>
        <member name="M:Neo.SmartContract.StorageItem.#ctor(Neo.SmartContract.IInteroperable)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.SmartContract.StorageItem"/> class.
            </summary>
            <param name="interoperable">The <see cref="T:Neo.SmartContract.IInteroperable"/> value of the <see cref="T:Neo.SmartContract.StorageItem"/>.</param>
        </member>
        <member name="M:Neo.SmartContract.StorageItem.Add(System.Numerics.BigInteger)">
            <summary>
            Increases the integer value in the store by the specified value.
            </summary>
            <param name="integer">The integer to add.</param>
        </member>
        <member name="M:Neo.SmartContract.StorageItem.Clone">
            <summary>
            Creates a new instance of <see cref="T:Neo.SmartContract.StorageItem"/> with the same value as this instance.
            </summary>
            <returns>The created <see cref="T:Neo.SmartContract.StorageItem"/>.</returns>
        </member>
        <member name="M:Neo.SmartContract.StorageItem.FromReplica(Neo.SmartContract.StorageItem)">
            <summary>
            Copies the value of another <see cref="T:Neo.SmartContract.StorageItem"/> instance to this instance.
            </summary>
            <param name="replica">The instance to be copied.</param>
        </member>
        <member name="M:Neo.SmartContract.StorageItem.GetInteroperable``1">
            <summary>
            Gets an <see cref="T:Neo.SmartContract.IInteroperable"/> from the storage.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Neo.SmartContract.IInteroperable"/>.</typeparam>
            <returns>The <see cref="T:Neo.SmartContract.IInteroperable"/> in the storage.</returns>
        </member>
        <member name="M:Neo.SmartContract.StorageItem.GetInteroperable``1(System.Boolean)">
            <summary>
            Gets an <see cref="T:Neo.SmartContract.IInteroperable"/> from the storage.
            </summary>
            <param name="verify">Verify deserialization</param>
            <typeparam name="T">The type of the <see cref="T:Neo.SmartContract.IInteroperable"/>.</typeparam>
            <returns>The <see cref="T:Neo.SmartContract.IInteroperable"/> in the storage.</returns>
        </member>
        <member name="M:Neo.SmartContract.StorageItem.Set(System.Numerics.BigInteger)">
            <summary>
            Sets the integer value of the storage.
            </summary>
            <param name="integer">The integer value to set.</param>
        </member>
        <member name="M:Neo.SmartContract.StorageItem.Set(Neo.SmartContract.IInteroperable)">
            <summary>
            Sets the interoperable value of the storage.
            </summary>
            <param name="interoperable">The <see cref="T:Neo.SmartContract.IInteroperable"/> value of the <see cref="T:Neo.SmartContract.StorageItem"/>.</param>
        </member>
        <member name="T:Neo.SmartContract.StorageKey">
            <summary>
            Represents the keys in contract storage.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.StorageKey.Id">
            <summary>
            The id of the contract.
            </summary>
        </member>
        <member name="P:Neo.SmartContract.StorageKey.Key">
            <summary>
            The key of the storage entry.
            </summary>
        </member>
        <member name="M:Neo.SmartContract.StorageKey.CreateSearchPrefix(System.Int32,System.ReadOnlySpan{System.Byte})">
            <summary>
            Creates a search prefix for a contract.
            </summary>
            <param name="id">The id of the contract.</param>
            <param name="prefix">The prefix of the keys to search.</param>
            <returns>The created search prefix.</returns>
        </member>
        <member name="T:Neo.SmartContract.TriggerType">
            <summary>
            Represents the triggers for running smart contracts.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.TriggerType.OnPersist">
            <summary>
            Indicate that the contract is triggered by the system to execute the OnPersist method of the native contracts.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.TriggerType.PostPersist">
            <summary>
            Indicate that the contract is triggered by the system to execute the PostPersist method of the native contracts.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.TriggerType.Verification">
            <summary>
            Indicates that the contract is triggered by the verification of a <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/>.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.TriggerType.Application">
            <summary>
            Indicates that the contract is triggered by the execution of transactions.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.TriggerType.System">
            <summary>
            The combination of all system triggers.
            </summary>
        </member>
        <member name="F:Neo.SmartContract.TriggerType.All">
            <summary>
            The combination of all triggers.
            </summary>
        </member>
        <member name="T:Neo.TimeProvider">
            <summary>
            The time provider for the NEO system.
            </summary>
        </member>
        <member name="P:Neo.TimeProvider.Current">
            <summary>
            The currently used <see cref="T:Neo.TimeProvider"/> instance.
            </summary>
        </member>
        <member name="P:Neo.TimeProvider.UtcNow">
            <summary>
            Gets the current time expressed as the Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="T:Neo.UInt160">
            <summary>
            Represents a 160-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Neo.UInt160.Length">
            <summary>
            The length of <see cref="T:Neo.UInt160"/> values.
            </summary>
        </member>
        <member name="F:Neo.UInt160.Zero">
            <summary>
            Represents 0.
            </summary>
        </member>
        <member name="M:Neo.UInt160.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.UInt160"/> class.
            </summary>
        </member>
        <member name="M:Neo.UInt160.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.UInt160"/> class.
            </summary>
            <param name="value">The value of the <see cref="T:Neo.UInt160"/>.</param>
        </member>
        <member name="M:Neo.UInt160.Parse(System.String)">
            <summary>
            Parses an <see cref="T:Neo.UInt160"/> from the specified <see cref="T:System.String"/>.
            </summary>
            <param name="value">An <see cref="T:Neo.UInt160"/> represented by a <see cref="T:System.String"/>.</param>
            <returns>The parsed <see cref="T:Neo.UInt160"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="value"/> is not in the correct format.</exception>
        </member>
        <member name="M:Neo.UInt160.TryParse(System.String,Neo.UInt160@)">
            <summary>
            Parses an <see cref="T:Neo.UInt160"/> from the specified <see cref="T:System.String"/>.
            </summary>
            <param name="s">An <see cref="T:Neo.UInt160"/> represented by a <see cref="T:System.String"/>.</param>
            <param name="result">The parsed <see cref="T:Neo.UInt160"/>.</param>
            <returns><see langword="true"/> if an <see cref="T:Neo.UInt160"/> is successfully parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.UInt256">
            <summary>
            Represents a 256-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Neo.UInt256.Length">
            <summary>
            The length of <see cref="T:Neo.UInt256"/> values.
            </summary>
        </member>
        <member name="F:Neo.UInt256.Zero">
            <summary>
            Represents 0.
            </summary>
        </member>
        <member name="M:Neo.UInt256.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.UInt256"/> class.
            </summary>
        </member>
        <member name="M:Neo.UInt256.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.UInt256"/> class.
            </summary>
            <param name="value">The value of the <see cref="T:Neo.UInt256"/>.</param>
        </member>
        <member name="M:Neo.UInt256.Parse(System.String)">
            <summary>
            Parses an <see cref="T:Neo.UInt256"/> from the specified <see cref="T:System.String"/>.
            </summary>
            <param name="value">An <see cref="T:Neo.UInt256"/> represented by a <see cref="T:System.String"/>.</param>
            <returns>The parsed <see cref="T:Neo.UInt256"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="value"/> is not in the correct format.</exception>
        </member>
        <member name="M:Neo.UInt256.TryParse(System.String,Neo.UInt256@)">
            <summary>
            Parses an <see cref="T:Neo.UInt256"/> from the specified <see cref="T:System.String"/>.
            </summary>
            <param name="s">An <see cref="T:Neo.UInt256"/> represented by a <see cref="T:System.String"/>.</param>
            <param name="result">The parsed <see cref="T:Neo.UInt256"/>.</param>
            <returns><see langword="true"/> if an <see cref="T:Neo.UInt256"/> is successfully parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Neo.VM.Helper">
            <summary>
            A helper class related to NeoVM.
            </summary>
        </member>
        <member name="M:Neo.VM.Helper.CreateArray``1(Neo.VM.ScriptBuilder,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Emits the opcodes for creating an array.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="builder">The <see cref="T:Neo.VM.ScriptBuilder"/> to be used.</param>
            <param name="list">The elements of the array.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Neo.VM.Helper.CreateMap``2(Neo.VM.ScriptBuilder,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Emits the opcodes for creating a map.
            </summary>
            <typeparam name="TKey">The type of the key of the map.</typeparam>
            <typeparam name="TValue">The type of the value of the map.</typeparam>
            <param name="builder">The <see cref="T:Neo.VM.ScriptBuilder"/> to be used.</param>
            <param name="map">The key/value pairs of the map.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Neo.VM.Helper.Emit(Neo.VM.ScriptBuilder,Neo.VM.OpCode[])">
            <summary>
            Emits the specified opcodes.
            </summary>
            <param name="builder">The <see cref="T:Neo.VM.ScriptBuilder"/> to be used.</param>
            <param name="ops">The opcodes to emit.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Neo.VM.Helper.EmitDynamicCall(Neo.VM.ScriptBuilder,Neo.UInt160,System.String,System.Object[])">
            <summary>
            Emits the opcodes for calling a contract dynamically.
            </summary>
            <param name="builder">The <see cref="T:Neo.VM.ScriptBuilder"/> to be used.</param>
            <param name="scriptHash">The hash of the contract to be called.</param>
            <param name="method">The method to be called in the contract.</param>
            <param name="args">The arguments for calling the contract.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Neo.VM.Helper.EmitDynamicCall(Neo.VM.ScriptBuilder,Neo.UInt160,System.String,Neo.SmartContract.CallFlags,System.Object[])">
            <summary>
            Emits the opcodes for calling a contract dynamically.
            </summary>
            <param name="builder">The <see cref="T:Neo.VM.ScriptBuilder"/> to be used.</param>
            <param name="scriptHash">The hash of the contract to be called.</param>
            <param name="method">The method to be called in the contract.</param>
            <param name="flags">The <see cref="T:Neo.SmartContract.CallFlags"/> for calling the contract.</param>
            <param name="args">The arguments for calling the contract.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Neo.VM.Helper.EmitPush(Neo.VM.ScriptBuilder,Neo.IO.ISerializable)">
            <summary>
            Emits the opcodes for pushing the specified data onto the stack.
            </summary>
            <param name="builder">The <see cref="T:Neo.VM.ScriptBuilder"/> to be used.</param>
            <param name="data">The data to be pushed.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Neo.VM.Helper.EmitPush(Neo.VM.ScriptBuilder,Neo.SmartContract.ContractParameter)">
            <summary>
            Emits the opcodes for pushing the specified data onto the stack.
            </summary>
            <param name="builder">The <see cref="T:Neo.VM.ScriptBuilder"/> to be used.</param>
            <param name="parameter">The data to be pushed.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Neo.VM.Helper.EmitPush(Neo.VM.ScriptBuilder,System.Object)">
            <summary>
            Emits the opcodes for pushing the specified data onto the stack.
            </summary>
            <param name="builder">The <see cref="T:Neo.VM.ScriptBuilder"/> to be used.</param>
            <param name="obj">The data to be pushed.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Neo.VM.Helper.EmitSysCall(Neo.VM.ScriptBuilder,System.UInt32,System.Object[])">
            <summary>
            Emits the opcodes for invoking an interoperable service.
            </summary>
            <param name="builder">The <see cref="T:Neo.VM.ScriptBuilder"/> to be used.</param>
            <param name="method">The hash of the interoperable service.</param>
            <param name="args">The arguments for calling the interoperable service.</param>
            <returns>The same instance as <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Neo.VM.Helper.MakeScript(Neo.UInt160,System.String,System.Object[])">
            <summary>
            Generates the script for calling a contract dynamically.
            </summary>
            <param name="scriptHash">The hash of the contract to be called.</param>
            <param name="method">The method to be called in the contract.</param>
            <param name="args">The arguments for calling the contract.</param>
            <returns>The generated script.</returns>
        </member>
        <member name="M:Neo.VM.Helper.ToJson(Neo.VM.Types.StackItem,System.Int32)">
            <summary>
            Converts the <see cref="T:Neo.VM.Types.StackItem"/> to a JSON object.
            </summary>
            <param name="item">The <see cref="T:Neo.VM.Types.StackItem"/> to convert.</param>
            <param name="maxSize">The maximum size in bytes of the result.</param>
            <returns>The <see cref="T:Neo.VM.Types.StackItem"/> represented by a JSON object.</returns>
        </member>
        <member name="M:Neo.VM.Helper.ToJson(Neo.VM.EvaluationStack,System.Int32)">
            <summary>
            Converts the <see cref="T:Neo.VM.EvaluationStack"/> to a JSON object.
            </summary>
            <param name="stack">The <see cref="T:Neo.VM.EvaluationStack"/> to convert.</param>
            <param name="maxSize">The maximum size in bytes of the result.</param>
            <returns>The <see cref="T:Neo.VM.EvaluationStack"/> represented by a JSON object.</returns>
        </member>
        <member name="M:Neo.VM.Helper.ToParameter(Neo.VM.Types.StackItem)">
            <summary>
            Converts the <see cref="T:Neo.VM.Types.StackItem"/> to a <see cref="T:Neo.SmartContract.ContractParameter"/>.
            </summary>
            <param name="item">The <see cref="T:Neo.VM.Types.StackItem"/> to convert.</param>
            <returns>The converted <see cref="T:Neo.SmartContract.ContractParameter"/>.</returns>
        </member>
        <member name="M:Neo.VM.Helper.ToStackItem(Neo.SmartContract.ContractParameter)">
            <summary>
            Converts the <see cref="T:Neo.SmartContract.ContractParameter"/> to a <see cref="T:Neo.VM.Types.StackItem"/>.
            </summary>
            <param name="parameter">The <see cref="T:Neo.SmartContract.ContractParameter"/> to convert.</param>
            <returns>The converted <see cref="T:Neo.VM.Types.StackItem"/>.</returns>
        </member>
        <member name="T:Neo.Wallets.AssetDescriptor">
            <summary>
            Represents the descriptor of an asset.
            </summary>
        </member>
        <member name="P:Neo.Wallets.AssetDescriptor.AssetId">
            <summary>
            The id of the asset.
            </summary>
        </member>
        <member name="P:Neo.Wallets.AssetDescriptor.AssetName">
            <summary>
            The name of the asset.
            </summary>
        </member>
        <member name="P:Neo.Wallets.AssetDescriptor.Symbol">
            <summary>
            The symbol of the asset.
            </summary>
        </member>
        <member name="P:Neo.Wallets.AssetDescriptor.Decimals">
            <summary>
            The number of decimal places of the token.
            </summary>
        </member>
        <member name="M:Neo.Wallets.AssetDescriptor.#ctor(Neo.Persistence.DataCache,Neo.ProtocolSettings,Neo.UInt160)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Wallets.AssetDescriptor"/> class.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> used by the <see cref="T:Neo.SmartContract.ApplicationEngine"/>.</param>
            <param name="asset_id">The id of the asset.</param>
        </member>
        <member name="T:Neo.Wallets.Helper">
            <summary>
            A helper class related to wallets.
            </summary>
        </member>
        <member name="M:Neo.Wallets.Helper.Sign(Neo.Network.P2P.Payloads.IVerifiable,Neo.Wallets.KeyPair,System.UInt32)">
            <summary>
            Signs an <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> with the specified private key.
            </summary>
            <param name="verifiable">The <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> to sign.</param>
            <param name="key">The private key to be used.</param>
            <param name="network">The magic number of the NEO network.</param>
            <returns>The signature for the <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/>.</returns>
        </member>
        <member name="M:Neo.Wallets.Helper.ToAddress(Neo.UInt160,System.Byte)">
            <summary>
            Converts the specified script hash to an address.
            </summary>
            <param name="scriptHash">The script hash to convert.</param>
            <param name="version">The address version.</param>
            <returns>The converted address.</returns>
        </member>
        <member name="M:Neo.Wallets.Helper.ToScriptHash(System.String,System.Byte)">
            <summary>
            Converts the specified address to a script hash.
            </summary>
            <param name="address">The address to convert.</param>
            <param name="version">The address version.</param>
            <returns>The converted script hash.</returns>
        </member>
        <member name="M:Neo.Wallets.Helper.CalculateNetworkFee(Neo.Network.P2P.Payloads.Transaction,Neo.Persistence.DataCache,Neo.ProtocolSettings,System.Func{Neo.UInt160,System.Byte[]},System.Int64)">
            <summary>
            Calculates the network fee for the specified transaction.
            In the unit of datoshi, 1 datoshi = 1e-8 GAS
            </summary>
            <param name="tx">The transaction to calculate.</param>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="settings">Thr protocol settings to use.</param>
            <param name="accountScript">Function to retrive the script's account from a hash.</param>
            <param name="maxExecutionCost">The maximum cost that can be spent when a contract is executed.</param>
            <returns>The network fee of the transaction.</returns>
        </member>
        <member name="T:Neo.Wallets.IWalletProvider">
            <summary>
            A provider for obtaining wallet instance.
            </summary>
        </member>
        <member name="E:Neo.Wallets.IWalletProvider.WalletChanged">
            <summary>
            Triggered when a wallet is opened or closed.
            </summary>
        </member>
        <member name="M:Neo.Wallets.IWalletProvider.GetWallet">
            <summary>
            Get the currently opened <see cref="T:Neo.Wallets.Wallet"/> instance.
            </summary>
            <returns>The opened wallet. Or <see langword="null"/> if no wallet is opened.</returns>
        </member>
        <member name="T:Neo.Wallets.KeyPair">
            <summary>
            Represents a private/public key pair in wallets.
            </summary>
        </member>
        <member name="F:Neo.Wallets.KeyPair.PrivateKey">
            <summary>
            The private key.
            </summary>
        </member>
        <member name="F:Neo.Wallets.KeyPair.PublicKey">
            <summary>
            The public key.
            </summary>
        </member>
        <member name="P:Neo.Wallets.KeyPair.PublicKeyHash">
            <summary>
            The hash of the public key.
            </summary>
        </member>
        <member name="M:Neo.Wallets.KeyPair.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Wallets.KeyPair"/> class.
            </summary>
            <param name="privateKey">The private key in the <see cref="T:Neo.Wallets.KeyPair"/>.</param>
        </member>
        <member name="M:Neo.Wallets.KeyPair.Export">
            <summary>
            Exports the private key in WIF format.
            </summary>
            <returns>The private key in WIF format.</returns>
        </member>
        <member name="M:Neo.Wallets.KeyPair.Export(System.String,System.Byte,System.Int32,System.Int32,System.Int32)">
            <summary>
            Exports the private key in NEP-2 format.
            </summary>
            <param name="passphrase">The passphrase of the private key.</param>
            <param name="version">The address version.</param>
            <param name="N">The N field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <param name="r">The R field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <param name="p">The P field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <returns>The private key in NEP-2 format.</returns>
        </member>
        <member name="M:Neo.Wallets.KeyPair.Export(System.Byte[],System.Byte,System.Int32,System.Int32,System.Int32)">
            <summary>
            Exports the private key in NEP-2 format.
            </summary>
            <param name="passphrase">The passphrase of the private key.</param>
            <param name="version">The address version.</param>
            <param name="N">The N field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <param name="r">The R field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <param name="p">The P field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <returns>The private key in NEP-2 format.</returns>
        </member>
        <member name="M:Neo.Wallets.NEP6.NEP6Account.ChangePasswordPrepare(System.String,System.String)">
            <summary>
            Cache draft nep2key during wallet password changing process. Should not be called alone for a single account
            </summary>
        </member>
        <member name="T:Neo.Wallets.NEP6.NEP6Wallet">
            <summary>
            An implementation of the NEP-6 wallet standard.
            </summary>
            <remarks>https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki</remarks>
        </member>
        <member name="F:Neo.Wallets.NEP6.NEP6Wallet.Scrypt">
            <summary>
            The parameters of the SCrypt algorithm used for encrypting and decrypting the private keys in the wallet.
            </summary>
        </member>
        <member name="P:Neo.Wallets.NEP6.NEP6Wallet.Version">
            <summary>
            The version of the wallet standard. It is currently fixed at 1.0 and will be used for functional upgrades in the future.
            </summary>
        </member>
        <member name="M:Neo.Wallets.NEP6.NEP6Wallet.#ctor(System.String,System.String,Neo.ProtocolSettings,System.String)">
            <summary>
            Loads or creates a wallet at the specified path.
            </summary>
            <param name="path">The path of the wallet file.</param>
            <param name="password">The password of the wallet.</param>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> to be used by the wallet.</param>
            <param name="name">The name of the wallet. If the wallet is loaded from an existing file, this parameter is ignored.</param>
        </member>
        <member name="M:Neo.Wallets.NEP6.NEP6Wallet.#ctor(System.String,System.String,Neo.ProtocolSettings,Neo.Json.JObject)">
            <summary>
            Loads the wallet with the specified JSON string.
            </summary>
            <param name="path">The path of the wallet.</param>
            <param name="password">The password of the wallet.</param>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> to be used by the wallet.</param>
            <param name="json">The JSON object representing the wallet.</param>
        </member>
        <member name="M:Neo.Wallets.NEP6.NEP6Wallet.DecryptKey(System.String)">
            <summary>
            Decrypts the specified NEP-2 string with the password of the wallet.
            </summary>
            <param name="nep2key">The NEP-2 string to decrypt.</param>
            <returns>The decrypted private key.</returns>
        </member>
        <member name="M:Neo.Wallets.NEP6.NEP6Wallet.ToJson">
            <summary>
            Exports the wallet as JSON
            </summary>
        </member>
        <member name="T:Neo.Wallets.NEP6.ScryptParameters">
            <summary>
            Represents the parameters of the SCrypt algorithm.
            </summary>
        </member>
        <member name="P:Neo.Wallets.NEP6.ScryptParameters.Default">
            <summary>
            The default parameters used by <see cref="T:Neo.Wallets.NEP6.NEP6Wallet"/>.
            </summary>
        </member>
        <member name="F:Neo.Wallets.NEP6.ScryptParameters.N">
            <summary>
            CPU/Memory cost parameter. Must be larger than 1, a power of 2 and less than 2^(128 * r / 8).
            </summary>
        </member>
        <member name="F:Neo.Wallets.NEP6.ScryptParameters.R">
            <summary>
            The block size, must be >= 1.
            </summary>
        </member>
        <member name="F:Neo.Wallets.NEP6.ScryptParameters.P">
            <summary>
            Parallelization parameter. Must be a positive integer less than or equal to Int32.MaxValue / (128 * r * 8).
            </summary>
        </member>
        <member name="M:Neo.Wallets.NEP6.ScryptParameters.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> class.
            </summary>
            <param name="n">CPU/Memory cost parameter.</param>
            <param name="r">The block size.</param>
            <param name="p">Parallelization parameter.</param>
        </member>
        <member name="M:Neo.Wallets.NEP6.ScryptParameters.FromJson(Neo.Json.JObject)">
            <summary>
            Converts the parameters from a JSON object.
            </summary>
            <param name="json">The parameters represented by a JSON object.</param>
            <returns>The converted parameters.</returns>
        </member>
        <member name="M:Neo.Wallets.NEP6.ScryptParameters.ToJson">
            <summary>
            Converts the parameters to a JSON object.
            </summary>
            <returns>The parameters represented by a JSON object.</returns>
        </member>
        <member name="T:Neo.Wallets.TransferOutput">
            <summary>
            Represents an output of a transfer.
            </summary>
        </member>
        <member name="F:Neo.Wallets.TransferOutput.AssetId">
            <summary>
            The id of the asset to transfer.
            </summary>
        </member>
        <member name="F:Neo.Wallets.TransferOutput.Value">
            <summary>
            The amount of the asset to transfer.
            </summary>
        </member>
        <member name="F:Neo.Wallets.TransferOutput.ScriptHash">
            <summary>
            The account to transfer to.
            </summary>
        </member>
        <member name="F:Neo.Wallets.TransferOutput.Data">
            <summary>
            The object to be passed to the transfer method of NEP-17.
            </summary>
        </member>
        <member name="T:Neo.Wallets.Wallet">
            <summary>
            The base class of wallets.
            </summary>
        </member>
        <member name="P:Neo.Wallets.Wallet.ProtocolSettings">
            <summary>
            The <see cref="T:Neo.ProtocolSettings"/> to be used by the wallet.
            </summary>
        </member>
        <member name="P:Neo.Wallets.Wallet.Name">
            <summary>
            The name of the wallet.
            </summary>
        </member>
        <member name="P:Neo.Wallets.Wallet.Path">
            <summary>
            The path of the wallet.
            </summary>
        </member>
        <member name="P:Neo.Wallets.Wallet.Version">
            <summary>
            The version of the wallet.
            </summary>
        </member>
        <member name="M:Neo.Wallets.Wallet.ChangePassword(System.String,System.String)">
            <summary>
            Changes the password of the wallet.
            </summary>
            <param name="oldPassword">The old password of the wallet.</param>
            <param name="newPassword">The new password to be used.</param>
            <returns><see langword="true"/> if the password is changed successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.Contains(Neo.UInt160)">
            <summary>
            Determines whether the specified account is included in the wallet.
            </summary>
            <param name="scriptHash">The hash of the account.</param>
            <returns><see langword="true"/> if the account is included in the wallet; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.CreateAccount(System.Byte[])">
            <summary>
            Creates a standard account with the specified private key.
            </summary>
            <param name="privateKey">The private key of the account.</param>
            <returns>The created account.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.CreateAccount(Neo.SmartContract.Contract,Neo.Wallets.KeyPair)">
            <summary>
            Creates a contract account for the wallet.
            </summary>
            <param name="contract">The contract of the account.</param>
            <param name="key">The private key of the account.</param>
            <returns>The created account.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.CreateAccount(Neo.UInt160)">
            <summary>
            Creates a watch-only account for the wallet.
            </summary>
            <param name="scriptHash">The hash of the account.</param>
            <returns>The created account.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.Delete">
            <summary>
            Deletes the entire database of the wallet.
            </summary>
        </member>
        <member name="M:Neo.Wallets.Wallet.DeleteAccount(Neo.UInt160)">
            <summary>
            Deletes an account from the wallet.
            </summary>
            <param name="scriptHash">The hash of the account.</param>
            <returns><see langword="true"/> if the account is removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.GetAccount(Neo.UInt160)">
            <summary>
            Gets the account with the specified hash.
            </summary>
            <param name="scriptHash">The hash of the account.</param>
            <returns>The account with the specified hash.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.GetAccounts">
            <summary>
            Gets all the accounts from the wallet.
            </summary>
            <returns>All accounts in the wallet.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.#ctor(System.String,Neo.ProtocolSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Wallets.Wallet"/> class.
            </summary>
            <param name="path">The path of the wallet file.</param>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> to be used by the wallet.</param>
        </member>
        <member name="M:Neo.Wallets.Wallet.CreateAccount">
            <summary>
            Creates a standard account for the wallet.
            </summary>
            <returns>The created account.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.CreateAccount(Neo.SmartContract.Contract,System.Byte[])">
            <summary>
            Creates a contract account for the wallet.
            </summary>
            <param name="contract">The contract of the account.</param>
            <param name="privateKey">The private key of the account.</param>
            <returns>The created account.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.GetAccount(Neo.Cryptography.ECC.ECPoint)">
            <summary>
            Gets the account with the specified public key.
            </summary>
            <param name="pubkey">The public key of the account.</param>
            <returns>The account with the specified public key.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.GetDefaultAccount">
            <summary>
            Gets the default account of the wallet.
            </summary>
            <returns>The default account of the wallet.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.GetAvailable(Neo.Persistence.DataCache,Neo.UInt160)">
            <summary>
            Gets the available balance for the specified asset in the wallet.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="asset_id">The id of the asset.</param>
            <returns>The available balance for the specified asset.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.GetBalance(Neo.Persistence.DataCache,Neo.UInt160,Neo.UInt160[])">
            <summary>
            Gets the balance for the specified asset in the wallet.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="asset_id">The id of the asset.</param>
            <param name="accounts">The accounts to be counted.</param>
            <returns>The balance for the specified asset.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.GetPrivateKeyFromNEP2(System.String,System.String,System.Byte,System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes a private key from the specified NEP-2 string.
            </summary>
            <param name="nep2">The NEP-2 string to be decoded.</param>
            <param name="passphrase">The passphrase of the private key.</param>
            <param name="version">The address version of NEO system.</param>
            <param name="N">The N field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <param name="r">The R field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <param name="p">The P field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <returns>The decoded private key.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.GetPrivateKeyFromNEP2(System.String,System.Byte[],System.Byte,System.Int32,System.Int32,System.Int32)">
            <summary>
            Decodes a private key from the specified NEP-2 string.
            </summary>
            <param name="nep2">The NEP-2 string to be decoded.</param>
            <param name="passphrase">The passphrase of the private key.</param>
            <param name="version">The address version of NEO system.</param>
            <param name="N">The N field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <param name="r">The R field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <param name="p">The P field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <returns>The decoded private key.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.GetPrivateKeyFromWIF(System.String)">
            <summary>
            Decodes a private key from the specified WIF string.
            </summary>
            <param name="wif">The WIF string to be decoded.</param>
            <returns>The decoded private key.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.Import(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Imports an account from a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.
            </summary>
            <param name="cert">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> to import.</param>
            <returns>The imported account.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.Import(System.String)">
            <summary>
            Imports an account from the specified WIF string.
            </summary>
            <param name="wif">The WIF string to import.</param>
            <returns>The imported account.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.Import(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Imports an account from the specified NEP-2 string.
            </summary>
            <param name="nep2">The NEP-2 string to import.</param>
            <param name="passphrase">The passphrase of the private key.</param>
            <param name="N">The N field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <param name="r">The R field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <param name="p">The P field of the <see cref="T:Neo.Wallets.NEP6.ScryptParameters"/> to be used.</param>
            <returns>The imported account.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.MakeTransaction(Neo.Persistence.DataCache,Neo.Wallets.TransferOutput[],Neo.UInt160,Neo.Network.P2P.Payloads.Signer[],Neo.Network.P2P.Payloads.Block)">
            <summary>
            Makes a transaction to transfer assets.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="outputs">The array of <see cref="T:Neo.Wallets.TransferOutput"/> that contain the asset, amount, and targets of the transfer.</param>
            <param name="from">The account to transfer from.</param>
            <param name="cosigners">The cosigners to be added to the transaction.</param>
            <param name="persistingBlock">The block environment to execute the transaction. If null, <see cref="M:Neo.SmartContract.ApplicationEngine.CreateDummyBlock(Neo.Persistence.DataCache,Neo.ProtocolSettings)"></see> will be used.</param>
            <returns>The created transaction.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.MakeTransaction(Neo.Persistence.DataCache,System.ReadOnlyMemory{System.Byte},Neo.UInt160,Neo.Network.P2P.Payloads.Signer[],Neo.Network.P2P.Payloads.TransactionAttribute[],System.Int64,Neo.Network.P2P.Payloads.Block)">
            <summary>
            Makes a transaction to run a smart contract.
            </summary>
            <param name="snapshot">The snapshot used to read data.</param>
            <param name="script">The script to be loaded in the transaction.</param>
            <param name="sender">The sender of the transaction.</param>
            <param name="cosigners">The cosigners to be added to the transaction.</param>
            <param name="attributes">The attributes to be added to the transaction.</param>
            <param name="maxGas">The maximum gas that can be spent to execute the script, in the unit of datoshi, 1 datoshi = 1e-8 GAS.</param>
            <param name="persistingBlock">The block environment to execute the transaction. If null, <see cref="M:Neo.SmartContract.ApplicationEngine.CreateDummyBlock(Neo.Persistence.DataCache,Neo.ProtocolSettings)"></see> will be used.</param>
            <returns>The created transaction.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.Sign(Neo.SmartContract.ContractParametersContext)">
            <summary>
            Signs the <see cref="T:Neo.Network.P2P.Payloads.IVerifiable"/> in the specified <see cref="T:Neo.SmartContract.ContractParametersContext"/> with the wallet.
            </summary>
            <param name="context">The <see cref="T:Neo.SmartContract.ContractParametersContext"/> to be used.</param>
            <returns><see langword="true"/> if the signature is successfully added to the context; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.VerifyPassword(System.String)">
            <summary>
            Checks that the specified password is correct for the wallet.
            </summary>
            <param name="password">The password to be checked.</param>
            <returns><see langword="true"/> if the password is correct; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Neo.Wallets.Wallet.Save">
            <summary>
            Saves the wallet file to the disk. It uses the value of <see cref="P:Neo.Wallets.Wallet.Path"/> property.
            </summary>
        </member>
        <member name="M:Neo.Wallets.Wallet.Migrate(System.String,System.String,System.String,Neo.ProtocolSettings)">
            <summary>
            Migrates the accounts from old wallet to a new <see cref="T:Neo.Wallets.NEP6.NEP6Wallet"/>.
            </summary>
            <param name="password">The password of the wallets.</param>
            <param name="path">The path of the new wallet file.</param>
            <param name="oldPath">The path of the old wallet file.</param>
            <param name="settings">The <see cref="P:Neo.Wallets.Wallet.ProtocolSettings"/> to be used by the wallet.</param>
            <returns>The created new wallet.</returns>
        </member>
        <member name="T:Neo.Wallets.WalletAccount">
            <summary>
            Represents an account in a wallet.
            </summary>
        </member>
        <member name="F:Neo.Wallets.WalletAccount.ProtocolSettings">
            <summary>
            The <see cref="T:Neo.ProtocolSettings"/> to be used by the wallet.
            </summary>
        </member>
        <member name="F:Neo.Wallets.WalletAccount.ScriptHash">
            <summary>
            The hash of the account.
            </summary>
        </member>
        <member name="F:Neo.Wallets.WalletAccount.Label">
            <summary>
            The label of the account.
            </summary>
        </member>
        <member name="F:Neo.Wallets.WalletAccount.IsDefault">
            <summary>
            Indicates whether the account is the default account in the wallet.
            </summary>
        </member>
        <member name="F:Neo.Wallets.WalletAccount.Lock">
            <summary>
            Indicates whether the account is locked.
            </summary>
        </member>
        <member name="F:Neo.Wallets.WalletAccount.Contract">
            <summary>
            The contract of the account.
            </summary>
        </member>
        <member name="P:Neo.Wallets.WalletAccount.Address">
            <summary>
            The address of the account.
            </summary>
        </member>
        <member name="P:Neo.Wallets.WalletAccount.HasKey">
            <summary>
            Indicates whether the account contains a private key.
            </summary>
        </member>
        <member name="P:Neo.Wallets.WalletAccount.WatchOnly">
            <summary>
            Indicates whether the account is a watch-only account.
            </summary>
        </member>
        <member name="M:Neo.Wallets.WalletAccount.GetKey">
            <summary>
            Gets the private key of the account.
            </summary>
            <returns>The private key of the account. Or <see langword="null"/> if there is no private key in the account.</returns>
        </member>
        <member name="M:Neo.Wallets.WalletAccount.#ctor(Neo.UInt160,Neo.ProtocolSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.Wallets.WalletAccount"/> class.
            </summary>
            <param name="scriptHash">The hash of the account.</param>
            <param name="settings">The <see cref="T:Neo.ProtocolSettings"/> to be used by the wallet.</param>
        </member>
    </members>
</doc>
