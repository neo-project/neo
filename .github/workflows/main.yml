name: .NET Core Test and Publish

on:
  push:
    branches: [master]
  pull_request:

env:
  DOTNET_VERSION: 9.0.x

jobs:

  Format:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Check Format (*.cs)
      run: dotnet format --verify-no-changes --verbosity diagnostic

  Test-Everything:
    needs: [Format]
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }} 

    - name: Build (Everything)
      run: dotnet build --disable-parallel -p:GITHUB_ACTIONS=true

    - name: Install dependencies
      run: |
        sudo apt-get install libleveldb-dev expect
        find ./bin -name 'config.json' | xargs perl -pi -e 's|LevelDBStore|MemoryStore|g' 

    - name: Run tests with expect
      run: expect ./scripts/Neo.CLI/test-neo-cli.exp
      
  Test:
    needs: [Format]
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Test (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install leveldb
        brew install gperftools
        dotnet build --disable-parallel -p:GITHUB_ACTIONS=true
        dotnet test --no-build -p:GITHUB_ACTIONS=true

    - name: Test (windows)
      if: matrix.os == 'windows-latest'
      run: |
        dotnet build --disable-parallel -p:GITHUB_ACTIONS=true
        dotnet test --no-build -p:GITHUB_ACTIONS=true

    - name: Test for coverall
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get --assume-yes install libleveldb-dev librocksdb-dev
        dotnet build --disable-parallel -p:GITHUB_ACTIONS=true
        dotnet test --no-build -p:GITHUB_ACTIONS=true -p:Exclude="[Neo.UnitTests]*"

    - name: Coveralls
      if: matrix.os == 'ubuntu-latest'
      uses: coverallsapp/github-action@v2.3.6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        debug: false
        measure: true
        allow-empty: true
        format: lcov
        files:
          ${{ github.workspace }}/TestResults/Neo.UnitTests/coverage.info
          ${{ github.workspace }}/TestResults/Neo.Cryptography.BLS12_381.Tests/coverage.info
          ${{ github.workspace }}/TestResults/Neo.ConsoleService.Tests/coverage.info
          ${{ github.workspace }}/TestResults/Neo.VM.Tests/coverage.info
          ${{ github.workspace }}/TestResults/Neo.Json.UnitTests/coverage.info
          ${{ github.workspace }}/TestResults/Neo.Cryptography.MPTTrie.Tests/coverage.info
          ${{ github.workspace }}/TestResults/Neo.Network.RPC.Tests/coverage.info
          ${{ github.workspace }}/TestResults/Neo.Plugins.OracleService.Tests/coverage.info
          ${{ github.workspace }}/TestResults/Neo.Plugins.RpcServer.Tests/coverage.info
          ${{ github.workspace }}/TestResults/Neo.Plugins.Storage.Tests/coverage.info
          ${{ github.workspace }}/TestResults/Neo.Plugins.ApplicationLogs.Tests/coverage.info
          ${{ github.workspace }}/TestResults/Neo.Extensions.Tests/coverage.info

  PublishPackage:
    if: github.ref == 'refs/heads/master' && startsWith(github.repository, 'neo-project/')
    needs: [Test]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Set Version
      run: git rev-list --count HEAD | xargs printf 'CI%05d' | xargs -I{} echo 'VERSION_SUFFIX={}' >> $GITHUB_ENV

    - name : Pack (Everything)
      run: |
        dotnet pack \
        --configuration Release \
        --output ./out \
        --version-suffix ${{ env.VERSION_SUFFIX }} \
        -p:GITHUB_ACTIONS=true

    - name: Publish to Github Packages
      working-directory: ./out
      run: |
        dotnet nuget push * \
            --source https://nuget.pkg.github.com/neo-project/index.json \
            --api-key "${{ secrets.GITHUB_TOKEN }}" \
            --disable-buffering \
            --no-service-endpoint

    - name: Publish to myGet
      working-directory: ./out
      run: |
        dotnet nuget push * \
            --source https://www.myget.org/F/neo/api/v3/index.json \
            --api-key "${{ secrets.MYGET_TOKEN }}" \
            --disable-buffering \
            --no-service-endpoint
